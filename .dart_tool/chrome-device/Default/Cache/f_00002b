define(['dart_sdk', 'packages/universal_io/src/io/string_transformer.dart', 'packages/universal_io/src/io/exceptions.dart', 'packages/universal_io/src/io/io_sink.dart', 'packages/collection/src/equality.dart', 'packages/typed_data/src/typed_buffer.dart'], (function load__packages__universal_io__src__io__sync_socket_dart(dart_sdk, packages__universal_io__src__io__string_transformer$46dart, packages__universal_io__src__io__exceptions$46dart, packages__universal_io__src__io__io_sink$46dart, packages__collection__src__equality$46dart, packages__typed_data__src__typed_buffer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const convert = dart_sdk.convert;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const _js_helper = dart_sdk._js_helper;
  const html = dart_sdk.html;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const string_transformer = packages__universal_io__src__io__string_transformer$46dart.src__io__string_transformer;
  const exceptions = packages__universal_io__src__io__exceptions$46dart.src__io__exceptions;
  const io_sink = packages__universal_io__src__io__io_sink$46dart.src__io__io_sink;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const typed_buffer = packages__typed_data__src__typed_buffer$46dart.src__typed_buffer;
  var sync_socket = Object.create(dart.library);
  var stdio = Object.create(dart.library);
  var socket$ = Object.create(dart.library);
  var security_context = Object.create(dart.library);
  var secure_socket = Object.create(dart.library);
  var secure_server_socket = Object.create(dart.library);
  var process = Object.create(dart.library);
  var platform = Object.create(dart.library);
  var overrides$ = Object.create(dart.library);
  var network_policy = Object.create(dart.library);
  var link = Object.create(dart.library);
  var internet_address = Object.create(dart.library);
  var file_system_entity = Object.create(dart.library);
  var file = Object.create(dart.library);
  var directory = Object.create(dart.library);
  var io_sink_base = Object.create(dart.library);
  var http_client_response = Object.create(dart.library);
  var http_client_exception = Object.create(dart.library);
  var http_client_request = Object.create(dart.library);
  var http_client = Object.create(dart.library);
  var internals_for_browser_or_node_impl_browser = Object.create(dart.library);
  var internals_for_browser_or_node = Object.create(dart.library);
  var http = Object.create(dart.library);
  var io_impl_js = Object.create(dart.library);
  var $_equals = dartx._equals;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $_get = dartx._get;
  var $buffer = dartx.buffer;
  var $offsetInBytes = dartx.offsetInBytes;
  var $setInt32 = dartx.setInt32;
  var $isNotEmpty = dartx.isNotEmpty;
  var $hashCode = dartx.hashCode;
  var $join = dartx.join;
  var $startsWith = dartx.startsWith;
  var $toString = dartx.toString;
  var $map = dartx.map;
  var $length = dartx.length;
  var $modulo = dartx['%'];
  var $toRadixString = dartx.toRadixString;
  var $substring = dartx.substring;
  var $padRight = dartx.padRight;
  var $sort = dartx.sort;
  var $responseType = dartx.responseType;
  var $responseHeaders = dartx.responseHeaders;
  var $forEach = dartx.forEach;
  var $response = dartx.response;
  var $lengthInBytes = dartx.lengthInBytes;
  var $onReadyStateChange = dartx.onReadyStateChange;
  var $readyState = dartx.readyState;
  var $onProgress = dartx.onProgress;
  var $onLoad = dartx.onLoad;
  var $onTimeout = dartx.onTimeout;
  var $onError = dartx.onError;
  var $noSuchMethod = dartx.noSuchMethod;
  var $indexOf = dartx.indexOf;
  var $navigator = dartx.navigator;
  var $first = dartx.first;
  var $userAgent = dartx.userAgent;
  var $toLowerCase = dartx.toLowerCase;
  var $contains = dartx.contains;
  var $replaceAll = dartx.replaceAll;
  var $last = dartx.last;
  var $_set = dartx._set;
  var $codeUnitAt = dartx.codeUnitAt;
  var $split = dartx.split;
  var $remove = dartx.remove;
  var $clear = dartx.clear;
  var $trim = dartx.trim;
  var $codeUnits = dartx.codeUnits;
  var $entries = dartx.entries;
  var $keys = dartx.keys;
  var $values = dartx.values;
  var $addAll = dartx.addAll;
  var $addEntries = dartx.addEntries;
  var $cast = dartx.cast;
  var $containsKey = dartx.containsKey;
  var $containsValue = dartx.containsValue;
  var $putIfAbsent = dartx.putIfAbsent;
  var $removeWhere = dartx.removeWhere;
  var $update = dartx.update;
  var $updateAll = dartx.updateAll;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    StreamSubscriptionOfRawSocketEvent: () => (T.StreamSubscriptionOfRawSocketEvent = dart.constFn(async.StreamSubscription$(socket$.RawSocketEvent)))(),
    StreamSubscriptionNOfRawSocketEvent: () => (T.StreamSubscriptionNOfRawSocketEvent = dart.constFn(dart.nullable(T.StreamSubscriptionOfRawSocketEvent())))(),
    FutureOfRawSecureSocket: () => (T.FutureOfRawSecureSocket = dart.constFn(async.Future$(secure_socket.RawSecureSocket)))(),
    dynamicToFutureOfRawSecureSocket: () => (T.dynamicToFutureOfRawSecureSocket = dart.constFn(dart.fnType(T.FutureOfRawSecureSocket(), [dart.dynamic])))(),
    RawSecureSocketToSecureSocket: () => (T.RawSecureSocketToSecureSocket = dart.constFn(dart.fnType(secure_socket.SecureSocket, [secure_socket.RawSecureSocket])))(),
    RawSecureServerSocketToSecureServerSocket: () => (T.RawSecureServerSocketToSecureServerSocket = dart.constFn(dart.fnType(secure_server_socket.SecureServerSocket, [secure_server_socket.RawSecureServerSocket])))(),
    IdentityMapOfString$String: () => (T.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    IOOverridesN: () => (T.IOOverridesN = dart.constFn(dart.nullable(overrides$.IOOverrides)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    LinkedMapOfObjectN$ObjectN: () => (T.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T.ObjectN(), T.ObjectN())))(),
    FunctionN: () => (T.FunctionN = dart.constFn(dart.nullable(core.Function)))(),
    ZoneSpecificationN: () => (T.ZoneSpecificationN = dart.constFn(dart.nullable(async.ZoneSpecification)))(),
    MapOfObjectN$ObjectN: () => (T.MapOfObjectN$ObjectN = dart.constFn(core.Map$(T.ObjectN(), T.ObjectN())))(),
    MapNOfObjectN$ObjectN: () => (T.MapNOfObjectN$ObjectN = dart.constFn(dart.nullable(T.MapOfObjectN$ObjectN())))(),
    Fn__ToR: () => (T.Fn__ToR = dart.constFn(dart.gFnType(R => [R, [dart.fnType(R, [])], {onError: T.FunctionN(), zoneSpecification: T.ZoneSpecificationN(), zoneValues: T.MapNOfObjectN$ObjectN()}, {}], R => [T.ObjectN()])))(),
    ListEqualityOfint: () => (T.ListEqualityOfint = dart.constFn(equality.ListEquality$(core.int)))(),
    DefaultEqualityOfNever: () => (T.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    intToString: () => (T.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    StreamOfListOfint: () => (T.StreamOfListOfint = dart.constFn(async.Stream$(T.ListOfint())))(),
    ListOfintTovoid: () => (T.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T.ListOfint()])))(),
    StackTraceN: () => (T.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    dynamicAnddynamicToNull: () => (T.dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))(),
    JSArrayOfCookie: () => (T.JSArrayOfCookie = dart.constFn(_interceptors.JSArray$(http.Cookie)))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    StringAndListOfStringTovoid: () => (T.StringAndListOfStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T.ListOfString()])))(),
    FutureOfHttpClientResponse: () => (T.FutureOfHttpClientResponse = dart.constFn(async.Future$(http.HttpClientResponse)))(),
    HttpClientRequestToFutureOfHttpClientResponse: () => (T.HttpClientRequestToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T.FutureOfHttpClientResponse(), [http.HttpClientRequest])))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringAndStringNTovoid: () => (T.StringAndStringNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T.StringN()])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    CompleterOfHttpClientResponse: () => (T.CompleterOfHttpClientResponse = dart.constFn(async.Completer$(http.HttpClientResponse)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    FutureOfvoid: () => (T.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOrOfvoid: () => (T.VoidToFutureOrOfvoid = dart.constFn(dart.fnType(dart.void, [])))(),
    StreamControllerOfUint8List: () => (T.StreamControllerOfUint8List = dart.constFn(async.StreamController$(typed_data.Uint8List)))(),
    StringAndStringTovoid: () => (T.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    EventTovoid: () => (T.EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))(),
    ProgressEventTovoid: () => (T.ProgressEventTovoid = dart.constFn(dart.fnType(dart.void, [html.ProgressEvent])))(),
    ProgressEventToNull: () => (T.ProgressEventToNull = dart.constFn(dart.fnType(core.Null, [html.ProgressEvent])))(),
    EncodingN: () => (T.EncodingN = dart.constFn(dart.nullable(convert.Encoding)))(),
    StringTovoid: () => (T.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    VoidToint: () => (T.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    StringToint: () => (T.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    IdentityMapOfString$ListOfString: () => (T.IdentityMapOfString$ListOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T.ListOfString())))(),
    StringNToString: () => (T.StringNToString = dart.constFn(dart.fnType(core.String, [T.StringN()])))(),
    HashMapOfString$StringN: () => (T.HashMapOfString$StringN = dart.constFn(collection.HashMap$(core.String, T.StringN())))(),
    UnmodifiableMapViewOfString$StringN: () => (T.UnmodifiableMapViewOfString$StringN = dart.constFn(collection.UnmodifiableMapView$(core.String, T.StringN())))(),
    IdentityMapOfString$StringN: () => (T.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T.StringN())))(),
    VoidToString: () => (T.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    IterableOfMapEntry: () => (T.IterableOfMapEntry = dart.constFn(core.Iterable$(core.MapEntry)))(),
    dynamicAnddynamicTovoid: () => (T.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    VoidTodynamic: () => (T.VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    dynamicAnddynamicTobool: () => (T.dynamicAnddynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic, dart.dynamic])))(),
    VoidToNdynamic: () => (T.VoidToNdynamic = dart.constFn(dart.nullable(T.VoidTodynamic())))(),
    dynamicTodynamic: () => (T.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    dynamicAnddynamicTodynamic: () => (T.dynamicAnddynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])))(),
    IdentityMapOfString$_HttpSession: () => (T.IdentityMapOfString$_HttpSession = dart.constFn(_js_helper.IdentityMap$(core.String, http._HttpSession)))(),
    HttpOverridesN: () => (T.HttpOverridesN = dart.constFn(dart.nullable(http.HttpOverrides)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: string_transformer.SystemEncoding.prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: stdio.StdioType.prototype,
        [name$]: "terminal"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: stdio.StdioType.prototype,
        [name$]: "pipe"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: stdio.StdioType.prototype,
        [name$]: "file"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: stdio.StdioType.prototype,
        [name$]: "other"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: socket$.InternetAddressType.prototype,
        [_value$]: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: socket$.InternetAddressType.prototype,
        [_value$]: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: socket$.InternetAddressType.prototype,
        [_value$]: 2
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: socket$.InternetAddressType.prototype,
        [_value$]: -1
      });
    },
    get C9() {
      return C[9] = dart.constList(["RawSocketEvent.read", "RawSocketEvent.write", "RawSocketEvent.readClosed", "RawSocketEvent.closed"], core.String);
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: socket$.RawSocketEvent.prototype,
        [_value$0]: 0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: socket$.RawSocketEvent.prototype,
        [_value$0]: 1
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: socket$.RawSocketEvent.prototype,
        [_value$0]: 2
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: socket$.RawSocketEvent.prototype,
        [_value$0]: 3
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: socket$.SocketDirection.prototype,
        [_value$1]: 0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: socket$.SocketDirection.prototype,
        [_value$1]: 1
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: socket$.SocketDirection.prototype,
        [_value$1]: 2
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: socket$.SocketOption.prototype,
        [_value$2]: 0
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: socket$._RawSocketOptions.prototype,
        [_name$]: "_RawSocketOptions.SOL_SOCKET",
        index: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: socket$._RawSocketOptions.prototype,
        [_name$]: "_RawSocketOptions.IPPROTO_IP",
        index: 1
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: socket$._RawSocketOptions.prototype,
        [_name$]: "_RawSocketOptions.IP_MULTICAST_IF",
        index: 2
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: socket$._RawSocketOptions.prototype,
        [_name$]: "_RawSocketOptions.IPPROTO_IPV6",
        index: 3
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: socket$._RawSocketOptions.prototype,
        [_name$]: "_RawSocketOptions.IPV6_MULTICAST_IF",
        index: 4
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: socket$._RawSocketOptions.prototype,
        [_name$]: "_RawSocketOptions.IPPROTO_TCP",
        index: 5
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: socket$._RawSocketOptions.prototype,
        [_name$]: "_RawSocketOptions.IPPROTO_UDP",
        index: 6
      });
    },
    get C25() {
      return C[25] = dart.constList([C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24], socket$._RawSocketOptions);
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTERM",
        [ProcessSignal__signalNumber]: 15
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: process.ProcessStartMode.prototype,
        [ProcessStartMode__mode]: 0
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGHUP",
        [ProcessSignal__signalNumber]: 1
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGINT",
        [ProcessSignal__signalNumber]: 2
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGQUIT",
        [ProcessSignal__signalNumber]: 3
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGILL",
        [ProcessSignal__signalNumber]: 4
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTRAP",
        [ProcessSignal__signalNumber]: 5
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGABRT",
        [ProcessSignal__signalNumber]: 6
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGBUS",
        [ProcessSignal__signalNumber]: 7
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGFPE",
        [ProcessSignal__signalNumber]: 8
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGKILL",
        [ProcessSignal__signalNumber]: 9
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGUSR1",
        [ProcessSignal__signalNumber]: 10
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGSEGV",
        [ProcessSignal__signalNumber]: 11
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGUSR2",
        [ProcessSignal__signalNumber]: 12
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGPIPE",
        [ProcessSignal__signalNumber]: 13
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGALRM",
        [ProcessSignal__signalNumber]: 14
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGCHLD",
        [ProcessSignal__signalNumber]: 17
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGCONT",
        [ProcessSignal__signalNumber]: 18
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGSTOP",
        [ProcessSignal__signalNumber]: 19
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTSTP",
        [ProcessSignal__signalNumber]: 20
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTTIN",
        [ProcessSignal__signalNumber]: 21
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTTOU",
        [ProcessSignal__signalNumber]: 22
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGURG",
        [ProcessSignal__signalNumber]: 23
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGXCPU",
        [ProcessSignal__signalNumber]: 24
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGXFSZ",
        [ProcessSignal__signalNumber]: 25
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGVTALRM",
        [ProcessSignal__signalNumber]: 26
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGPROF",
        [ProcessSignal__signalNumber]: 27
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGWINCH",
        [ProcessSignal__signalNumber]: 28
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGPOLL",
        [ProcessSignal__signalNumber]: 29
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: process.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGSYS",
        [ProcessSignal__signalNumber]: 31
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: process.ProcessStartMode.prototype,
        [ProcessStartMode__mode]: 1
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: process.ProcessStartMode.prototype,
        [ProcessStartMode__mode]: 2
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: process.ProcessStartMode.prototype,
        [ProcessStartMode__mode]: 3
      });
    },
    get C56() {
      return C[56] = dart.constList([C[27] || CT.C27, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59], process.ProcessStartMode);
    },
    get C60() {
      return C[60] = dart.constList(["normal", "inheritStdio", "detached", "detachedWithStdio"], core.String);
    },
    get C61() {
      return C[61] = dart.fn(async.runZoned, T.Fn__ToR());
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: T.DefaultEqualityOfNever().prototype
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: T.ListEqualityOfint().prototype,
        [ListEquality__elementEquality]: C[63] || CT.C63
      });
    },
    get C64() {
      return C[64] = dart.constList(["---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx"], core.String);
    },
    get C65() {
      return C[65] = dart.constList(["file", "directory", "link", "notFound"], core.String);
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: file_system_entity.FileSystemEntityType.prototype,
        [_type$]: 0
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: file_system_entity.FileSystemEntityType.prototype,
        [_type$]: 1
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: file_system_entity.FileSystemEntityType.prototype,
        [_type$]: 2
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: file_system_entity.FileSystemEntityType.prototype,
        [_type$]: 3
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: file.FileLock.prototype,
        [_type$1]: 1
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: file.FileLock.prototype,
        [_type$1]: 2
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: file.FileLock.prototype,
        [_type$1]: 3
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: file.FileLock.prototype,
        [_type$1]: 4
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: file.FileMode.prototype,
        [_mode$0]: 0
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: file.FileMode.prototype,
        [_mode$0]: 1
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: file.FileMode.prototype,
        [_mode$0]: 2
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: file.FileMode.prototype,
        [_mode$0]: 3
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: file.FileMode.prototype,
        [_mode$0]: 4
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: convert.Utf8Encoder.prototype
      });
    },
    get C80() {
      return C[80] = dart.constList([], http.RedirectInfo);
    },
    get C81() {
      return C[81] = dart.constSet(core.String, ["GET", "HEAD", "POST"]);
    },
    get C82() {
      return C[82] = dart.constSet(core.String, ["arraybuffer", "blob", "document", "json", "text"]);
    },
    get C83() {
      return C[83] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding', __IOSink_encoding));
    },
    get C84() {
      return C[84] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding=', __IOSink_encoding_));
    },
    get C85() {
      return C[85] = dart.constMap(core.String, T.StringN(), []);
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 15000000
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: http.HttpClientResponseCompressionState.prototype,
        [_name$1]: "HttpClientResponseCompressionState.notCompressed",
        index: 0
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: http.HttpClientResponseCompressionState.prototype,
        [_name$1]: "HttpClientResponseCompressionState.decompressed",
        index: 1
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: http.HttpClientResponseCompressionState.prototype,
        [_name$1]: "HttpClientResponseCompressionState.compressed",
        index: 2
      });
    },
    get C90() {
      return C[90] = dart.constList([C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89], http.HttpClientResponseCompressionState);
    },
    get C91() {
      return C[91] = dart.constList(["cache-control", "connection", "date", "pragma", "trailer", "transfer-encoding", "upgrade", "via", "warning"], core.String);
    },
    get C92() {
      return C[92] = dart.constList(["allow", "content-encoding", "content-language", "content-length", "content-location", "content-md5", "content-range", "content-type", "expires", "last-modified"], core.String);
    },
    get C93() {
      return C[93] = dart.constList(["accept-ranges", "age", "etag", "location", "proxy-authenticate", "retry-after", "server", "vary", "www-authenticate"], core.String);
    },
    get C94() {
      return C[94] = dart.constList(["accept", "accept-charset", "accept-encoding", "accept-language", "authorization", "expect", "from", "host", "if-match", "if-modified-since", "if-none-match", "if-range", "if-unmodified-since", "max-forwards", "proxy-authorization", "range", "referer", "te", "user-agent"], core.String);
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 120000000
      });
    },
    get C96() {
      return C[96] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], core.String);
    },
    get C97() {
      return C[97] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], core.String);
    },
    get C98() {
      return C[98] = dart.constList(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], core.String);
    },
    get C99() {
      return C[99] = dart.constList(["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"], core.String);
    },
    get C100() {
      return C[100] = dart.constList([false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], core.bool);
    },
    get C101() {
      return C[101] = dart.constList(["(", ")", "<", ">", "@", ",", ";", ":", "\\", "\"", "/", "[", "]", "?", "=", "{", "}"], core.String);
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: http.CompressionOptions.prototype,
        [enabled$]: true,
        [serverMaxWindowBits$]: null,
        [clientMaxWindowBits$]: null,
        [serverNoContextTakeover$]: false,
        [clientNoContextTakeover$]: false
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: http.CompressionOptions.prototype,
        [enabled$]: false,
        [serverMaxWindowBits$]: null,
        [clientMaxWindowBits$]: null,
        [serverNoContextTakeover$]: false,
        [clientNoContextTakeover$]: false
      });
    }
  }, false);
  var C = Array(104).fill(void 0);
  var I = [
    "package:universal_io/src/io/sync_socket.dart",
    "package:universal_io/src/io/stdio.dart",
    "package:universal_io/src/io/socket.dart",
    "package:universal_io/src/io/security_context.dart",
    "package:universal_io/src/io/secure_socket.dart",
    "package:universal_io/src/io/secure_server_socket.dart",
    "package:universal_io/src/io/process.dart",
    "package:universal_io/src/io/platform.dart",
    "package:universal_io/src/io/overrides.dart",
    "package:universal_io/src/io/link.dart",
    "package:universal_io/src/io/internet_address.dart",
    "package:universal_io/src/io/file_system_entity.dart",
    "package:universal_io/src/io/file.dart",
    "package:universal_io/src/io/directory.dart",
    "package:universal_io/src/browser/io_sink_base.dart",
    "package:universal_io/src/browser/http_client_response.dart",
    "file:///D:/Downloads/NajahNow%20Reqs/Flutter/sdks/flutter/.pub-cache/hosted/pub.dartlang.org/universal_io-2.0.4/lib/src/browser/http_client_exception.dart",
    "package:universal_io/src/browser/http_client_exception.dart",
    "package:universal_io/src/http/http.dart",
    "package:universal_io/src/browser/http_client_request.dart",
    "package:universal_io/src/browser/http_client.dart",
    "file:///D:/Downloads/NajahNow%20Reqs/Flutter/sdks/flutter/.pub-cache/hosted/pub.dartlang.org/universal_io-2.0.4/lib/src/http/http_headers.dart",
    "file:///D:/Downloads/NajahNow%20Reqs/Flutter/sdks/flutter/.pub-cache/hosted/pub.dartlang.org/universal_io-2.0.4/lib/src/http/http_session.dart"
  ];
  sync_socket.RawSynchronousSocket = class RawSynchronousSocket extends core.Object {
    static connectSync(host, port) {
      dart.throw(new core.UnsupportedError.new("RawSynchronousSocket is unsupported"));
    }
  };
  (sync_socket.RawSynchronousSocket.new = function() {
    ;
  }).prototype = sync_socket.RawSynchronousSocket.prototype;
  dart.addTypeTests(sync_socket.RawSynchronousSocket);
  dart.addTypeCaches(sync_socket.RawSynchronousSocket);
  dart.setLibraryUri(sync_socket.RawSynchronousSocket, I[0]);
  var echoMode = dart.privateName(stdio, "Stdin.echoMode");
  var lineMode = dart.privateName(stdio, "Stdin.lineMode");
  stdio.Stdin = class Stdin extends core.Object {
    get echoMode() {
      return this[echoMode];
    }
    set echoMode(value) {
      this[echoMode] = value;
    }
    get lineMode() {
      return this[lineMode];
    }
    set lineMode(value) {
      this[lineMode] = value;
    }
    get hasTerminal() {
      return false;
    }
    get supportsAnsiEscapes() {
      return false;
    }
    readByteSync() {
      dart.throw(new core.UnimplementedError.new());
    }
    readLineSync(opts) {
      let encoding = opts && 'encoding' in opts ? opts.encoding : C[0] || CT.C0;
      let retainNewlines = opts && 'retainNewlines' in opts ? opts.retainNewlines : false;
      let line = T.JSArrayOfint().of([]);
      let crIsNewline = platform.Platform.isWindows && stdio.stdioType(stdio.stdin)[$_equals](stdio.StdioType.terminal) && !this.lineMode;
      if (retainNewlines) {
        let byte = null;
        do {
          byte = this.readByteSync();
          if (byte < 0) {
            break;
          }
          line[$add](byte);
        } while (byte !== 10 && !(byte === 13 && crIsNewline));
        if (line[$isEmpty]) {
          return null;
        }
      } else if (crIsNewline) {
        while (true) {
          let byte = this.readByteSync();
          if (byte < 0) {
            if (line[$isEmpty]) return null;
            break;
          }
          if (byte === 10 || byte === 13) break;
          line[$add](byte);
        }
      } else {
        L0:
          while (true) {
            let byte = this.readByteSync();
            if (byte === 10) break;
            if (byte === 13) {
              do {
                byte = this.readByteSync();
                if (byte === 10) break L0;
                line[$add](13);
              } while (byte === 13);
            }
            if (byte < 0) {
              if (line[$isEmpty]) return null;
              break;
            }
            line[$add](byte);
          }
      }
      return encoding.decode(line);
    }
  };
  (stdio.Stdin.new = function() {
    this[echoMode] = false;
    this[lineMode] = false;
    ;
  }).prototype = stdio.Stdin.prototype;
  stdio.Stdin.prototype[dart.isStream] = true;
  dart.addTypeTests(stdio.Stdin);
  dart.addTypeCaches(stdio.Stdin);
  stdio.Stdin[dart.implements] = () => [async.Stream$(core.List$(core.int))];
  dart.setMethodSignature(stdio.Stdin, () => ({
    __proto__: dart.getMethods(stdio.Stdin.__proto__),
    readByteSync: dart.fnType(core.int, []),
    readLineSync: dart.fnType(dart.nullable(core.String), [], {encoding: convert.Encoding, retainNewlines: core.bool}, {})
  }));
  dart.setGetterSignature(stdio.Stdin, () => ({
    __proto__: dart.getGetters(stdio.Stdin.__proto__),
    hasTerminal: core.bool,
    supportsAnsiEscapes: core.bool
  }));
  dart.setLibraryUri(stdio.Stdin, I[1]);
  dart.setFieldSignature(stdio.Stdin, () => ({
    __proto__: dart.getFields(stdio.Stdin.__proto__),
    echoMode: dart.fieldType(core.bool),
    lineMode: dart.fieldType(core.bool)
  }));
  var message$ = dart.privateName(stdio, "StdinException.message");
  var osError$ = dart.privateName(stdio, "StdinException.osError");
  stdio.StdinException = class StdinException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get osError() {
      return this[osError$];
    }
    set osError(value) {
      super.osError = value;
    }
    toString() {
      return "StdinException: " + this.message + (this.osError == null ? "" : ", " + dart.str(this.osError));
    }
  };
  (stdio.StdinException.new = function(message, osError = null) {
    this[message$] = message;
    this[osError$] = osError;
    ;
  }).prototype = stdio.StdinException.prototype;
  dart.addTypeTests(stdio.StdinException);
  dart.addTypeCaches(stdio.StdinException);
  stdio.StdinException[dart.implements] = () => [exceptions.IOException];
  dart.setLibraryUri(stdio.StdinException, I[1]);
  dart.setFieldSignature(stdio.StdinException, () => ({
    __proto__: dart.getFields(stdio.StdinException.__proto__),
    message: dart.finalFieldType(core.String),
    osError: dart.finalFieldType(dart.nullable(exceptions.OSError))
  }));
  dart.defineExtensionMethods(stdio.StdinException, ['toString']);
  var name$ = dart.privateName(stdio, "StdioType.name");
  stdio.StdioType = class StdioType extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    toString() {
      return "StdioType: " + this.name;
    }
  };
  (stdio.StdioType.__ = function(name) {
    this[name$] = name;
    ;
  }).prototype = stdio.StdioType.prototype;
  dart.addTypeTests(stdio.StdioType);
  dart.addTypeCaches(stdio.StdioType);
  dart.setLibraryUri(stdio.StdioType, I[1]);
  dart.setFieldSignature(stdio.StdioType, () => ({
    __proto__: dart.getFields(stdio.StdioType.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(stdio.StdioType, ['toString']);
  dart.defineLazy(stdio.StdioType, {
    /*stdio.StdioType.terminal*/get terminal() {
      return C[1] || CT.C1;
    },
    /*stdio.StdioType.pipe*/get pipe() {
      return C[2] || CT.C2;
    },
    /*stdio.StdioType.file*/get file() {
      return C[3] || CT.C3;
    },
    /*stdio.StdioType.other*/get other() {
      return C[4] || CT.C4;
    },
    /*stdio.StdioType.TERMINAL*/get TERMINAL() {
      return C[1] || CT.C1;
    },
    /*stdio.StdioType.PIPE*/get PIPE() {
      return C[2] || CT.C2;
    },
    /*stdio.StdioType.FILE*/get FILE() {
      return C[3] || CT.C3;
    },
    /*stdio.StdioType.OTHER*/get OTHER() {
      return C[4] || CT.C4;
    }
  }, false);
  stdio.Stdout = class Stdout extends core.Object {
    get hasTerminal() {
      return false;
    }
    get nonBlocking() {
      return this;
    }
    get supportsAnsiEscapes() {
      return false;
    }
    get terminalColumns() {
      return 80;
    }
    get terminalLines() {
      return 40;
    }
  };
  (stdio.Stdout.new = function() {
    ;
  }).prototype = stdio.Stdout.prototype;
  dart.addTypeTests(stdio.Stdout);
  dart.addTypeCaches(stdio.Stdout);
  stdio.Stdout[dart.implements] = () => [io_sink.IOSink];
  dart.setGetterSignature(stdio.Stdout, () => ({
    __proto__: dart.getGetters(stdio.Stdout.__proto__),
    hasTerminal: core.bool,
    nonBlocking: io_sink.IOSink,
    supportsAnsiEscapes: core.bool,
    terminalColumns: core.int,
    terminalLines: core.int
  }));
  dart.setLibraryUri(stdio.Stdout, I[1]);
  var message$0 = dart.privateName(stdio, "StdoutException.message");
  var osError$0 = dart.privateName(stdio, "StdoutException.osError");
  stdio.StdoutException = class StdoutException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    get osError() {
      return this[osError$0];
    }
    set osError(value) {
      super.osError = value;
    }
    toString() {
      return "StdoutException: " + this.message + (this.osError == null ? "" : ", " + dart.str(this.osError));
    }
  };
  (stdio.StdoutException.new = function(message, osError = null) {
    this[message$0] = message;
    this[osError$0] = osError;
    ;
  }).prototype = stdio.StdoutException.prototype;
  dart.addTypeTests(stdio.StdoutException);
  dart.addTypeCaches(stdio.StdoutException);
  stdio.StdoutException[dart.implements] = () => [exceptions.IOException];
  dart.setLibraryUri(stdio.StdoutException, I[1]);
  dart.setFieldSignature(stdio.StdoutException, () => ({
    __proto__: dart.getFields(stdio.StdoutException.__proto__),
    message: dart.finalFieldType(core.String),
    osError: dart.finalFieldType(dart.nullable(exceptions.OSError))
  }));
  dart.defineExtensionMethods(stdio.StdoutException, ['toString']);
  stdio.stdioType = function stdioType(object) {
    return stdio.StdioType.other;
  };
  dart.copyProperties(stdio, {
    get stderr() {
      dart.throw(new core.UnimplementedError.new());
    },
    get stdin() {
      dart.throw(new core.UnimplementedError.new());
    },
    get stdout() {
      dart.throw(new core.UnimplementedError.new());
    }
  });
  var socket$0 = dart.privateName(socket$, "ConnectionTask.socket");
  var _onCancel = dart.privateName(socket$, "_onCancel");
  const _is_ConnectionTask_default = Symbol('_is_ConnectionTask_default');
  socket$.ConnectionTask$ = dart.generic(S => {
    class ConnectionTask extends core.Object {
      get socket() {
        return this[socket$0];
      }
      set socket(value) {
        super.socket = value;
      }
      cancel() {
        this[_onCancel]();
      }
    }
    (ConnectionTask.__ = function(socket, onCancel) {
      this[socket$0] = socket;
      this[_onCancel] = onCancel;
      ;
    }).prototype = ConnectionTask.prototype;
    dart.addTypeTests(ConnectionTask);
    ConnectionTask.prototype[_is_ConnectionTask_default] = true;
    dart.addTypeCaches(ConnectionTask);
    dart.setMethodSignature(ConnectionTask, () => ({
      __proto__: dart.getMethods(ConnectionTask.__proto__),
      cancel: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(ConnectionTask, I[2]);
    dart.setFieldSignature(ConnectionTask, () => ({
      __proto__: dart.getFields(ConnectionTask.__proto__),
      socket: dart.finalFieldType(async.Future$(S)),
      [_onCancel]: dart.finalFieldType(dart.fnType(dart.void, []))
    }));
    return ConnectionTask;
  });
  socket$.ConnectionTask = socket$.ConnectionTask$();
  dart.addTypeTests(socket$.ConnectionTask, _is_ConnectionTask_default);
  var data$ = dart.privateName(socket$, "Datagram.data");
  var address$ = dart.privateName(socket$, "Datagram.address");
  var port$ = dart.privateName(socket$, "Datagram.port");
  socket$.Datagram = class Datagram extends core.Object {
    get data() {
      return this[data$];
    }
    set data(value) {
      this[data$] = value;
    }
    get address() {
      return this[address$];
    }
    set address(value) {
      this[address$] = value;
    }
    get port() {
      return this[port$];
    }
    set port(value) {
      this[port$] = value;
    }
  };
  (socket$.Datagram.new = function(data, address, port) {
    this[data$] = data;
    this[address$] = address;
    this[port$] = port;
    ;
  }).prototype = socket$.Datagram.prototype;
  dart.addTypeTests(socket$.Datagram);
  dart.addTypeCaches(socket$.Datagram);
  dart.setLibraryUri(socket$.Datagram, I[2]);
  dart.setFieldSignature(socket$.Datagram, () => ({
    __proto__: dart.getFields(socket$.Datagram.__proto__),
    data: dart.fieldType(typed_data.Uint8List),
    address: dart.fieldType(internet_address.InternetAddress),
    port: dart.fieldType(core.int)
  }));
  var _value$ = dart.privateName(socket$, "InternetAddressType._value");
  var _value = dart.privateName(socket$, "_value");
  socket$.InternetAddressType = class InternetAddressType extends core.Object {
    get [_value]() {
      return this[_value$];
    }
    set [_value](value) {
      super[_value] = value;
    }
    get name() {
      switch (this[_value]) {
        case -1:
        {
          return "ANY";
        }
        case 0:
        {
          return "IPv4";
        }
        case 1:
        {
          return "IPv6";
        }
        case 2:
        {
          return "Unix";
        }
        default:
        {
          dart.throw(new core.ArgumentError.new("Invalid InternetAddress"));
        }
      }
    }
    toString() {
      return "InternetAddressType: " + this.name;
    }
  };
  (socket$.InternetAddressType.__ = function(_value) {
    this[_value$] = _value;
    ;
  }).prototype = socket$.InternetAddressType.prototype;
  dart.addTypeTests(socket$.InternetAddressType);
  dart.addTypeCaches(socket$.InternetAddressType);
  dart.setGetterSignature(socket$.InternetAddressType, () => ({
    __proto__: dart.getGetters(socket$.InternetAddressType.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(socket$.InternetAddressType, I[2]);
  dart.setFieldSignature(socket$.InternetAddressType, () => ({
    __proto__: dart.getFields(socket$.InternetAddressType.__proto__),
    [_value]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(socket$.InternetAddressType, ['toString']);
  dart.defineLazy(socket$.InternetAddressType, {
    /*socket$.InternetAddressType.IPv4*/get IPv4() {
      return C[5] || CT.C5;
    },
    /*socket$.InternetAddressType.IPv6*/get IPv6() {
      return C[6] || CT.C6;
    },
    /*socket$.InternetAddressType.unix*/get unix() {
      return C[7] || CT.C7;
    },
    /*socket$.InternetAddressType.any*/get any() {
      return C[8] || CT.C8;
    },
    /*socket$.InternetAddressType.IP_V4*/get IP_V4() {
      return C[5] || CT.C5;
    },
    /*socket$.InternetAddressType.IP_V6*/get IP_V6() {
      return C[6] || CT.C6;
    },
    /*socket$.InternetAddressType.ANY*/get ANY() {
      return C[8] || CT.C8;
    }
  }, false);
  socket$.NetworkInterface = class NetworkInterface extends core.Object {
    static get listSupported() {
      return dart.throw(new core.UnimplementedError.new());
    }
    static list(opts) {
      let includeLoopback = opts && 'includeLoopback' in opts ? opts.includeLoopback : false;
      let includeLinkLocal = opts && 'includeLinkLocal' in opts ? opts.includeLinkLocal : false;
      let type = opts && 'type' in opts ? opts.type : C[8] || CT.C8;
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (socket$.NetworkInterface.new = function() {
    ;
  }).prototype = socket$.NetworkInterface.prototype;
  dart.addTypeTests(socket$.NetworkInterface);
  dart.addTypeCaches(socket$.NetworkInterface);
  dart.setLibraryUri(socket$.NetworkInterface, I[2]);
  var multicastInterface = dart.privateName(socket$, "RawDatagramSocket.multicastInterface");
  var _value$0 = dart.privateName(socket$, "RawSocketEvent._value");
  socket$.RawSocketEvent = class RawSocketEvent extends core.Object {
    get [_value]() {
      return this[_value$0];
    }
    set [_value](value) {
      super[_value] = value;
    }
    toString() {
      return (C[9] || CT.C9)[$_get](this[_value]);
    }
  };
  (socket$.RawSocketEvent.__ = function(_value) {
    this[_value$0] = _value;
    ;
  }).prototype = socket$.RawSocketEvent.prototype;
  dart.addTypeTests(socket$.RawSocketEvent);
  dart.addTypeCaches(socket$.RawSocketEvent);
  dart.setLibraryUri(socket$.RawSocketEvent, I[2]);
  dart.setFieldSignature(socket$.RawSocketEvent, () => ({
    __proto__: dart.getFields(socket$.RawSocketEvent.__proto__),
    [_value]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(socket$.RawSocketEvent, ['toString']);
  dart.defineLazy(socket$.RawSocketEvent, {
    /*socket$.RawSocketEvent.read*/get read() {
      return C[10] || CT.C10;
    },
    /*socket$.RawSocketEvent.write*/get write() {
      return C[11] || CT.C11;
    },
    /*socket$.RawSocketEvent.readClosed*/get readClosed() {
      return C[12] || CT.C12;
    },
    /*socket$.RawSocketEvent.closed*/get closed() {
      return C[13] || CT.C13;
    },
    /*socket$.RawSocketEvent.READ*/get READ() {
      return C[10] || CT.C10;
    },
    /*socket$.RawSocketEvent.WRITE*/get WRITE() {
      return C[11] || CT.C11;
    },
    /*socket$.RawSocketEvent.READ_CLOSED*/get READ_CLOSED() {
      return C[12] || CT.C12;
    },
    /*socket$.RawSocketEvent.CLOSED*/get CLOSED() {
      return C[13] || CT.C13;
    }
  }, false);
  socket$.RawDatagramSocket = class RawDatagramSocket extends async.Stream$(socket$.RawSocketEvent) {
    get multicastInterface() {
      return this[multicastInterface];
    }
    set multicastInterface(value) {
      this[multicastInterface] = value;
    }
    static bind(host, port, opts) {
      let reuseAddress = opts && 'reuseAddress' in opts ? opts.reuseAddress : true;
      let reusePort = opts && 'reusePort' in opts ? opts.reusePort : false;
      let ttl = opts && 'ttl' in opts ? opts.ttl : 1;
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (socket$.RawDatagramSocket.new = function() {
    this[multicastInterface] = null;
    socket$.RawDatagramSocket.__proto__.new.call(this);
    ;
  }).prototype = socket$.RawDatagramSocket.prototype;
  dart.addTypeTests(socket$.RawDatagramSocket);
  dart.addTypeCaches(socket$.RawDatagramSocket);
  dart.setLibraryUri(socket$.RawDatagramSocket, I[2]);
  dart.setFieldSignature(socket$.RawDatagramSocket, () => ({
    __proto__: dart.getFields(socket$.RawDatagramSocket.__proto__),
    multicastInterface: dart.fieldType(dart.nullable(socket$.NetworkInterface))
  }));
  socket$.RawServerSocket = class RawServerSocket extends core.Object {
    static bind(address, port, opts) {
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (socket$.RawServerSocket.new = function() {
    ;
  }).prototype = socket$.RawServerSocket.prototype;
  socket$.RawServerSocket.prototype[dart.isStream] = true;
  dart.addTypeTests(socket$.RawServerSocket);
  dart.addTypeCaches(socket$.RawServerSocket);
  socket$.RawServerSocket[dart.implements] = () => [async.Stream$(socket$.RawSocket)];
  dart.setLibraryUri(socket$.RawServerSocket, I[2]);
  socket$.RawSocket = class RawSocket extends core.Object {
    static connect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      return dart.throw(new core.UnimplementedError.new());
    }
    static startConnect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (socket$.RawSocket.new = function() {
    ;
  }).prototype = socket$.RawSocket.prototype;
  socket$.RawSocket.prototype[dart.isStream] = true;
  dart.addTypeTests(socket$.RawSocket);
  dart.addTypeCaches(socket$.RawSocket);
  socket$.RawSocket[dart.implements] = () => [async.Stream$(socket$.RawSocketEvent)];
  dart.setLibraryUri(socket$.RawSocket, I[2]);
  var level$ = dart.privateName(socket$, "RawSocketOption.level");
  var option$ = dart.privateName(socket$, "RawSocketOption.option");
  var value$ = dart.privateName(socket$, "RawSocketOption.value");
  socket$.RawSocketOption = class RawSocketOption extends core.Object {
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get option() {
      return this[option$];
    }
    set option(value) {
      super.option = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    static get IPv4MulticastInterface() {
      return socket$.RawSocketOption._getOptionValue(socket$._RawSocketOptions.IP_MULTICAST_IF.index);
    }
    static get IPv6MulticastInterface() {
      return socket$.RawSocketOption._getOptionValue(socket$._RawSocketOptions.IPV6_MULTICAST_IF.index);
    }
    static get levelIPv4() {
      return socket$.RawSocketOption._getOptionValue(socket$._RawSocketOptions.IPPROTO_IP.index);
    }
    static get levelIPv6() {
      return socket$.RawSocketOption._getOptionValue(socket$._RawSocketOptions.IPPROTO_IPV6.index);
    }
    static get levelSocket() {
      return socket$.RawSocketOption._getOptionValue(socket$._RawSocketOptions.SOL_SOCKET.index);
    }
    static get levelTcp() {
      return socket$.RawSocketOption._getOptionValue(socket$._RawSocketOptions.IPPROTO_TCP.index);
    }
    static get levelUdp() {
      return socket$.RawSocketOption._getOptionValue(socket$._RawSocketOptions.IPPROTO_UDP.index);
    }
    static fromBool(level, option, value) {
      return socket$.RawSocketOption.fromInt(level, option, value ? 1 : 0);
    }
    static fromInt(level, option, value) {
      let list = _native_typed_data.NativeUint8List.new(4);
      let buffer = typed_data.ByteData.view(list[$buffer], list[$offsetInBytes]);
      buffer[$setInt32](0, value, typed_data.Endian.host);
      return new socket$.RawSocketOption.new(level, option, list);
    }
    static _getOptionValue(key) {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (socket$.RawSocketOption.new = function(level, option, value) {
    this[level$] = level;
    this[option$] = option;
    this[value$] = value;
    ;
  }).prototype = socket$.RawSocketOption.prototype;
  dart.addTypeTests(socket$.RawSocketOption);
  dart.addTypeCaches(socket$.RawSocketOption);
  dart.setLibraryUri(socket$.RawSocketOption, I[2]);
  dart.setFieldSignature(socket$.RawSocketOption, () => ({
    __proto__: dart.getFields(socket$.RawSocketOption.__proto__),
    level: dart.finalFieldType(core.int),
    option: dart.finalFieldType(core.int),
    value: dart.finalFieldType(typed_data.Uint8List)
  }));
  socket$.ServerSocket = class ServerSocket extends core.Object {
    static bind(address, port, opts) {
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      let overrides = overrides$.IOOverrides.current;
      if (overrides == null) {
        dart.throw(new core.UnimplementedError.new());
      }
      return overrides.serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
  };
  (socket$.ServerSocket.new = function() {
    ;
  }).prototype = socket$.ServerSocket.prototype;
  socket$.ServerSocket.prototype[dart.isStream] = true;
  dart.addTypeTests(socket$.ServerSocket);
  dart.addTypeCaches(socket$.ServerSocket);
  socket$.ServerSocket[dart.implements] = () => [async.Stream$(socket$.Socket)];
  dart.setLibraryUri(socket$.ServerSocket, I[2]);
  socket$.Socket = class Socket extends core.Object {
    static connect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      let overrides = overrides$.IOOverrides.current;
      if (overrides == null) {
        return socket$.Socket._connect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
      }
      return overrides.socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    static startConnect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      let overrides = overrides$.IOOverrides.current;
      if (overrides == null) {
        return socket$.Socket._startConnect(host, port, {sourceAddress: sourceAddress});
      }
      return overrides.socketStartConnect(host, port, {sourceAddress: sourceAddress});
    }
    static _connect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      return dart.throw(new core.UnimplementedError.new());
    }
    static _startConnect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (socket$.Socket.new = function() {
    ;
  }).prototype = socket$.Socket.prototype;
  socket$.Socket.prototype[dart.isStream] = true;
  dart.addTypeTests(socket$.Socket);
  dart.addTypeCaches(socket$.Socket);
  socket$.Socket[dart.implements] = () => [async.Stream$(typed_data.Uint8List), io_sink.IOSink];
  dart.setLibraryUri(socket$.Socket, I[2]);
  var _value$1 = dart.privateName(socket$, "SocketDirection._value");
  socket$.SocketDirection = class SocketDirection extends core.Object {
    get [_value]() {
      return this[_value$1];
    }
    set [_value](value) {
      super[_value] = value;
    }
    get hashCode() {
      return core.int.as(this[_value]);
    }
  };
  (socket$.SocketDirection.__ = function(_value) {
    this[_value$1] = _value;
    ;
  }).prototype = socket$.SocketDirection.prototype;
  dart.addTypeTests(socket$.SocketDirection);
  dart.addTypeCaches(socket$.SocketDirection);
  dart.setLibraryUri(socket$.SocketDirection, I[2]);
  dart.setFieldSignature(socket$.SocketDirection, () => ({
    __proto__: dart.getFields(socket$.SocketDirection.__proto__),
    [_value]: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionAccessors(socket$.SocketDirection, ['hashCode']);
  dart.defineLazy(socket$.SocketDirection, {
    /*socket$.SocketDirection.receive*/get receive() {
      return C[14] || CT.C14;
    },
    /*socket$.SocketDirection.send*/get send() {
      return C[15] || CT.C15;
    },
    /*socket$.SocketDirection.both*/get both() {
      return C[16] || CT.C16;
    },
    /*socket$.SocketDirection.RECEIVE*/get RECEIVE() {
      return C[14] || CT.C14;
    },
    /*socket$.SocketDirection.SEND*/get SEND() {
      return C[15] || CT.C15;
    },
    /*socket$.SocketDirection.BOTH*/get BOTH() {
      return C[16] || CT.C16;
    }
  }, false);
  var message$1 = dart.privateName(socket$, "SocketException.message");
  var osError$1 = dart.privateName(socket$, "SocketException.osError");
  var address$0 = dart.privateName(socket$, "SocketException.address");
  var port$0 = dart.privateName(socket$, "SocketException.port");
  socket$.SocketException = class SocketException extends core.Object {
    get message() {
      return this[message$1];
    }
    set message(value) {
      super.message = value;
    }
    get osError() {
      return this[osError$1];
    }
    set osError(value) {
      super.osError = value;
    }
    get address() {
      return this[address$0];
    }
    set address(value) {
      super.address = value;
    }
    get port() {
      return this[port$0];
    }
    set port(value) {
      super.port = value;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write("SocketException");
      if (this.message[$isNotEmpty]) {
        sb.write(": " + this.message);
        if (this.osError != null) {
          sb.write(" (" + dart.str(this.osError) + ")");
        }
      } else if (this.osError != null) {
        sb.write(": " + dart.str(this.osError));
      }
      if (this.address != null) {
        sb.write(", address = " + dart.nullCheck(this.address).host);
      }
      if (this.port != null) {
        sb.write(", port = " + dart.str(this.port));
      }
      return sb.toString();
    }
  };
  (socket$.SocketException.new = function(message, opts) {
    let osError = opts && 'osError' in opts ? opts.osError : null;
    let address = opts && 'address' in opts ? opts.address : null;
    let port = opts && 'port' in opts ? opts.port : null;
    this[message$1] = message;
    this[osError$1] = osError;
    this[address$0] = address;
    this[port$0] = port;
    ;
  }).prototype = socket$.SocketException.prototype;
  (socket$.SocketException.closed = function() {
    this[message$1] = "Socket has been closed";
    this[osError$1] = null;
    this[address$0] = null;
    this[port$0] = null;
    ;
  }).prototype = socket$.SocketException.prototype;
  dart.addTypeTests(socket$.SocketException);
  dart.addTypeCaches(socket$.SocketException);
  socket$.SocketException[dart.implements] = () => [exceptions.IOException];
  dart.setLibraryUri(socket$.SocketException, I[2]);
  dart.setFieldSignature(socket$.SocketException, () => ({
    __proto__: dart.getFields(socket$.SocketException.__proto__),
    message: dart.finalFieldType(core.String),
    osError: dart.finalFieldType(dart.nullable(exceptions.OSError)),
    address: dart.finalFieldType(dart.nullable(internet_address.InternetAddress)),
    port: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(socket$.SocketException, ['toString']);
  var _value$2 = dart.privateName(socket$, "SocketOption._value");
  socket$.SocketOption = class SocketOption extends core.Object {
    get [_value]() {
      return this[_value$2];
    }
    set [_value](value) {
      super[_value] = value;
    }
    get hashCode() {
      return this[_value][$hashCode];
    }
  };
  (socket$.SocketOption.__ = function(_value) {
    this[_value$2] = _value;
    ;
  }).prototype = socket$.SocketOption.prototype;
  dart.addTypeTests(socket$.SocketOption);
  dart.addTypeCaches(socket$.SocketOption);
  dart.setLibraryUri(socket$.SocketOption, I[2]);
  dart.setFieldSignature(socket$.SocketOption, () => ({
    __proto__: dart.getFields(socket$.SocketOption.__proto__),
    [_value]: dart.finalFieldType(core.Object)
  }));
  dart.defineExtensionAccessors(socket$.SocketOption, ['hashCode']);
  dart.defineLazy(socket$.SocketOption, {
    /*socket$.SocketOption.tcpNoDelay*/get tcpNoDelay() {
      return C[17] || CT.C17;
    },
    /*socket$.SocketOption.TCP_NODELAY*/get TCP_NODELAY() {
      return C[17] || CT.C17;
    }
  }, false);
  var _name$ = dart.privateName(socket$, "_name");
  socket$._RawSocketOptions = class _RawSocketOptions extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (socket$._RawSocketOptions.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = socket$._RawSocketOptions.prototype;
  dart.addTypeTests(socket$._RawSocketOptions);
  dart.addTypeCaches(socket$._RawSocketOptions);
  dart.setLibraryUri(socket$._RawSocketOptions, I[2]);
  dart.setFieldSignature(socket$._RawSocketOptions, () => ({
    __proto__: dart.getFields(socket$._RawSocketOptions.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(socket$._RawSocketOptions, ['toString']);
  socket$._RawSocketOptions.SOL_SOCKET = C[18] || CT.C18;
  socket$._RawSocketOptions.IPPROTO_IP = C[19] || CT.C19;
  socket$._RawSocketOptions.IP_MULTICAST_IF = C[20] || CT.C20;
  socket$._RawSocketOptions.IPPROTO_IPV6 = C[21] || CT.C21;
  socket$._RawSocketOptions.IPV6_MULTICAST_IF = C[22] || CT.C22;
  socket$._RawSocketOptions.IPPROTO_TCP = C[23] || CT.C23;
  socket$._RawSocketOptions.IPPROTO_UDP = C[24] || CT.C24;
  socket$._RawSocketOptions.values = C[25] || CT.C25;
  security_context.SecurityContext = class SecurityContext extends core.Object {
    static get alpnSupported() {
      return dart.throw(new core.UnimplementedError.new());
    }
    static get defaultContext() {
      return dart.throw(new core.UnimplementedError.new());
    }
    static new(opts) {
      let withTrustedRoots = opts && 'withTrustedRoots' in opts ? opts.withTrustedRoots : false;
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (security_context.SecurityContext[dart.mixinNew] = function() {
  }).prototype = security_context.SecurityContext.prototype;
  dart.addTypeTests(security_context.SecurityContext);
  dart.addTypeCaches(security_context.SecurityContext);
  dart.setLibraryUri(security_context.SecurityContext, I[3]);
  var type$ = dart.privateName(secure_socket, "TlsException.type");
  var message$2 = dart.privateName(secure_socket, "TlsException.message");
  var osError$2 = dart.privateName(secure_socket, "TlsException.osError");
  secure_socket.TlsException = class TlsException extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get message() {
      return this[message$2];
    }
    set message(value) {
      super.message = value;
    }
    get osError() {
      return this[osError$2];
    }
    set osError(value) {
      super.osError = value;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(this.type);
      if (this.message[$isNotEmpty]) {
        sb.write(": " + this.message);
        if (this.osError != null) {
          sb.write(" (" + dart.str(this.osError) + ")");
        }
      } else if (this.osError != null) {
        sb.write(": " + dart.str(this.osError));
      }
      return sb.toString();
    }
  };
  (secure_socket.TlsException.new = function(message = "", osError = null) {
    secure_socket.TlsException.__.call(this, "TlsException", message, osError);
  }).prototype = secure_socket.TlsException.prototype;
  (secure_socket.TlsException.__ = function(type, message, osError) {
    this[type$] = type;
    this[message$2] = message;
    this[osError$2] = osError;
    ;
  }).prototype = secure_socket.TlsException.prototype;
  dart.addTypeTests(secure_socket.TlsException);
  dart.addTypeCaches(secure_socket.TlsException);
  secure_socket.TlsException[dart.implements] = () => [exceptions.IOException];
  dart.setLibraryUri(secure_socket.TlsException, I[4]);
  dart.setFieldSignature(secure_socket.TlsException, () => ({
    __proto__: dart.getFields(secure_socket.TlsException.__proto__),
    type: dart.finalFieldType(core.String),
    message: dart.finalFieldType(core.String),
    osError: dart.finalFieldType(dart.nullable(exceptions.OSError))
  }));
  dart.defineExtensionMethods(secure_socket.TlsException, ['toString']);
  secure_socket.CertificateException = class CertificateException extends secure_socket.TlsException {};
  (secure_socket.CertificateException.new = function(message = "", osError = null) {
    secure_socket.CertificateException.__proto__.__.call(this, "CertificateException", message, osError);
    ;
  }).prototype = secure_socket.CertificateException.prototype;
  dart.addTypeTests(secure_socket.CertificateException);
  dart.addTypeCaches(secure_socket.CertificateException);
  dart.setLibraryUri(secure_socket.CertificateException, I[4]);
  secure_socket.HandshakeException = class HandshakeException extends secure_socket.TlsException {};
  (secure_socket.HandshakeException.new = function(message = "", osError = null) {
    secure_socket.HandshakeException.__proto__.__.call(this, "HandshakeException", message, osError);
    ;
  }).prototype = secure_socket.HandshakeException.prototype;
  dart.addTypeTests(secure_socket.HandshakeException);
  dart.addTypeCaches(secure_socket.HandshakeException);
  dart.setLibraryUri(secure_socket.HandshakeException, I[4]);
  secure_socket.RawSecureSocket = class RawSecureSocket extends core.Object {
    static connect(host, port, opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      dart.throw(new core.UnimplementedError.new());
    }
    static secure(socket, opts) {
      let subscription = opts && 'subscription' in opts ? opts.subscription : null;
      let host = opts && 'host' in opts ? opts.host : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      dart.throw(new core.UnimplementedError.new());
    }
    static secureServer(socket, context, opts) {
      let subscription = opts && 'subscription' in opts ? opts.subscription : null;
      let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      return dart.throw(new core.UnimplementedError.new());
    }
    static startConnect(host, port, opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (secure_socket.RawSecureSocket.new = function() {
    ;
  }).prototype = secure_socket.RawSecureSocket.prototype;
  dart.addTypeTests(secure_socket.RawSecureSocket);
  dart.addTypeCaches(secure_socket.RawSecureSocket);
  secure_socket.RawSecureSocket[dart.implements] = () => [socket$.RawSocket];
  dart.setLibraryUri(secure_socket.RawSecureSocket, I[4]);
  var _detachRaw = dart.privateName(secure_socket, "_detachRaw");
  secure_socket.SecureSocket = class SecureSocket extends core.Object {
    static __(rawSocket) {
      return dart.throw(new core.UnimplementedError.new());
    }
    static connect(host, port, opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      dart.throw(new core.UnimplementedError.new());
    }
    static secure(socket, opts) {
      let host = opts && 'host' in opts ? opts.host : null;
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      dart.throw(new core.UnimplementedError.new());
    }
    static secureServer(socket, context, opts) {
      let bufferedData = opts && 'bufferedData' in opts ? opts.bufferedData : null;
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      return async.Future.as(dart.dsend(socket, _detachRaw, [])).then(secure_socket.RawSecureSocket, dart.fn(detachedRaw => secure_socket.RawSecureSocket.secureServer(socket$.RawSocket.as(dart.dsend(detachedRaw, '_get', [0])), context, {subscription: T.StreamSubscriptionNOfRawSocketEvent().as(dart.dsend(detachedRaw, '_get', [1])), bufferedData: bufferedData, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols}), T.dynamicToFutureOfRawSecureSocket())).then(secure_socket.SecureSocket, dart.fn(raw => secure_socket.SecureSocket.__(raw), T.RawSecureSocketToSecureSocket()));
    }
    static startConnect(host, port, opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let onBadCertificate = opts && 'onBadCertificate' in opts ? opts.onBadCertificate : null;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (secure_socket.SecureSocket[dart.mixinNew] = function() {
  }).prototype = secure_socket.SecureSocket.prototype;
  dart.addTypeTests(secure_socket.SecureSocket);
  dart.addTypeCaches(secure_socket.SecureSocket);
  secure_socket.SecureSocket[dart.implements] = () => [socket$.Socket];
  dart.setLibraryUri(secure_socket.SecureSocket, I[4]);
  secure_socket.X509Certificate = class X509Certificate extends core.Object {
    static __() {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (secure_socket.X509Certificate[dart.mixinNew] = function() {
  }).prototype = secure_socket.X509Certificate.prototype;
  dart.addTypeTests(secure_socket.X509Certificate);
  dart.addTypeCaches(secure_socket.X509Certificate);
  dart.setLibraryUri(secure_socket.X509Certificate, I[4]);
  secure_server_socket.RawSecureServerSocket = class RawSecureServerSocket extends async.Stream$(secure_socket.RawSecureSocket) {
    static bind(address, port, context, opts) {
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (secure_server_socket.RawSecureServerSocket.new = function() {
    secure_server_socket.RawSecureServerSocket.__proto__.new.call(this);
    ;
  }).prototype = secure_server_socket.RawSecureServerSocket.prototype;
  dart.addTypeTests(secure_server_socket.RawSecureServerSocket);
  dart.addTypeCaches(secure_server_socket.RawSecureServerSocket);
  dart.setLibraryUri(secure_server_socket.RawSecureServerSocket, I[5]);
  var _socket$ = dart.privateName(secure_server_socket, "_socket");
  secure_server_socket.SecureServerSocket = class SecureServerSocket extends async.Stream$(secure_socket.SecureSocket) {
    get address() {
      return this[_socket$].address;
    }
    get port() {
      return this[_socket$].port;
    }
    close() {
      return this[_socket$].close().then(secure_server_socket.SecureServerSocket, dart.fn(_ => this, T.RawSecureServerSocketToSecureServerSocket()));
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      dart.throw(new core.UnimplementedError.new());
    }
    static bind(address, port, context, opts) {
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      let requireClientCertificate = opts && 'requireClientCertificate' in opts ? opts.requireClientCertificate : false;
      let supportedProtocols = opts && 'supportedProtocols' in opts ? opts.supportedProtocols : null;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      return secure_server_socket.RawSecureServerSocket.bind(address, port, context, {backlog: backlog, v6Only: v6Only, requestClientCertificate: requestClientCertificate, requireClientCertificate: requireClientCertificate, supportedProtocols: supportedProtocols, shared: shared}).then(secure_server_socket.SecureServerSocket, dart.fn(serverSocket => new secure_server_socket.SecureServerSocket.__(serverSocket), T.RawSecureServerSocketToSecureServerSocket()));
    }
  };
  (secure_server_socket.SecureServerSocket.__ = function(_socket) {
    this[_socket$] = _socket;
    secure_server_socket.SecureServerSocket.__proto__.new.call(this);
    ;
  }).prototype = secure_server_socket.SecureServerSocket.prototype;
  dart.addTypeTests(secure_server_socket.SecureServerSocket);
  dart.addTypeCaches(secure_server_socket.SecureServerSocket);
  dart.setMethodSignature(secure_server_socket.SecureServerSocket, () => ({
    __proto__: dart.getMethods(secure_server_socket.SecureServerSocket.__proto__),
    close: dart.fnType(async.Future$(secure_server_socket.SecureServerSocket), []),
    listen: dart.fnType(async.StreamSubscription$(secure_socket.SecureSocket), [dart.nullable(dart.fnType(dart.void, [secure_socket.SecureSocket]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
  }));
  dart.setGetterSignature(secure_server_socket.SecureServerSocket, () => ({
    __proto__: dart.getGetters(secure_server_socket.SecureServerSocket.__proto__),
    address: internet_address.InternetAddress,
    port: core.int
  }));
  dart.setLibraryUri(secure_server_socket.SecureServerSocket, I[5]);
  dart.setFieldSignature(secure_server_socket.SecureServerSocket, () => ({
    __proto__: dart.getFields(secure_server_socket.SecureServerSocket.__proto__),
    [_socket$]: dart.finalFieldType(secure_server_socket.RawSecureServerSocket)
  }));
  var ProcessSignal__name = dart.privateName(process, "ProcessSignal._name");
  var ProcessSignal__signalNumber = dart.privateName(process, "ProcessSignal._signalNumber");
  var ProcessStartMode__mode = dart.privateName(process, "ProcessStartMode._mode");
  process.Process = class Process extends core.Object {
    static killPid(pid, signal = C[26] || CT.C26) {
      return dart.throw(new core.UnimplementedError.new());
    }
    static run(executable, $arguments, opts) {
      let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
      let environment = opts && 'environment' in opts ? opts.environment : null;
      let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
      let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
      let stdoutEncoding = opts && 'stdoutEncoding' in opts ? opts.stdoutEncoding : C[0] || CT.C0;
      let stderrEncoding = opts && 'stderrEncoding' in opts ? opts.stderrEncoding : C[0] || CT.C0;
      return dart.throw(new core.UnimplementedError.new());
    }
    static runSync(executable, $arguments, opts) {
      let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
      let environment = opts && 'environment' in opts ? opts.environment : null;
      let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
      let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
      let stdoutEncoding = opts && 'stdoutEncoding' in opts ? opts.stdoutEncoding : C[0] || CT.C0;
      let stderrEncoding = opts && 'stderrEncoding' in opts ? opts.stderrEncoding : C[0] || CT.C0;
      return dart.throw(new core.UnimplementedError.new());
    }
    static start(executable, $arguments, opts) {
      let workingDirectory = opts && 'workingDirectory' in opts ? opts.workingDirectory : null;
      let environment = opts && 'environment' in opts ? opts.environment : null;
      let includeParentEnvironment = opts && 'includeParentEnvironment' in opts ? opts.includeParentEnvironment : true;
      let runInShell = opts && 'runInShell' in opts ? opts.runInShell : false;
      let mode = opts && 'mode' in opts ? opts.mode : C[27] || CT.C27;
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (process.Process.new = function() {
    ;
  }).prototype = process.Process.prototype;
  dart.addTypeTests(process.Process);
  dart.addTypeCaches(process.Process);
  dart.setLibraryUri(process.Process, I[6]);
  var executable$ = dart.privateName(process, "ProcessException.executable");
  var $arguments$ = dart.privateName(process, "ProcessException.arguments");
  var message$3 = dart.privateName(process, "ProcessException.message");
  var errorCode$ = dart.privateName(process, "ProcessException.errorCode");
  process.ProcessException = class ProcessException extends core.Object {
    get executable() {
      return this[executable$];
    }
    set executable(value) {
      super.executable = value;
    }
    get arguments() {
      return this[$arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    get message() {
      return this[message$3];
    }
    set message(value) {
      super.message = value;
    }
    get errorCode() {
      return this[errorCode$];
    }
    set errorCode(value) {
      super.errorCode = value;
    }
    toString() {
      let args = this.arguments[$join](" ");
      return "ProcessException: " + this.message + "\n  Command: " + this.executable + " " + args;
    }
  };
  (process.ProcessException.new = function(executable, $arguments, message = "", errorCode = 0) {
    this[executable$] = executable;
    this[$arguments$] = $arguments;
    this[message$3] = message;
    this[errorCode$] = errorCode;
    ;
  }).prototype = process.ProcessException.prototype;
  dart.addTypeTests(process.ProcessException);
  dart.addTypeCaches(process.ProcessException);
  process.ProcessException[dart.implements] = () => [exceptions.IOException];
  dart.setLibraryUri(process.ProcessException, I[6]);
  dart.setFieldSignature(process.ProcessException, () => ({
    __proto__: dart.getFields(process.ProcessException.__proto__),
    executable: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(core.List$(core.String)),
    message: dart.finalFieldType(core.String),
    errorCode: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(process.ProcessException, ['toString']);
  process.ProcessInfo = class ProcessInfo extends core.Object {
    static get currentRss() {
      return dart.throw(new core.UnimplementedError.new());
    }
    static get maxRss() {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (process.ProcessInfo.new = function() {
    ;
  }).prototype = process.ProcessInfo.prototype;
  dart.addTypeTests(process.ProcessInfo);
  dart.addTypeCaches(process.ProcessInfo);
  dart.setLibraryUri(process.ProcessInfo, I[6]);
  var exitCode$ = dart.privateName(process, "ProcessResult.exitCode");
  var stdout$ = dart.privateName(process, "ProcessResult.stdout");
  var stderr$ = dart.privateName(process, "ProcessResult.stderr");
  var pid$ = dart.privateName(process, "ProcessResult.pid");
  process.ProcessResult = class ProcessResult extends core.Object {
    get exitCode() {
      return this[exitCode$];
    }
    set exitCode(value) {
      super.exitCode = value;
    }
    get stdout() {
      return this[stdout$];
    }
    set stdout(value) {
      super.stdout = value;
    }
    get stderr() {
      return this[stderr$];
    }
    set stderr(value) {
      super.stderr = value;
    }
    get pid() {
      return this[pid$];
    }
    set pid(value) {
      super.pid = value;
    }
  };
  (process.ProcessResult.new = function(pid, exitCode, stdout, stderr) {
    this[pid$] = pid;
    this[exitCode$] = exitCode;
    this[stdout$] = stdout;
    this[stderr$] = stderr;
    ;
  }).prototype = process.ProcessResult.prototype;
  dart.addTypeTests(process.ProcessResult);
  dart.addTypeCaches(process.ProcessResult);
  dart.setLibraryUri(process.ProcessResult, I[6]);
  dart.setFieldSignature(process.ProcessResult, () => ({
    __proto__: dart.getFields(process.ProcessResult.__proto__),
    exitCode: dart.finalFieldType(core.int),
    stdout: dart.finalFieldType(dart.dynamic),
    stderr: dart.finalFieldType(dart.dynamic),
    pid: dart.finalFieldType(core.int)
  }));
  var _signalNumber = dart.privateName(process, "_signalNumber");
  var _name = dart.privateName(process, "_name");
  const _signalNumber$ = ProcessSignal__signalNumber;
  const _name$0 = ProcessSignal__name;
  process.ProcessSignal = class ProcessSignal extends core.Object {
    get [_signalNumber]() {
      return this[_signalNumber$];
    }
    set [_signalNumber](value) {
      super[_signalNumber] = value;
    }
    get [_name]() {
      return this[_name$0];
    }
    set [_name](value) {
      super[_name] = value;
    }
    get hashCode() {
      return this[_signalNumber];
    }
    toString() {
      return this[_name];
    }
    watch() {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (process.ProcessSignal.__ = function(_signalNumber, _name) {
    this[_signalNumber$] = _signalNumber;
    this[_name$0] = _name;
    ;
  }).prototype = process.ProcessSignal.prototype;
  dart.addTypeTests(process.ProcessSignal);
  dart.addTypeCaches(process.ProcessSignal);
  dart.setMethodSignature(process.ProcessSignal, () => ({
    __proto__: dart.getMethods(process.ProcessSignal.__proto__),
    watch: dart.fnType(async.Stream$(process.ProcessSignal), [])
  }));
  dart.setLibraryUri(process.ProcessSignal, I[6]);
  dart.setFieldSignature(process.ProcessSignal, () => ({
    __proto__: dart.getFields(process.ProcessSignal.__proto__),
    [_signalNumber]: dart.finalFieldType(core.int),
    [_name]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(process.ProcessSignal, ['toString']);
  dart.defineExtensionAccessors(process.ProcessSignal, ['hashCode']);
  dart.defineLazy(process.ProcessSignal, {
    /*process.ProcessSignal.sighup*/get sighup() {
      return C[28] || CT.C28;
    },
    /*process.ProcessSignal.sigint*/get sigint() {
      return C[29] || CT.C29;
    },
    /*process.ProcessSignal.sigquit*/get sigquit() {
      return C[30] || CT.C30;
    },
    /*process.ProcessSignal.sigill*/get sigill() {
      return C[31] || CT.C31;
    },
    /*process.ProcessSignal.sigtrap*/get sigtrap() {
      return C[32] || CT.C32;
    },
    /*process.ProcessSignal.sigabrt*/get sigabrt() {
      return C[33] || CT.C33;
    },
    /*process.ProcessSignal.sigbus*/get sigbus() {
      return C[34] || CT.C34;
    },
    /*process.ProcessSignal.sigfpe*/get sigfpe() {
      return C[35] || CT.C35;
    },
    /*process.ProcessSignal.sigkill*/get sigkill() {
      return C[36] || CT.C36;
    },
    /*process.ProcessSignal.sigusr1*/get sigusr1() {
      return C[37] || CT.C37;
    },
    /*process.ProcessSignal.sigsegv*/get sigsegv() {
      return C[38] || CT.C38;
    },
    /*process.ProcessSignal.sigusr2*/get sigusr2() {
      return C[39] || CT.C39;
    },
    /*process.ProcessSignal.sigpipe*/get sigpipe() {
      return C[40] || CT.C40;
    },
    /*process.ProcessSignal.sigalrm*/get sigalrm() {
      return C[41] || CT.C41;
    },
    /*process.ProcessSignal.sigterm*/get sigterm() {
      return C[26] || CT.C26;
    },
    /*process.ProcessSignal.sigchld*/get sigchld() {
      return C[42] || CT.C42;
    },
    /*process.ProcessSignal.sigcont*/get sigcont() {
      return C[43] || CT.C43;
    },
    /*process.ProcessSignal.sigstop*/get sigstop() {
      return C[44] || CT.C44;
    },
    /*process.ProcessSignal.sigtstp*/get sigtstp() {
      return C[45] || CT.C45;
    },
    /*process.ProcessSignal.sigttin*/get sigttin() {
      return C[46] || CT.C46;
    },
    /*process.ProcessSignal.sigttou*/get sigttou() {
      return C[47] || CT.C47;
    },
    /*process.ProcessSignal.sigurg*/get sigurg() {
      return C[48] || CT.C48;
    },
    /*process.ProcessSignal.sigxcpu*/get sigxcpu() {
      return C[49] || CT.C49;
    },
    /*process.ProcessSignal.sigxfsz*/get sigxfsz() {
      return C[50] || CT.C50;
    },
    /*process.ProcessSignal.sigvtalrm*/get sigvtalrm() {
      return C[51] || CT.C51;
    },
    /*process.ProcessSignal.sigprof*/get sigprof() {
      return C[52] || CT.C52;
    },
    /*process.ProcessSignal.sigwinch*/get sigwinch() {
      return C[53] || CT.C53;
    },
    /*process.ProcessSignal.sigpoll*/get sigpoll() {
      return C[54] || CT.C54;
    },
    /*process.ProcessSignal.sigsys*/get sigsys() {
      return C[55] || CT.C55;
    },
    /*process.ProcessSignal.SIGHUP*/get SIGHUP() {
      return C[28] || CT.C28;
    },
    /*process.ProcessSignal.SIGINT*/get SIGINT() {
      return C[29] || CT.C29;
    },
    /*process.ProcessSignal.SIGQUIT*/get SIGQUIT() {
      return C[30] || CT.C30;
    },
    /*process.ProcessSignal.SIGILL*/get SIGILL() {
      return C[31] || CT.C31;
    },
    /*process.ProcessSignal.SIGTRAP*/get SIGTRAP() {
      return C[32] || CT.C32;
    },
    /*process.ProcessSignal.SIGABRT*/get SIGABRT() {
      return C[33] || CT.C33;
    },
    /*process.ProcessSignal.SIGBUS*/get SIGBUS() {
      return C[34] || CT.C34;
    },
    /*process.ProcessSignal.SIGFPE*/get SIGFPE() {
      return C[35] || CT.C35;
    },
    /*process.ProcessSignal.SIGKILL*/get SIGKILL() {
      return C[36] || CT.C36;
    },
    /*process.ProcessSignal.SIGUSR1*/get SIGUSR1() {
      return C[37] || CT.C37;
    },
    /*process.ProcessSignal.SIGSEGV*/get SIGSEGV() {
      return C[38] || CT.C38;
    },
    /*process.ProcessSignal.SIGUSR2*/get SIGUSR2() {
      return C[39] || CT.C39;
    },
    /*process.ProcessSignal.SIGPIPE*/get SIGPIPE() {
      return C[40] || CT.C40;
    },
    /*process.ProcessSignal.SIGALRM*/get SIGALRM() {
      return C[41] || CT.C41;
    },
    /*process.ProcessSignal.SIGTERM*/get SIGTERM() {
      return C[26] || CT.C26;
    },
    /*process.ProcessSignal.SIGCHLD*/get SIGCHLD() {
      return C[42] || CT.C42;
    },
    /*process.ProcessSignal.SIGCONT*/get SIGCONT() {
      return C[43] || CT.C43;
    },
    /*process.ProcessSignal.SIGSTOP*/get SIGSTOP() {
      return C[44] || CT.C44;
    },
    /*process.ProcessSignal.SIGTSTP*/get SIGTSTP() {
      return C[45] || CT.C45;
    },
    /*process.ProcessSignal.SIGTTIN*/get SIGTTIN() {
      return C[46] || CT.C46;
    },
    /*process.ProcessSignal.SIGTTOU*/get SIGTTOU() {
      return C[47] || CT.C47;
    },
    /*process.ProcessSignal.SIGURG*/get SIGURG() {
      return C[48] || CT.C48;
    },
    /*process.ProcessSignal.SIGXCPU*/get SIGXCPU() {
      return C[49] || CT.C49;
    },
    /*process.ProcessSignal.SIGXFSZ*/get SIGXFSZ() {
      return C[50] || CT.C50;
    },
    /*process.ProcessSignal.SIGVTALRM*/get SIGVTALRM() {
      return C[51] || CT.C51;
    },
    /*process.ProcessSignal.SIGPROF*/get SIGPROF() {
      return C[52] || CT.C52;
    },
    /*process.ProcessSignal.SIGWINCH*/get SIGWINCH() {
      return C[53] || CT.C53;
    },
    /*process.ProcessSignal.SIGPOLL*/get SIGPOLL() {
      return C[54] || CT.C54;
    },
    /*process.ProcessSignal.SIGSYS*/get SIGSYS() {
      return C[55] || CT.C55;
    }
  }, false);
  var _mode = dart.privateName(process, "_mode");
  const _mode$ = ProcessStartMode__mode;
  process.ProcessStartMode = class ProcessStartMode extends core.Object {
    get [_mode]() {
      return this[_mode$];
    }
    set [_mode](value) {
      super[_mode] = value;
    }
    static get values() {
      return C[56] || CT.C56;
    }
    toString() {
      return (C[60] || CT.C60)[$_get](this[_mode]);
    }
  };
  (process.ProcessStartMode._internal = function(_mode) {
    this[_mode$] = _mode;
    ;
  }).prototype = process.ProcessStartMode.prototype;
  dart.addTypeTests(process.ProcessStartMode);
  dart.addTypeCaches(process.ProcessStartMode);
  dart.setLibraryUri(process.ProcessStartMode, I[6]);
  dart.setFieldSignature(process.ProcessStartMode, () => ({
    __proto__: dart.getFields(process.ProcessStartMode.__proto__),
    [_mode]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(process.ProcessStartMode, ['toString']);
  dart.defineLazy(process.ProcessStartMode, {
    /*process.ProcessStartMode.normal*/get normal() {
      return C[27] || CT.C27;
    },
    /*process.ProcessStartMode.NORMAL*/get NORMAL() {
      return C[27] || CT.C27;
    },
    /*process.ProcessStartMode.inheritStdio*/get inheritStdio() {
      return C[57] || CT.C57;
    },
    /*process.ProcessStartMode.INHERIT_STDIO*/get INHERIT_STDIO() {
      return C[57] || CT.C57;
    },
    /*process.ProcessStartMode.detached*/get detached() {
      return C[58] || CT.C58;
    },
    /*process.ProcessStartMode.DETACHED*/get DETACHED() {
      return C[58] || CT.C58;
    },
    /*process.ProcessStartMode.detachedWithStdio*/get detachedWithStdio() {
      return C[59] || CT.C59;
    },
    /*process.ProcessStartMode.DETACHED_WITH_STDIO*/get DETACHED_WITH_STDIO() {
      return C[59] || CT.C59;
    }
  }, false);
  var message$4 = dart.privateName(process, "SignalException.message");
  var osError$3 = dart.privateName(process, "SignalException.osError");
  process.SignalException = class SignalException extends core.Object {
    get message() {
      return this[message$4];
    }
    set message(value) {
      super.message = value;
    }
    get osError() {
      return this[osError$3];
    }
    set osError(value) {
      super.osError = value;
    }
    toString() {
      let msg = "";
      if (this.osError != null) {
        msg = ", osError: " + dart.str(this.osError);
      }
      return "SignalException: " + this.message + msg;
    }
  };
  (process.SignalException.new = function(message, osError = null) {
    this[message$4] = message;
    this[osError$3] = osError;
    ;
  }).prototype = process.SignalException.prototype;
  dart.addTypeTests(process.SignalException);
  dart.addTypeCaches(process.SignalException);
  process.SignalException[dart.implements] = () => [exceptions.IOException];
  dart.setLibraryUri(process.SignalException, I[6]);
  dart.setFieldSignature(process.SignalException, () => ({
    __proto__: dart.getFields(process.SignalException.__proto__),
    message: dart.finalFieldType(core.String),
    osError: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(process.SignalException, ['toString']);
  process.exit = function exit(code) {
    dart.throw(new core.UnimplementedError.new());
  };
  process.sleep = function sleep(duration) {
  };
  dart.copyProperties(process, {
    get exitCode() {
      return 0;
    },
    set exitCode(code) {
      core.ArgumentError.checkNotNull(core.int, code, "code");
    },
    get pid() {
      return 0;
    }
  });
  platform.Platform = class Platform extends core.Object {
    static get environment() {
      return new (T.IdentityMapOfString$String()).new();
    }
    static get executable() {
      return "";
    }
    static get executableArguments() {
      return T.JSArrayOfString().of([]);
    }
    static get localeName() {
      return internals_for_browser_or_node_impl_browser.locale;
    }
    static get localHostname() {
      return "localhost";
    }
    static get numberOfProcessors() {
      return 1;
    }
    static get operatingSystem() {
      return internals_for_browser_or_node_impl_browser.operatingSystem;
    }
    static get operatingSystemVersion() {
      return internals_for_browser_or_node_impl_browser.operatingSystemVersion;
    }
    static get packageConfig() {
      return null;
    }
    static get packageRoot() {
      return null;
    }
    static get pathSeparator() {
      return "/";
    }
    static get resolvedExecutable() {
      return "";
    }
    static get script() {
      return core._Uri.new();
    }
    static get version() {
      return "";
    }
  };
  (platform.Platform.new = function() {
    ;
  }).prototype = platform.Platform.prototype;
  dart.addTypeTests(platform.Platform);
  dart.addTypeCaches(platform.Platform);
  dart.setLibraryUri(platform.Platform, I[7]);
  dart.defineLazy(platform.Platform, {
    /*platform.Platform.isLinux*/get isLinux() {
      return platform.Platform.operatingSystem === "linux";
    },
    /*platform.Platform.isMacOS*/get isMacOS() {
      return platform.Platform.operatingSystem === "macos";
    },
    /*platform.Platform.isWindows*/get isWindows() {
      return platform.Platform.operatingSystem === "windows";
    },
    /*platform.Platform.isAndroid*/get isAndroid() {
      return platform.Platform.operatingSystem === "android";
    },
    /*platform.Platform.isIOS*/get isIOS() {
      return platform.Platform.operatingSystem === "ios";
    },
    /*platform.Platform.isFuchsia*/get isFuchsia() {
      return platform.Platform.operatingSystem === "fuchsia";
    }
  }, false);
  overrides$.IOOverrides = class IOOverrides extends core.Object {
    static get current() {
      let t0;
      return T.IOOverridesN().as((t0 = async.Zone.current._get(overrides$._ioOverridesToken), t0 == null ? overrides$.IOOverrides._global : t0));
    }
    static set global(overrides) {
      overrides$.IOOverrides._global = overrides;
    }
    createDirectory(path) {
      return dart.throw(new core.UnimplementedError.new());
    }
    createFile(path) {
      return dart.throw(new core.UnimplementedError.new());
    }
    createLink(path) {
      return dart.throw(new core.UnimplementedError.new());
    }
    fseGetType(path, followLinks) {
      dart.throw(new core.UnimplementedError.new());
    }
    fseGetTypeSync(path, followLinks) {
      dart.throw(new core.UnimplementedError.new());
    }
    fseIdentical(path1, path2) {
      dart.throw(new core.UnimplementedError.new());
    }
    fseIdenticalSync(path1, path2) {
      dart.throw(new core.UnimplementedError.new());
    }
    fsWatch(path, events, recursive) {
      dart.throw(new core.UnimplementedError.new());
    }
    fsWatchIsSupported() {
      return dart.throw(new core.UnimplementedError.new());
    }
    getCurrentDirectory() {
      return dart.throw(new core.UnimplementedError.new());
    }
    getSystemTempDirectory() {
      return dart.throw(new core.UnimplementedError.new());
    }
    serverSocketBind(address, port, opts) {
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      dart.throw(new core.UnimplementedError.new());
    }
    setCurrentDirectory(path) {
      dart.throw(new core.UnimplementedError.new());
    }
    socketConnect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      dart.throw(new core.UnimplementedError.new());
    }
    socketStartConnect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      dart.throw(new core.UnimplementedError.new());
    }
    stat(path) {
      dart.throw(new core.UnimplementedError.new());
    }
    statSync(path) {
      dart.throw(new core.UnimplementedError.new());
    }
    static runWithIOOverrides(R, body, overrides) {
      return overrides$._asyncRunZoned(R, body, {zoneValues: new (T.LinkedMapOfObjectN$ObjectN()).from([overrides$._ioOverridesToken, overrides])});
    }
    static runZoned(R, body, opts) {
      let createDirectory = opts && 'createDirectory' in opts ? opts.createDirectory : null;
      let getCurrentDirectory = opts && 'getCurrentDirectory' in opts ? opts.getCurrentDirectory : null;
      let setCurrentDirectory = opts && 'setCurrentDirectory' in opts ? opts.setCurrentDirectory : null;
      let getSystemTempDirectory = opts && 'getSystemTempDirectory' in opts ? opts.getSystemTempDirectory : null;
      let createFile = opts && 'createFile' in opts ? opts.createFile : null;
      let stat = opts && 'stat' in opts ? opts.stat : null;
      let statSync = opts && 'statSync' in opts ? opts.statSync : null;
      let fseIdentical = opts && 'fseIdentical' in opts ? opts.fseIdentical : null;
      let fseIdenticalSync = opts && 'fseIdenticalSync' in opts ? opts.fseIdenticalSync : null;
      let fseGetType = opts && 'fseGetType' in opts ? opts.fseGetType : null;
      let fseGetTypeSync = opts && 'fseGetTypeSync' in opts ? opts.fseGetTypeSync : null;
      let fsWatch = opts && 'fsWatch' in opts ? opts.fsWatch : null;
      let fsWatchIsSupported = opts && 'fsWatchIsSupported' in opts ? opts.fsWatchIsSupported : null;
      let createLink = opts && 'createLink' in opts ? opts.createLink : null;
      let socketConnect = opts && 'socketConnect' in opts ? opts.socketConnect : null;
      let socketStartConnect = opts && 'socketStartConnect' in opts ? opts.socketStartConnect : null;
      let serverSocketBind = opts && 'serverSocketBind' in opts ? opts.serverSocketBind : null;
      let overrides = new overrides$._IOOverridesScope.new(createDirectory, getCurrentDirectory, setCurrentDirectory, getSystemTempDirectory, createFile, stat, statSync, fseIdentical, fseIdenticalSync, fseGetType, fseGetTypeSync, fsWatch, fsWatchIsSupported, createLink, socketConnect, socketStartConnect, serverSocketBind);
      return overrides$._asyncRunZoned(R, body, {zoneValues: new (T.LinkedMapOfObjectN$ObjectN()).from([overrides$._ioOverridesToken, overrides])});
    }
  };
  (overrides$.IOOverrides.new = function() {
    ;
  }).prototype = overrides$.IOOverrides.prototype;
  dart.addTypeTests(overrides$.IOOverrides);
  dart.addTypeCaches(overrides$.IOOverrides);
  dart.setMethodSignature(overrides$.IOOverrides, () => ({
    __proto__: dart.getMethods(overrides$.IOOverrides.__proto__),
    createDirectory: dart.fnType(directory.Directory, [core.String]),
    createFile: dart.fnType(file.File, [core.String]),
    createLink: dart.fnType(link.Link, [core.String]),
    fseGetType: dart.fnType(async.Future$(file_system_entity.FileSystemEntityType), [core.String, core.bool]),
    fseGetTypeSync: dart.fnType(file_system_entity.FileSystemEntityType, [core.String, core.bool]),
    fseIdentical: dart.fnType(async.Future$(core.bool), [core.String, core.String]),
    fseIdenticalSync: dart.fnType(core.bool, [core.String, core.String]),
    fsWatch: dart.fnType(async.Stream$(file_system_entity.FileSystemEvent), [core.String, core.int, core.bool]),
    fsWatchIsSupported: dart.fnType(core.bool, []),
    getCurrentDirectory: dart.fnType(directory.Directory, []),
    getSystemTempDirectory: dart.fnType(directory.Directory, []),
    serverSocketBind: dart.fnType(async.Future$(socket$.ServerSocket), [dart.dynamic, core.int], {backlog: core.int, shared: core.bool, v6Only: core.bool}, {}),
    setCurrentDirectory: dart.fnType(dart.void, [core.String]),
    socketConnect: dart.fnType(async.Future$(socket$.Socket), [dart.dynamic, core.int], {sourceAddress: dart.dynamic, timeout: dart.nullable(core.Duration)}, {}),
    socketStartConnect: dart.fnType(async.Future$(socket$.ConnectionTask$(socket$.Socket)), [dart.dynamic, core.int], {sourceAddress: dart.dynamic}, {}),
    stat: dart.fnType(async.Future$(file_system_entity.FileStat), [core.String]),
    statSync: dart.fnType(file_system_entity.FileStat, [core.String])
  }));
  dart.setLibraryUri(overrides$.IOOverrides, I[8]);
  dart.defineLazy(overrides$.IOOverrides, {
    /*overrides$.IOOverrides._global*/get _global() {
      return null;
    },
    set _global(_) {}
  }, false);
  var _previous = dart.privateName(overrides$, "_previous");
  var _createDirectory$ = dart.privateName(overrides$, "_createDirectory");
  var _getCurrentDirectory$ = dart.privateName(overrides$, "_getCurrentDirectory");
  var _setCurrentDirectory$ = dart.privateName(overrides$, "_setCurrentDirectory");
  var _getSystemTempDirectory$ = dart.privateName(overrides$, "_getSystemTempDirectory");
  var _createFile$ = dart.privateName(overrides$, "_createFile");
  var _stat$ = dart.privateName(overrides$, "_stat");
  var _statSync$ = dart.privateName(overrides$, "_statSync");
  var _fseIdentical$ = dart.privateName(overrides$, "_fseIdentical");
  var _fseIdenticalSync$ = dart.privateName(overrides$, "_fseIdenticalSync");
  var _fseGetType$ = dart.privateName(overrides$, "_fseGetType");
  var _fseGetTypeSync$ = dart.privateName(overrides$, "_fseGetTypeSync");
  var _fsWatch$ = dart.privateName(overrides$, "_fsWatch");
  var _fsWatchIsSupported$ = dart.privateName(overrides$, "_fsWatchIsSupported");
  var _createLink$ = dart.privateName(overrides$, "_createLink");
  var _socketConnect$ = dart.privateName(overrides$, "_socketConnect");
  var _socketStartConnect$ = dart.privateName(overrides$, "_socketStartConnect");
  var _serverSocketBind$ = dart.privateName(overrides$, "_serverSocketBind");
  overrides$._IOOverridesScope = class _IOOverridesScope extends overrides$.IOOverrides {
    createDirectory(path) {
      if (this[_createDirectory$] != null) return dart.nullCheck(this[_createDirectory$])(path);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).createDirectory(path);
      return super.createDirectory(path);
    }
    createFile(path) {
      if (this[_createFile$] != null) return dart.nullCheck(this[_createFile$])(path);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).createFile(path);
      return super.createFile(path);
    }
    createLink(path) {
      if (this[_createLink$] != null) return dart.nullCheck(this[_createLink$])(path);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).createLink(path);
      return super.createLink(path);
    }
    fseGetType(path, followLinks) {
      if (this[_fseGetType$] != null) return dart.nullCheck(this[_fseGetType$])(path, followLinks);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).fseGetType(path, followLinks);
      return super.fseGetType(path, followLinks);
    }
    fseGetTypeSync(path, followLinks) {
      if (this[_fseGetTypeSync$] != null) return dart.nullCheck(this[_fseGetTypeSync$])(path, followLinks);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).fseGetTypeSync(path, followLinks);
      return super.fseGetTypeSync(path, followLinks);
    }
    fseIdentical(path1, path2) {
      if (this[_fseIdentical$] != null) return dart.nullCheck(this[_fseIdentical$])(path1, path2);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).fseIdentical(path1, path2);
      return super.fseIdentical(path1, path2);
    }
    fseIdenticalSync(path1, path2) {
      if (this[_fseIdenticalSync$] != null) return dart.nullCheck(this[_fseIdenticalSync$])(path1, path2);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).fseIdenticalSync(path1, path2);
      return super.fseIdenticalSync(path1, path2);
    }
    fsWatch(path, events, recursive) {
      if (this[_fsWatch$] != null) return dart.nullCheck(this[_fsWatch$])(path, events, recursive);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).fsWatch(path, events, recursive);
      return super.fsWatch(path, events, recursive);
    }
    fsWatchIsSupported() {
      if (this[_fsWatchIsSupported$] != null) return dart.nullCheck(this[_fsWatchIsSupported$])();
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).fsWatchIsSupported();
      return super.fsWatchIsSupported();
    }
    getCurrentDirectory() {
      if (this[_getCurrentDirectory$] != null) return dart.nullCheck(this[_getCurrentDirectory$])();
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).getCurrentDirectory();
      return super.getCurrentDirectory();
    }
    getSystemTempDirectory() {
      if (this[_getSystemTempDirectory$] != null) return dart.nullCheck(this[_getSystemTempDirectory$])();
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).getSystemTempDirectory();
      return super.getSystemTempDirectory();
    }
    serverSocketBind(address, port, opts) {
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      if (this[_serverSocketBind$] != null) {
        return dart.nullCheck(this[_serverSocketBind$])(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
      }
      if (this[_previous] != null) {
        return dart.nullCheck(this[_previous]).serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
      }
      return super.serverSocketBind(address, port, {backlog: backlog, v6Only: v6Only, shared: shared});
    }
    setCurrentDirectory(path) {
      if (this[_setCurrentDirectory$] != null) {
        dart.nullCheck(this[_setCurrentDirectory$])(path);
      } else if (this[_previous] != null) {
        dart.nullCheck(this[_previous]).setCurrentDirectory(path);
      } else {
        super.setCurrentDirectory(path);
      }
    }
    socketConnect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      let timeout = opts && 'timeout' in opts ? opts.timeout : null;
      if (this[_socketConnect$] != null) {
        return dart.nullCheck(this[_socketConnect$])(host, port, {sourceAddress: sourceAddress, timeout: timeout});
      }
      if (this[_previous] != null) {
        return dart.nullCheck(this[_previous]).socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
      }
      return super.socketConnect(host, port, {sourceAddress: sourceAddress, timeout: timeout});
    }
    socketStartConnect(host, port, opts) {
      let sourceAddress = opts && 'sourceAddress' in opts ? opts.sourceAddress : null;
      if (this[_socketStartConnect$] != null) {
        return dart.nullCheck(this[_socketStartConnect$])(host, port, {sourceAddress: sourceAddress});
      }
      if (this[_previous] != null) {
        return dart.nullCheck(this[_previous]).socketStartConnect(host, port, {sourceAddress: sourceAddress});
      }
      return super.socketStartConnect(host, port, {sourceAddress: sourceAddress});
    }
    stat(path) {
      if (this[_stat$] != null) return dart.nullCheck(this[_stat$])(path);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).stat(path);
      return super.stat(path);
    }
    statSync(path) {
      if (this[_stat$] != null) return dart.nullCheck(this[_statSync$])(path);
      if (this[_previous] != null) return dart.nullCheck(this[_previous]).statSync(path);
      return super.statSync(path);
    }
  };
  (overrides$._IOOverridesScope.new = function(_createDirectory, _getCurrentDirectory, _setCurrentDirectory, _getSystemTempDirectory, _createFile, _stat, _statSync, _fseIdentical, _fseIdenticalSync, _fseGetType, _fseGetTypeSync, _fsWatch, _fsWatchIsSupported, _createLink, _socketConnect, _socketStartConnect, _serverSocketBind) {
    this[_previous] = overrides$.IOOverrides.current;
    this[_createDirectory$] = _createDirectory;
    this[_getCurrentDirectory$] = _getCurrentDirectory;
    this[_setCurrentDirectory$] = _setCurrentDirectory;
    this[_getSystemTempDirectory$] = _getSystemTempDirectory;
    this[_createFile$] = _createFile;
    this[_stat$] = _stat;
    this[_statSync$] = _statSync;
    this[_fseIdentical$] = _fseIdentical;
    this[_fseIdenticalSync$] = _fseIdenticalSync;
    this[_fseGetType$] = _fseGetType;
    this[_fseGetTypeSync$] = _fseGetTypeSync;
    this[_fsWatch$] = _fsWatch;
    this[_fsWatchIsSupported$] = _fsWatchIsSupported;
    this[_createLink$] = _createLink;
    this[_socketConnect$] = _socketConnect;
    this[_socketStartConnect$] = _socketStartConnect;
    this[_serverSocketBind$] = _serverSocketBind;
    ;
  }).prototype = overrides$._IOOverridesScope.prototype;
  dart.addTypeTests(overrides$._IOOverridesScope);
  dart.addTypeCaches(overrides$._IOOverridesScope);
  dart.setLibraryUri(overrides$._IOOverridesScope, I[8]);
  dart.setFieldSignature(overrides$._IOOverridesScope, () => ({
    __proto__: dart.getFields(overrides$._IOOverridesScope.__proto__),
    [_previous]: dart.finalFieldType(dart.nullable(overrides$.IOOverrides)),
    [_createDirectory$]: dart.finalFieldType(dart.nullable(dart.fnType(directory.Directory, [core.String]))),
    [_getCurrentDirectory$]: dart.finalFieldType(dart.nullable(dart.fnType(directory.Directory, []))),
    [_setCurrentDirectory$]: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.String]))),
    [_getSystemTempDirectory$]: dart.finalFieldType(dart.nullable(dart.fnType(directory.Directory, []))),
    [_createFile$]: dart.finalFieldType(dart.nullable(dart.fnType(file.File, [core.String]))),
    [_stat$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(file_system_entity.FileStat), [core.String]))),
    [_statSync$]: dart.finalFieldType(dart.nullable(dart.fnType(file_system_entity.FileStat, [core.String]))),
    [_fseIdentical$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(core.bool), [core.String, core.String]))),
    [_fseIdenticalSync$]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, [core.String, core.String]))),
    [_fseGetType$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(file_system_entity.FileSystemEntityType), [core.String, core.bool]))),
    [_fseGetTypeSync$]: dart.finalFieldType(dart.nullable(dart.fnType(file_system_entity.FileSystemEntityType, [core.String, core.bool]))),
    [_fsWatch$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Stream$(file_system_entity.FileSystemEvent), [core.String, core.int, core.bool]))),
    [_fsWatchIsSupported$]: dart.finalFieldType(dart.nullable(dart.fnType(core.bool, []))),
    [_createLink$]: dart.finalFieldType(dart.nullable(dart.fnType(link.Link, [core.String]))),
    [_socketConnect$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(socket$.Socket), [dart.dynamic, core.int], {sourceAddress: dart.dynamic, timeout: dart.nullable(core.Duration)}, {}))),
    [_socketStartConnect$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(socket$.ConnectionTask$(socket$.Socket)), [dart.dynamic, core.int], {sourceAddress: dart.dynamic}, {}))),
    [_serverSocketBind$]: dart.finalFieldType(dart.nullable(dart.fnType(async.Future$(socket$.ServerSocket), [dart.dynamic, core.int], {backlog: core.int, shared: core.bool, v6Only: core.bool}, {})))
  }));
  dart.defineLazy(overrides$, {
    /*overrides$._asyncRunZoned*/get _asyncRunZoned() {
      return C[61] || CT.C61;
    },
    /*overrides$._ioOverridesToken*/get _ioOverridesToken() {
      return new core.Object.new();
    }
  }, false);
  network_policy.isInsecureConnectionAllowed = function isInsecureConnectionAllowed(host) {
    return false;
  };
  link.Link = class Link extends core.Object {
    static new(path) {
      let overrides = overrides$.IOOverrides.current;
      if (overrides == null) {
        dart.throw(new core.UnimplementedError.new());
      }
      return overrides.createLink(path);
    }
    static fromRawPath(rawPath) {
      dart.throw(new core.UnimplementedError.new());
    }
    static fromUri(uri) {
      return link.Link.new(uri.toFilePath());
    }
  };
  (link.Link[dart.mixinNew] = function() {
  }).prototype = link.Link.prototype;
  dart.addTypeTests(link.Link);
  dart.addTypeCaches(link.Link);
  link.Link[dart.implements] = () => [file_system_entity.FileSystemEntity];
  dart.setLibraryUri(link.Link, I[9]);
  var address$1 = dart.privateName(internet_address, "InternetAddress.address");
  var rawAddress$ = dart.privateName(internet_address, "InternetAddress.rawAddress");
  var type$0 = dart.privateName(internet_address, "InternetAddress.type");
  var ListEquality__elementEquality = dart.privateName(equality, "ListEquality._elementEquality");
  internet_address.InternetAddress = class InternetAddress extends core.Object {
    get address() {
      return this[address$1];
    }
    set address(value) {
      super.address = value;
    }
    get rawAddress() {
      return this[rawAddress$];
    }
    set rawAddress(value) {
      super.rawAddress = value;
    }
    get type() {
      return this[type$0];
    }
    set type(value) {
      super.type = value;
    }
    static get ANY_IP_V4() {
      return dart.throw(new core.UnimplementedError.new());
    }
    static get ANY_IP_V6() {
      return dart.throw(new core.UnimplementedError.new());
    }
    static get LOOPBACK_IP_V4() {
      return internet_address.InternetAddress.loopbackIPv4;
    }
    static get LOOPBACK_IP_V6() {
      return internet_address.InternetAddress.loopbackIPv6;
    }
    static new(address, opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      if (dart.equals(type, socket$.InternetAddressType.unix)) {
        if (!address[$startsWith]("/")) {
          dart.throw(new core.ArgumentError.value(address, "address"));
        }
        return new internet_address.InternetAddress.__({address: address, rawAddress: _native_typed_data.NativeUint8List.new(0), type: socket$.InternetAddressType.unix});
      }
      let parsed = internet_address.InternetAddress.tryParse(address);
      if (parsed == null) {
        dart.throw(new core.ArgumentError.value(address, "address"));
      }
      return parsed;
    }
    static fromRawAddress(rawAddress, opts) {
      let type = opts && 'type' in opts ? opts.type : null;
      if (dart.equals(type, socket$.InternetAddressType.unix)) {
        return internet_address.InternetAddress.new(convert.utf8.decode(rawAddress), {type: type});
      }
      let address = internet_address._stringFromIp(rawAddress);
      type = internet_address._type(address);
      return new internet_address.InternetAddress.__({address: address, rawAddress: rawAddress, type: type});
    }
    get hashCode() {
      return (C[62] || CT.C62).hash(this.rawAddress);
    }
    get host() {
      return this.address;
    }
    get isLinkLocal() {
      let rawAddress = this.rawAddress;
      if (this.type[$_equals](socket$.InternetAddressType.IPv6)) {
        return rawAddress[$_get](0) === 254 && ((128 | 64) & rawAddress[$_get](1)) === 128;
      }
      return false;
    }
    get isLoopback() {
      return this._equals(internet_address.InternetAddress.loopbackIPv4) || this._equals(internet_address.InternetAddress.loopbackIPv6);
    }
    get isMulticast() {
      return this._equals(internet_address.InternetAddress.anyIPv4) || this._equals(internet_address.InternetAddress.anyIPv6);
    }
    _equals(other) {
      if (other == null) return false;
      if (internet_address.InternetAddress.is(other)) {
        if (this.type[$_equals](socket$.InternetAddressType.unix)) {
          return this.address === other.address;
        }
        return (C[62] || CT.C62).equals(this.rawAddress, other.rawAddress);
      }
      return false;
    }
    reverse() {
      dart.throw(new core.UnimplementedError.new());
    }
    static lookup(host, opts) {
      let type = opts && 'type' in opts ? opts.type : C[8] || CT.C8;
      return dart.throw(new core.UnimplementedError.new());
    }
    static tryParse(address) {
      let rawAddress = internet_address._tryParseRawAddress(address);
      if (rawAddress == null) {
        return null;
      }
      let type = internet_address._type(address);
      return new internet_address.InternetAddress.__({address: address, rawAddress: rawAddress, type: type});
    }
  };
  (internet_address.InternetAddress.__ = function(opts) {
    let address = opts && 'address' in opts ? opts.address : null;
    let rawAddress = opts && 'rawAddress' in opts ? opts.rawAddress : null;
    let type = opts && 'type' in opts ? opts.type : null;
    this[address$1] = address;
    this[rawAddress$] = rawAddress;
    this[type$0] = type;
    ;
  }).prototype = internet_address.InternetAddress.prototype;
  dart.addTypeTests(internet_address.InternetAddress);
  dart.addTypeCaches(internet_address.InternetAddress);
  dart.setMethodSignature(internet_address.InternetAddress, () => ({
    __proto__: dart.getMethods(internet_address.InternetAddress.__proto__),
    reverse: dart.fnType(async.Future$(internet_address.InternetAddress), [])
  }));
  dart.setGetterSignature(internet_address.InternetAddress, () => ({
    __proto__: dart.getGetters(internet_address.InternetAddress.__proto__),
    host: core.String,
    isLinkLocal: core.bool,
    isLoopback: core.bool,
    isMulticast: core.bool
  }));
  dart.setLibraryUri(internet_address.InternetAddress, I[10]);
  dart.setFieldSignature(internet_address.InternetAddress, () => ({
    __proto__: dart.getFields(internet_address.InternetAddress.__proto__),
    address: dart.finalFieldType(core.String),
    rawAddress: dart.finalFieldType(typed_data.Uint8List),
    type: dart.finalFieldType(socket$.InternetAddressType)
  }));
  dart.defineExtensionMethods(internet_address.InternetAddress, ['_equals']);
  dart.defineExtensionAccessors(internet_address.InternetAddress, ['hashCode']);
  dart.defineLazy(internet_address.InternetAddress, {
    /*internet_address.InternetAddress.anyIPv4*/get anyIPv4() {
      return internet_address.InternetAddress.new("0.0.0.0");
    },
    /*internet_address.InternetAddress.anyIPv6*/get anyIPv6() {
      return internet_address.InternetAddress.new("::");
    },
    /*internet_address.InternetAddress.loopbackIPv4*/get loopbackIPv4() {
      return internet_address.InternetAddress.new("127.0.0.1");
    },
    /*internet_address.InternetAddress.loopbackIPv6*/get loopbackIPv6() {
      return internet_address.InternetAddress.new("::1");
    }
  }, false);
  internet_address._stringFromIp = function _stringFromIp(bytes) {
    switch (bytes[$length]) {
      case 4:
      {
        return bytes[$map](core.String, dart.fn(item => item[$toString](), T.intToString()))[$join](".");
      }
      case 16:
      {
        return internet_address._stringFromIp6(bytes);
      }
      default:
      {
        dart.throw(new core.ArgumentError.value(bytes));
      }
    }
  };
  internet_address._stringFromIp6 = function _stringFromIp6(bytes) {
    let longestStart = null;
    let longestLength = 0;
    let start = null;
    let length = 0;
    for (let i = 0; i < 16; i = i + 1) {
      if (bytes[$_get](i) === 0) {
        if (start == null) {
          if (i[$modulo](2) === 0) {
            start = i;
            length = 1;
          }
        } else {
          length = length + 1;
        }
      } else if (start != null) {
        if (length > longestLength) {
          longestStart = start;
          longestLength = length;
        }
        start = null;
      }
    }
    if (start != null && length > longestLength) {
      longestStart = start;
      longestLength = length;
    }
    longestLength = longestLength - longestLength[$modulo](2);
    if (longestLength < 4) {
      longestStart = null;
    }
    let sb = new core.StringBuffer.new();
    let colon = false;
    for (let i = 0; i < 16; i = i + 1) {
      if (i === longestStart) {
        sb.write("::");
        i = i + (longestLength - 1);
        colon = false;
        continue;
      }
      let byte = bytes[$_get](i);
      if (i[$modulo](2) === 0) {
        if (colon) {
          sb.write(":");
        } else {
          colon = true;
        }
        if (byte !== 0) {
          sb.write(byte[$toRadixString](16));
        }
      } else {
        if (byte < 16 && bytes[$_get](i - 1) !== 0) {
          sb.write("0");
        }
        sb.write(byte[$toRadixString](16));
      }
    }
    return sb.toString();
  };
  internet_address._tryParseRawAddress = function _tryParseRawAddress(source) {
    for (let i = 0; i < source.length; i = i + 1) {
      let c = source[$substring](i, i + 1);
      switch (c) {
        case ":":
        {
          return typed_data.Uint8List.as(core.Uri.parseIPv6Address(source));
        }
        case ".":
        {
          return typed_data.Uint8List.as(core.Uri.parseIPv4Address(source));
        }
      }
    }
    return null;
  };
  internet_address._type = function _type(address) {
    for (let i = 0; i < address.length; i = i + 1) {
      let c = address[$substring](i, i + 1);
      switch (c) {
        case ":":
        {
          return socket$.InternetAddressType.IPv6;
        }
        case ".":
        {
          return socket$.InternetAddressType.IPv4;
        }
      }
    }
    dart.throw(new core.ArgumentError.value(address));
  };
  var changed$ = dart.privateName(file_system_entity, "FileStat.changed");
  var modified$ = dart.privateName(file_system_entity, "FileStat.modified");
  var accessed$ = dart.privateName(file_system_entity, "FileStat.accessed");
  var type$1 = dart.privateName(file_system_entity, "FileStat.type");
  var mode$ = dart.privateName(file_system_entity, "FileStat.mode");
  var size$ = dart.privateName(file_system_entity, "FileStat.size");
  file_system_entity.FileStat = class FileStat extends core.Object {
    get changed() {
      return this[changed$];
    }
    set changed(value) {
      super.changed = value;
    }
    get modified() {
      return this[modified$];
    }
    set modified(value) {
      super.modified = value;
    }
    get accessed() {
      return this[accessed$];
    }
    set accessed(value) {
      super.accessed = value;
    }
    get type() {
      return this[type$1];
    }
    set type(value) {
      super.type = value;
    }
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    modeString() {
      let t0;
      let permissions = this.mode & 4095;
      let codes = C[64] || CT.C64;
      let result = [];
      if ((permissions & 2048) !== 0) result[$add]("(suid) ");
      if ((permissions & 1024) !== 0) result[$add]("(guid) ");
      if ((permissions & 512) !== 0) result[$add]("(sticky) ");
      t0 = result;
      (() => {
        t0[$add](codes[$_get](permissions >> 6 & 7));
        t0[$add](codes[$_get](permissions >> 3 & 7));
        t0[$add](codes[$_get](permissions & 7));
        return t0;
      })();
      return result[$join]();
    }
    toString() {
      return "FileStat: type " + dart.str(this.type) + "\n          changed " + dart.str(this.changed) + "\n          modified " + dart.str(this.modified) + "\n          accessed " + dart.str(this.accessed) + "\n          mode " + this.modeString() + "\n          size " + dart.str(this.size);
    }
    static stat(path) {
      dart.throw(new core.UnimplementedError.new());
    }
    static statSync(path) {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (file_system_entity.FileStat._internal = function(changed, modified, accessed, type, mode, size) {
    this[changed$] = changed;
    this[modified$] = modified;
    this[accessed$] = accessed;
    this[type$1] = type;
    this[mode$] = mode;
    this[size$] = size;
    ;
  }).prototype = file_system_entity.FileStat.prototype;
  dart.addTypeTests(file_system_entity.FileStat);
  dart.addTypeCaches(file_system_entity.FileStat);
  dart.setMethodSignature(file_system_entity.FileStat, () => ({
    __proto__: dart.getMethods(file_system_entity.FileStat.__proto__),
    modeString: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(file_system_entity.FileStat, I[11]);
  dart.setFieldSignature(file_system_entity.FileStat, () => ({
    __proto__: dart.getFields(file_system_entity.FileStat.__proto__),
    changed: dart.finalFieldType(core.DateTime),
    modified: dart.finalFieldType(core.DateTime),
    accessed: dart.finalFieldType(core.DateTime),
    type: dart.finalFieldType(file_system_entity.FileSystemEntityType),
    mode: dart.finalFieldType(core.int),
    size: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(file_system_entity.FileStat, ['toString']);
  var type$2 = dart.privateName(file_system_entity, "FileSystemEvent.type");
  var path$ = dart.privateName(file_system_entity, "FileSystemEvent.path");
  var isDirectory$ = dart.privateName(file_system_entity, "FileSystemEvent.isDirectory");
  file_system_entity.FileSystemEvent = class FileSystemEvent extends core.Object {
    get type() {
      return this[type$2];
    }
    set type(value) {
      super.type = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get isDirectory() {
      return this[isDirectory$];
    }
    set isDirectory(value) {
      super.isDirectory = value;
    }
  };
  (file_system_entity.FileSystemEvent.__ = function(type, path, isDirectory) {
    this[type$2] = type;
    this[path$] = path;
    this[isDirectory$] = isDirectory;
    ;
  }).prototype = file_system_entity.FileSystemEvent.prototype;
  dart.addTypeTests(file_system_entity.FileSystemEvent);
  dart.addTypeCaches(file_system_entity.FileSystemEvent);
  dart.setLibraryUri(file_system_entity.FileSystemEvent, I[11]);
  dart.setFieldSignature(file_system_entity.FileSystemEvent, () => ({
    __proto__: dart.getFields(file_system_entity.FileSystemEvent.__proto__),
    type: dart.finalFieldType(core.int),
    path: dart.finalFieldType(core.String),
    isDirectory: dart.finalFieldType(core.bool)
  }));
  dart.defineLazy(file_system_entity.FileSystemEvent, {
    /*file_system_entity.FileSystemEvent.create*/get create() {
      return 1;
    },
    /*file_system_entity.FileSystemEvent.CREATE*/get CREATE() {
      return 1;
    },
    /*file_system_entity.FileSystemEvent.modify*/get modify() {
      return 2;
    },
    /*file_system_entity.FileSystemEvent.MODIFY*/get MODIFY() {
      return 2;
    },
    /*file_system_entity.FileSystemEvent.delete*/get delete() {
      return 4;
    },
    /*file_system_entity.FileSystemEvent.DELETE*/get DELETE() {
      return 4;
    },
    /*file_system_entity.FileSystemEvent.move*/get move() {
      return 8;
    },
    /*file_system_entity.FileSystemEvent.MOVE*/get MOVE() {
      return 8;
    },
    /*file_system_entity.FileSystemEvent.all*/get all() {
      return 15;
    },
    /*file_system_entity.FileSystemEvent.ALL*/get ALL() {
      return 15;
    }
  }, false);
  file_system_entity.FileSystemCreateEvent = class FileSystemCreateEvent extends file_system_entity.FileSystemEvent {
    toString() {
      return "FileSystemCreateEvent('" + this.path + "')";
    }
  };
  (file_system_entity.FileSystemCreateEvent.__ = function(path, isDirectory) {
    file_system_entity.FileSystemCreateEvent.__proto__.__.call(this, 1, core.String.as(path), core.bool.as(isDirectory));
    ;
  }).prototype = file_system_entity.FileSystemCreateEvent.prototype;
  dart.addTypeTests(file_system_entity.FileSystemCreateEvent);
  dart.addTypeCaches(file_system_entity.FileSystemCreateEvent);
  dart.setLibraryUri(file_system_entity.FileSystemCreateEvent, I[11]);
  dart.defineExtensionMethods(file_system_entity.FileSystemCreateEvent, ['toString']);
  file_system_entity.FileSystemDeleteEvent = class FileSystemDeleteEvent extends file_system_entity.FileSystemEvent {
    toString() {
      return "FileSystemDeleteEvent('" + this.path + "')";
    }
  };
  (file_system_entity.FileSystemDeleteEvent.__ = function(path, isDirectory) {
    file_system_entity.FileSystemDeleteEvent.__proto__.__.call(this, 4, core.String.as(path), core.bool.as(isDirectory));
    ;
  }).prototype = file_system_entity.FileSystemDeleteEvent.prototype;
  dart.addTypeTests(file_system_entity.FileSystemDeleteEvent);
  dart.addTypeCaches(file_system_entity.FileSystemDeleteEvent);
  dart.setLibraryUri(file_system_entity.FileSystemDeleteEvent, I[11]);
  dart.defineExtensionMethods(file_system_entity.FileSystemDeleteEvent, ['toString']);
  file_system_entity.FileSystemEntity = class FileSystemEntity extends core.Object {
    static get isWatchSupported() {
      dart.throw(new core.UnimplementedError.new());
    }
    get parent() {
      return directory.Directory.new(file_system_entity.FileSystemEntity.parentOf(this.path));
    }
    get uri() {
      return core._Uri.file(this.path);
    }
    resolveSymbolicLinks() {
      dart.throw(new core.UnimplementedError.new());
    }
    resolveSymbolicLinksSync() {
      dart.throw(new core.UnimplementedError.new());
    }
    stat() {
      return file_system_entity.FileStat.stat(this.path);
    }
    statSync() {
      return file_system_entity.FileStat.statSync(this.path);
    }
    static identical(path1, path2) {
      dart.throw(new core.UnimplementedError.new());
    }
    static identicalSync(path1, path2) {
      dart.throw(new core.UnimplementedError.new());
    }
    static isDirectory(path) {
      return dart.throw(new core.UnimplementedError.new());
    }
    static isDirectorySync(path) {
      return dart.throw(new core.UnimplementedError.new());
    }
    static isFile(path) {
      return dart.throw(new core.UnimplementedError.new());
    }
    static isFileSync(path) {
      return dart.throw(new core.UnimplementedError.new());
    }
    static isLink(path) {
      return dart.throw(new core.UnimplementedError.new());
    }
    static isLinkSync(s) {
      return dart.throw(new core.UnimplementedError.new());
    }
    static parentOf(path) {
      dart.throw(new core.UnimplementedError.new());
    }
    static type(path, opts) {
      let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
      dart.throw(new core.UnimplementedError.new());
    }
    static typeSync(path, opts) {
      let followLinks = opts && 'followLinks' in opts ? opts.followLinks : true;
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (file_system_entity.FileSystemEntity.new = function() {
    ;
  }).prototype = file_system_entity.FileSystemEntity.prototype;
  dart.addTypeTests(file_system_entity.FileSystemEntity);
  dart.addTypeCaches(file_system_entity.FileSystemEntity);
  dart.setMethodSignature(file_system_entity.FileSystemEntity, () => ({
    __proto__: dart.getMethods(file_system_entity.FileSystemEntity.__proto__),
    resolveSymbolicLinks: dart.fnType(async.Future$(core.String), []),
    resolveSymbolicLinksSync: dart.fnType(core.String, []),
    stat: dart.fnType(async.Future$(file_system_entity.FileStat), []),
    statSync: dart.fnType(file_system_entity.FileStat, [])
  }));
  dart.setGetterSignature(file_system_entity.FileSystemEntity, () => ({
    __proto__: dart.getGetters(file_system_entity.FileSystemEntity.__proto__),
    parent: directory.Directory,
    uri: core.Uri
  }));
  dart.setLibraryUri(file_system_entity.FileSystemEntity, I[11]);
  var _type$ = dart.privateName(file_system_entity, "FileSystemEntityType._type");
  var _type$0 = dart.privateName(file_system_entity, "_type");
  file_system_entity.FileSystemEntityType = class FileSystemEntityType extends core.Object {
    get [_type$0]() {
      return this[_type$];
    }
    set [_type$0](value) {
      super[_type$0] = value;
    }
    toString() {
      return (C[65] || CT.C65)[$_get](this[_type$0]);
    }
  };
  (file_system_entity.FileSystemEntityType._internal = function(_type) {
    this[_type$] = _type;
    ;
  }).prototype = file_system_entity.FileSystemEntityType.prototype;
  dart.addTypeTests(file_system_entity.FileSystemEntityType);
  dart.addTypeCaches(file_system_entity.FileSystemEntityType);
  dart.setLibraryUri(file_system_entity.FileSystemEntityType, I[11]);
  dart.setFieldSignature(file_system_entity.FileSystemEntityType, () => ({
    __proto__: dart.getFields(file_system_entity.FileSystemEntityType.__proto__),
    [_type$0]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(file_system_entity.FileSystemEntityType, ['toString']);
  dart.defineLazy(file_system_entity.FileSystemEntityType, {
    /*file_system_entity.FileSystemEntityType.file*/get file() {
      return C[66] || CT.C66;
    },
    /*file_system_entity.FileSystemEntityType.FILE*/get FILE() {
      return C[66] || CT.C66;
    },
    /*file_system_entity.FileSystemEntityType.directory*/get directory() {
      return C[67] || CT.C67;
    },
    /*file_system_entity.FileSystemEntityType.DIRECTORY*/get DIRECTORY() {
      return C[67] || CT.C67;
    },
    /*file_system_entity.FileSystemEntityType.link*/get link() {
      return C[68] || CT.C68;
    },
    /*file_system_entity.FileSystemEntityType.LINK*/get LINK() {
      return C[68] || CT.C68;
    },
    /*file_system_entity.FileSystemEntityType.notFound*/get notFound() {
      return C[69] || CT.C69;
    },
    /*file_system_entity.FileSystemEntityType.NOT_FOUND*/get NOT_FOUND() {
      return C[69] || CT.C69;
    }
  }, false);
  var contentChanged$ = dart.privateName(file_system_entity, "FileSystemModifyEvent.contentChanged");
  file_system_entity.FileSystemModifyEvent = class FileSystemModifyEvent extends file_system_entity.FileSystemEvent {
    get contentChanged() {
      return this[contentChanged$];
    }
    set contentChanged(value) {
      super.contentChanged = value;
    }
    toString() {
      return "FileSystemModifyEvent('" + this.path + "', contentChanged=" + dart.str(this.contentChanged) + ")";
    }
  };
  (file_system_entity.FileSystemModifyEvent.__ = function(path, isDirectory, contentChanged) {
    this[contentChanged$] = contentChanged;
    file_system_entity.FileSystemModifyEvent.__proto__.__.call(this, 2, core.String.as(path), core.bool.as(isDirectory));
    ;
  }).prototype = file_system_entity.FileSystemModifyEvent.prototype;
  dart.addTypeTests(file_system_entity.FileSystemModifyEvent);
  dart.addTypeCaches(file_system_entity.FileSystemModifyEvent);
  dart.setLibraryUri(file_system_entity.FileSystemModifyEvent, I[11]);
  dart.setFieldSignature(file_system_entity.FileSystemModifyEvent, () => ({
    __proto__: dart.getFields(file_system_entity.FileSystemModifyEvent.__proto__),
    contentChanged: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(file_system_entity.FileSystemModifyEvent, ['toString']);
  var destination$ = dart.privateName(file_system_entity, "FileSystemMoveEvent.destination");
  file_system_entity.FileSystemMoveEvent = class FileSystemMoveEvent extends file_system_entity.FileSystemEvent {
    get destination() {
      return this[destination$];
    }
    set destination(value) {
      super.destination = value;
    }
    toString() {
      let buffer = new core.StringBuffer.new();
      buffer.write("FileSystemMoveEvent('" + this.path + "'");
      if (this.destination != null) buffer.write(", '" + dart.str(this.destination) + "'");
      buffer.write(")");
      return buffer.toString();
    }
  };
  (file_system_entity.FileSystemMoveEvent.__ = function(path, isDirectory, destination) {
    this[destination$] = destination;
    file_system_entity.FileSystemMoveEvent.__proto__.__.call(this, 8, core.String.as(path), core.bool.as(isDirectory));
    ;
  }).prototype = file_system_entity.FileSystemMoveEvent.prototype;
  dart.addTypeTests(file_system_entity.FileSystemMoveEvent);
  dart.addTypeCaches(file_system_entity.FileSystemMoveEvent);
  dart.setLibraryUri(file_system_entity.FileSystemMoveEvent, I[11]);
  dart.setFieldSignature(file_system_entity.FileSystemMoveEvent, () => ({
    __proto__: dart.getFields(file_system_entity.FileSystemMoveEvent.__proto__),
    destination: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(file_system_entity.FileSystemMoveEvent, ['toString']);
  file.File = class File extends core.Object {
    static new(path) {
      let overrides = overrides$.IOOverrides.current;
      if (overrides == null) {
        dart.throw(new core.UnimplementedError.new());
      }
      return overrides.createFile(path);
    }
    static fromRawPath(rawPath) {
      return file.File.new(convert.utf8.decode(rawPath));
    }
    static fromUri(uri) {
      return file.File.new(uri.toFilePath());
    }
  };
  (file.File[dart.mixinNew] = function() {
  }).prototype = file.File.prototype;
  dart.addTypeTests(file.File);
  dart.addTypeCaches(file.File);
  file.File[dart.implements] = () => [file_system_entity.FileSystemEntity];
  dart.setLibraryUri(file.File, I[12]);
  var _type$1 = dart.privateName(file, "FileLock._type");
  var _type$2 = dart.privateName(file, "_type");
  file.FileLock = class FileLock extends core.Object {
    get [_type$2]() {
      return this[_type$1];
    }
    set [_type$2](value) {
      super[_type$2] = value;
    }
    get hashCode() {
      return this[_type$2];
    }
  };
  (file.FileLock._internal = function(_type) {
    this[_type$1] = _type;
    ;
  }).prototype = file.FileLock.prototype;
  dart.addTypeTests(file.FileLock);
  dart.addTypeCaches(file.FileLock);
  dart.setLibraryUri(file.FileLock, I[12]);
  dart.setFieldSignature(file.FileLock, () => ({
    __proto__: dart.getFields(file.FileLock.__proto__),
    [_type$2]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionAccessors(file.FileLock, ['hashCode']);
  dart.defineLazy(file.FileLock, {
    /*file.FileLock.shared*/get shared() {
      return C[70] || CT.C70;
    },
    /*file.FileLock.SHARED*/get SHARED() {
      return C[70] || CT.C70;
    },
    /*file.FileLock.exclusive*/get exclusive() {
      return C[71] || CT.C71;
    },
    /*file.FileLock.EXCLUSIVE*/get EXCLUSIVE() {
      return C[71] || CT.C71;
    },
    /*file.FileLock.blockingShared*/get blockingShared() {
      return C[72] || CT.C72;
    },
    /*file.FileLock.BLOCKING_SHARED*/get BLOCKING_SHARED() {
      return C[72] || CT.C72;
    },
    /*file.FileLock.blockingExclusive*/get blockingExclusive() {
      return C[73] || CT.C73;
    },
    /*file.FileLock.BLOCKING_EXCLUSIVE*/get BLOCKING_EXCLUSIVE() {
      return C[73] || CT.C73;
    }
  }, false);
  var _mode$0 = dart.privateName(file, "FileMode._mode");
  var _mode$1 = dart.privateName(file, "_mode");
  file.FileMode = class FileMode extends core.Object {
    get [_mode$1]() {
      return this[_mode$0];
    }
    set [_mode$1](value) {
      super[_mode$1] = value;
    }
    get hashCode() {
      return this[_mode$1];
    }
  };
  (file.FileMode._internal = function(_mode) {
    this[_mode$0] = _mode;
    ;
  }).prototype = file.FileMode.prototype;
  dart.addTypeTests(file.FileMode);
  dart.addTypeCaches(file.FileMode);
  dart.setLibraryUri(file.FileMode, I[12]);
  dart.setFieldSignature(file.FileMode, () => ({
    __proto__: dart.getFields(file.FileMode.__proto__),
    [_mode$1]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionAccessors(file.FileMode, ['hashCode']);
  dart.defineLazy(file.FileMode, {
    /*file.FileMode.read*/get read() {
      return C[74] || CT.C74;
    },
    /*file.FileMode.READ*/get READ() {
      return C[74] || CT.C74;
    },
    /*file.FileMode.write*/get write() {
      return C[75] || CT.C75;
    },
    /*file.FileMode.WRITE*/get WRITE() {
      return C[75] || CT.C75;
    },
    /*file.FileMode.append*/get append() {
      return C[76] || CT.C76;
    },
    /*file.FileMode.APPEND*/get APPEND() {
      return C[76] || CT.C76;
    },
    /*file.FileMode.writeOnly*/get writeOnly() {
      return C[77] || CT.C77;
    },
    /*file.FileMode.WRITE_ONLY*/get WRITE_ONLY() {
      return C[77] || CT.C77;
    },
    /*file.FileMode.writeOnlyAppend*/get writeOnlyAppend() {
      return C[78] || CT.C78;
    },
    /*file.FileMode.WRITE_ONLY_APPEND*/get WRITE_ONLY_APPEND() {
      return C[78] || CT.C78;
    }
  }, false);
  var message$5 = dart.privateName(file, "FileSystemException.message");
  var path$0 = dart.privateName(file, "FileSystemException.path");
  var osError$4 = dart.privateName(file, "FileSystemException.osError");
  file.FileSystemException = class FileSystemException extends core.Object {
    get message() {
      return this[message$5];
    }
    set message(value) {
      super.message = value;
    }
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get osError() {
      return this[osError$4];
    }
    set osError(value) {
      super.osError = value;
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write("FileSystemException");
      if (this.message[$isNotEmpty]) {
        sb.write(": " + this.message);
        if (this.path != null) {
          sb.write(", path = '" + dart.str(this.path) + "'");
        }
        if (this.osError != null) {
          sb.write(" (" + dart.str(this.osError) + ")");
        }
      } else if (this.osError != null) {
        sb.write(": " + dart.str(this.osError));
        if (this.path != null) {
          sb.write(", path = '" + dart.str(this.path) + "'");
        }
      } else if (this.path != null) {
        sb.write(": " + dart.str(this.path));
      }
      return sb.toString();
    }
  };
  (file.FileSystemException.new = function(message = "", path = "", osError = null) {
    this[message$5] = message;
    this[path$0] = path;
    this[osError$4] = osError;
    ;
  }).prototype = file.FileSystemException.prototype;
  dart.addTypeTests(file.FileSystemException);
  dart.addTypeCaches(file.FileSystemException);
  file.FileSystemException[dart.implements] = () => [exceptions.IOException];
  dart.setLibraryUri(file.FileSystemException, I[12]);
  dart.setFieldSignature(file.FileSystemException, () => ({
    __proto__: dart.getFields(file.FileSystemException.__proto__),
    message: dart.finalFieldType(core.String),
    path: dart.finalFieldType(dart.nullable(core.String)),
    osError: dart.finalFieldType(dart.nullable(exceptions.OSError))
  }));
  dart.defineExtensionMethods(file.FileSystemException, ['toString']);
  file.RandomAccessFile = class RandomAccessFile extends core.Object {};
  (file.RandomAccessFile.new = function() {
    ;
  }).prototype = file.RandomAccessFile.prototype;
  dart.addTypeTests(file.RandomAccessFile);
  dart.addTypeCaches(file.RandomAccessFile);
  dart.setLibraryUri(file.RandomAccessFile, I[12]);
  dart.defineLazy(file, {
    /*file.APPEND*/get APPEND() {
      return C[76] || CT.C76;
    },
    /*file.READ*/get READ() {
      return C[74] || CT.C74;
    },
    /*file.WRITE*/get WRITE() {
      return C[75] || CT.C75;
    },
    /*file.WRITE_ONLY*/get WRITE_ONLY() {
      return C[77] || CT.C77;
    },
    /*file.WRITE_ONLY_APPEND*/get WRITE_ONLY_APPEND() {
      return C[78] || CT.C78;
    }
  }, false);
  directory.Directory = class Directory extends core.Object {
    static get current() {
      let overrides = overrides$.IOOverrides.current;
      if (overrides == null) {
        dart.throw(new core.UnimplementedError.new());
      }
      return overrides.getCurrentDirectory();
    }
    static set current(path) {
      let overrides = overrides$.IOOverrides.current;
      if (overrides == null) {
        dart.throw(new core.UnimplementedError.new());
      }
      overrides.setCurrentDirectory(core.String.as(path));
    }
    static get systemTemp() {
      let overrides = overrides$.IOOverrides.current;
      if (overrides == null) {
        dart.throw(new core.UnimplementedError.new());
      }
      return overrides.getSystemTempDirectory();
    }
    static new(path) {
      let overrides = overrides$.IOOverrides.current;
      if (overrides == null) {
        dart.throw(new core.UnimplementedError.new());
      }
      return overrides.createDirectory(path);
    }
    static fromRawPath(path) {
      return directory.Directory.new(convert.utf8.decode(path));
    }
    static fromUri(uri) {
      return directory.Directory.new(uri.toFilePath());
    }
  };
  (directory.Directory[dart.mixinNew] = function() {
  }).prototype = directory.Directory.prototype;
  dart.addTypeTests(directory.Directory);
  dart.addTypeCaches(directory.Directory);
  directory.Directory[dart.implements] = () => [file_system_entity.FileSystemEntity];
  dart.setLibraryUri(directory.Directory, I[13]);
  var encoding = dart.privateName(io_sink_base, "IOSinkBase.encoding");
  io_sink_base.IOSinkBase = class IOSinkBase extends core.Object {
    get encoding() {
      return this[encoding];
    }
    set encoding(value) {
      this[encoding] = value;
    }
    addStream(stream) {
      T.StreamOfListOfint().as(stream);
      return stream.listen(dart.fn(data => {
        this.add(data);
      }, T.ListOfintTovoid()), {onError: dart.fn((error, stackTrace) => {
          this.addError(core.Object.as(error), T.StackTraceN().as(stackTrace));
        }, T.dynamicAnddynamicToNull())}).asFuture(dart.dynamic);
    }
    flush() {
      return async.Future.value(null);
    }
    write(obj) {
      this.add((C[79] || CT.C79).convert(dart.str(obj)));
    }
    writeAll(objects, separator = "") {
      let isFirst = true;
      for (let object of objects) {
        if (isFirst) {
          isFirst = false;
        } else {
          this.write(separator);
        }
        this.write(object);
      }
    }
    writeCharCode(charCode) {
      this.write(core.String.fromCharCode(charCode));
    }
    writeln(obj = "") {
      if (!dart.equals(obj, "")) {
        this.write(obj);
      }
      this.write("\n");
    }
  };
  (io_sink_base.IOSinkBase.new = function() {
    this[encoding] = convert.utf8;
    ;
  }).prototype = io_sink_base.IOSinkBase.prototype;
  dart.addTypeTests(io_sink_base.IOSinkBase);
  dart.addTypeCaches(io_sink_base.IOSinkBase);
  io_sink_base.IOSinkBase[dart.implements] = () => [io_sink.IOSink];
  dart.setMethodSignature(io_sink_base.IOSinkBase, () => ({
    __proto__: dart.getMethods(io_sink_base.IOSinkBase.__proto__),
    addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
    flush: dart.fnType(async.Future, []),
    write: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    writeAll: dart.fnType(dart.void, [core.Iterable], [core.String]),
    writeCharCode: dart.fnType(dart.void, [core.int]),
    writeln: dart.fnType(dart.void, [], [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(io_sink_base.IOSinkBase, I[14]);
  dart.setFieldSignature(io_sink_base.IOSinkBase, () => ({
    __proto__: dart.getFields(io_sink_base.IOSinkBase.__proto__),
    encoding: dart.fieldType(convert.Encoding)
  }));
  var headers = dart.privateName(http_client_response, "BrowserHttpClientResponse.headers");
  var request$ = dart.privateName(http_client_response, "BrowserHttpClientResponse.request");
  var browserResponse = dart.privateName(http_client_response, "BrowserHttpClientResponse.browserResponse");
  var reasonPhrase$ = dart.privateName(http_client_response, "BrowserHttpClientResponse.reasonPhrase");
  var statusCode$ = dart.privateName(http_client_response, "BrowserHttpClientResponse.statusCode");
  var _cookies = dart.privateName(http_client_response, "_cookies");
  var _body$ = dart.privateName(http_client_response, "_body");
  http_client_response.BrowserHttpClientResponse = class BrowserHttpClientResponse extends async.Stream$(core.List$(core.int)) {
    get headers() {
      return this[headers];
    }
    set headers(value) {
      super.headers = value;
    }
    get request() {
      return this[request$];
    }
    set request(value) {
      super.request = value;
    }
    get browserResponse() {
      return this[browserResponse];
    }
    set browserResponse(value) {
      this[browserResponse] = value;
    }
    get reasonPhrase() {
      return this[reasonPhrase$];
    }
    set reasonPhrase(value) {
      super.reasonPhrase = value;
    }
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
    get certificate() {
      return null;
    }
    get compressionState() {
      return http.HttpClientResponseCompressionState.decompressed;
    }
    get connectionInfo() {
      return null;
    }
    get contentLength() {
      return -1;
    }
    get cookies() {
      let t0;
      let cookies = this[_cookies];
      if (cookies == null) {
        cookies = T.JSArrayOfCookie().of([]);
        let headerValues = (t0 = this.headers._get("set-cookie"), t0 == null ? T.JSArrayOfString().of([]) : t0);
        for (let headerValue of headerValues) {
          dart.nullCheck(this[_cookies])[$add](http.Cookie.fromSetCookieValue(headerValue));
        }
        this[_cookies] = cookies;
      }
      return cookies;
    }
    get isRedirect() {
      if (this.request.method === "GET" || this.request.method === "HEAD") {
        return this.statusCode === 301 || this.statusCode === 308 || this.statusCode === 302 || this.statusCode === 303 || this.statusCode === 307;
      } else if (this.request.method === "POST") {
        return this.statusCode === 303;
      }
      return false;
    }
    get persistentConnection() {
      return false;
    }
    get redirects() {
      return C[80] || CT.C80;
    }
    detachSocket() {
      dart.throw(new core.UnimplementedError.new());
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return this[_body$].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    redirect(method = null, url = null, followLoops = null) {
      let t0, t0$;
      let newUrl = (t0 = url, t0 == null ? core.Uri.parse(dart.nullCheck(this.headers.value("location"))) : t0);
      return this.request.client.openUrl((t0$ = method, t0$ == null ? this.request.method : t0$), newUrl).then(http.HttpClientResponse, dart.fn(newRequest => {
        this.request.headers.forEach(dart.fn((name, value) => {
          newRequest.headers.add(name, value);
        }, T.StringAndListOfStringTovoid()));
        newRequest.followRedirects = true;
        return newRequest.close();
      }, T.HttpClientRequestToFutureOfHttpClientResponse()));
    }
  };
  (http_client_response.BrowserHttpClientResponse.new = function(request, statusCode, reasonPhrase, _body) {
    this[headers] = new http.HttpHeadersImpl.new("1.1");
    this[browserResponse] = null;
    this[_cookies] = null;
    this[request$] = request;
    this[statusCode$] = statusCode;
    this[reasonPhrase$] = reasonPhrase;
    this[_body$] = _body;
    http_client_response.BrowserHttpClientResponse.__proto__.new.call(this);
    ;
  }).prototype = http_client_response.BrowserHttpClientResponse.prototype;
  dart.addTypeTests(http_client_response.BrowserHttpClientResponse);
  dart.addTypeCaches(http_client_response.BrowserHttpClientResponse);
  http_client_response.BrowserHttpClientResponse[dart.implements] = () => [http.HttpClientResponse];
  dart.setMethodSignature(http_client_response.BrowserHttpClientResponse, () => ({
    __proto__: dart.getMethods(http_client_response.BrowserHttpClientResponse.__proto__),
    detachSocket: dart.fnType(async.Future$(socket$.Socket), []),
    listen: dart.fnType(async.StreamSubscription$(typed_data.Uint8List), [dart.nullable(dart.fnType(dart.void, [typed_data.Uint8List]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    redirect: dart.fnType(async.Future$(http.HttpClientResponse), [], [dart.nullable(core.String), dart.nullable(core.Uri), dart.nullable(core.bool)])
  }));
  dart.setGetterSignature(http_client_response.BrowserHttpClientResponse, () => ({
    __proto__: dart.getGetters(http_client_response.BrowserHttpClientResponse.__proto__),
    certificate: dart.nullable(secure_socket.X509Certificate),
    compressionState: http.HttpClientResponseCompressionState,
    connectionInfo: dart.nullable(http.HttpConnectionInfo),
    contentLength: core.int,
    cookies: core.List$(http.Cookie),
    isRedirect: core.bool,
    persistentConnection: core.bool,
    redirects: core.List$(http.RedirectInfo)
  }));
  dart.setLibraryUri(http_client_response.BrowserHttpClientResponse, I[15]);
  dart.setFieldSignature(http_client_response.BrowserHttpClientResponse, () => ({
    __proto__: dart.getFields(http_client_response.BrowserHttpClientResponse.__proto__),
    headers: dart.finalFieldType(http.HttpHeaders),
    request: dart.finalFieldType(http_client_request.BrowserHttpClientRequest),
    browserResponse: dart.fieldType(dart.dynamic),
    [_cookies]: dart.fieldType(dart.nullable(core.List$(http.Cookie))),
    [_body$]: dart.finalFieldType(async.Stream$(typed_data.Uint8List)),
    reasonPhrase: dart.finalFieldType(core.String),
    statusCode: dart.finalFieldType(core.int)
  }));
  var method$ = dart.privateName(http_client_exception, "BrowserHttpClientException.method");
  var url$ = dart.privateName(http_client_exception, "BrowserHttpClientException.url");
  var origin$ = dart.privateName(http_client_exception, "BrowserHttpClientException.origin");
  var headers$ = dart.privateName(http_client_exception, "BrowserHttpClientException.headers");
  var browserCredentialsMode$ = dart.privateName(http_client_exception, "BrowserHttpClientException.browserCredentialsMode");
  var browserResponseType$ = dart.privateName(http_client_exception, "BrowserHttpClientException.browserResponseType");
  var osError = dart.privateName(http_client_exception, "BrowserHttpClientException.osError");
  var address = dart.privateName(http_client_exception, "BrowserHttpClientException.address");
  var port = dart.privateName(http_client_exception, "BrowserHttpClientException.port");
  http_client_exception.BrowserHttpClientException = class BrowserHttpClientException extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get origin() {
      return this[origin$];
    }
    set origin(value) {
      super.origin = value;
    }
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
    get browserCredentialsMode() {
      return this[browserCredentialsMode$];
    }
    set browserCredentialsMode(value) {
      super.browserCredentialsMode = value;
    }
    get browserResponseType() {
      return this[browserResponseType$];
    }
    set browserResponseType(value) {
      super.browserResponseType = value;
    }
    get osError() {
      return this[osError];
    }
    set osError(value) {
      super.osError = value;
    }
    get address() {
      return this[address];
    }
    set address(value) {
      super.address = value;
    }
    get port() {
      return this[port];
    }
    set port(value) {
      super.port = value;
    }
    get message() {
      return "XMLHttpRequest (XHR) error";
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write("XMLHttpRequest (XHR) error.");
      if (http_client_exception.BrowserHttpClientException.verbose) {
        if (!dart.fn(() => {
          sb.write("\n");
          for (let i = 0; i < 80; i = i + 1) {
            sb.write("-");
          }
          sb.write("\n");
          function addEntry(key, value) {
            sb.write(key[$padRight](30));
            sb.write(value);
            sb.write("\n");
          }
          dart.fn(addEntry, T.StringAndStringNTovoid());
          let parsedUrl = core.Uri.parse(this.url);
          let isCrossOrigin = parsedUrl.origin !== html.window.origin;
          addEntry("Request method: ", this.method);
          addEntry("Request URL: ", this.url);
          addEntry("Origin: ", this.origin);
          addEntry("Cross-origin: ", dart.str(isCrossOrigin));
          addEntry("browserCredentialsMode: ", dart.str(this.browserCredentialsMode));
          addEntry("browserResponseType: ", this.browserResponseType);
          sb.write("\nTHE REASON FOR THE XHR ERROR IS UNKNOWN.\n(For security reasons, browsers do not explain XHR errors.)\n\nIs the server down? Did the server have an internal error?\n\n");
          if (isCrossOrigin) {
            let sortedHeaderNames = T.JSArrayOfString().of([]);
            this.headers.forEach(dart.fn((name, values) => {
              sortedHeaderNames[$add](name);
            }, T.StringAndListOfStringTovoid()));
            sortedHeaderNames[$sort]();
            if (this.browserCredentialsMode) {
              if (this.method !== "HEAD" && this.method !== "GET") {
                sb.write("Did the server respond to a cross-origin \"preflight\" (OPTIONS) request?\n" + "\n");
              }
              sb.write("Did the server respond with the following headers?\n" + "  * Access-Control-Allow-Credentials: true\n" + "    * Alternatively, disable \"credentials mode\".\n" + "  * Access-Control-Allow-Origin: " + dart.str(this.origin) + "\n" + "    * In credentials mode, wildcard (\"*\") would not work!\n" + "  * Access-Control-Allow-Methods: " + this.method + "\n" + "    * In credentials mode, wildcard (\"*\") would not work!\n");
              if (sortedHeaderNames[$isNotEmpty]) {
                let joinedHeaderNames = sortedHeaderNames[$join](", ");
                sb.write("  * Access-Control-Allow-Headers: " + joinedHeaderNames + "\n" + "    * In credentials mode, wildcard (\"*\") would not work!\n");
              }
            } else {
              sb.write("Enabling credentials mode would enable use of some HTTP headers in both the\nrequest and the response. For example, credentials mode is required for\nsending/receiving cookies. If you think you need to enable 'credentials mode',\ndo the following:\n\n    final httpClientRequest = ...;\n    if (httpClientRequest is BrowserHttpClientRequest) {\n      httpClientRequest.browserCredentialsMode = true;\n    }\n\n");
              if (this.method !== "HEAD" && this.method !== "GET") {
                sb.write("Did the server respond to a cross-origin \"preflight\" (OPTIONS) request?\n" + "\n");
              }
              sb.write("Did the server respond with the following headers?\n" + "  * Access-Control-Allow-Origin: " + dart.str(this.origin) + "\n" + "    * You can also use wildcard (\"*\").\n" + "    * Always required for cross-origin requests!\n");
              if (!http_client_exception.BrowserHttpClientException._corsSimpleMethods.contains(this.method)) {
                sb.write("  * Access-Control-Allow-Methods: " + this.method + "\n" + "    * You can also use wildcard (\"*\").\n");
              }
              if (sortedHeaderNames[$isNotEmpty]) {
                let joinedHeaderNames = sortedHeaderNames[$join](", ");
                sb.write("  * Access-Control-Allow-Headers: " + joinedHeaderNames + "\n" + "    * You can also use wildcard (\"*\").\n");
              }
            }
          }
          sb.write("\n" + "Want shorter error messages? Set the following static field:\n" + "    BrowserHttpException.verbose = false;\n");
          for (let i = 0; i < 80; i = i + 1) {
            sb.write("-");
          }
          sb.write("\n");
          return true;
        }, T.VoidTobool())()) dart.assertFailed(null, I[16], 62, 14, "() {\n        sb.write('\\n');\n        for (var i = 0; i < 80; i++) {\n          sb.write('-');\n        }\n        sb.write('\\n');\n\n        // Write key details\n        void addEntry(String key, String? value) {\n          sb.write(key.padRight(30));\n          sb.write(value);\n          sb.write('\\n');\n        }\n\n        final parsedUrl = Uri.parse(url);\n        final isCrossOrigin = parsedUrl.origin != html.window.origin;\n        addEntry('Request method: ', method);\n        addEntry('Request URL: ', url);\n        addEntry('Origin: ', origin);\n        addEntry('Cross-origin: ', '$isCrossOrigin');\n        addEntry('browserCredentialsMode: ', '$browserCredentialsMode');\n        addEntry('browserResponseType: ', '$browserResponseType');\n        sb.write(\n          '''\n\nTHE REASON FOR THE XHR ERROR IS UNKNOWN.\n(For security reasons, browsers do not explain XHR errors.)\n\nIs the server down? Did the server have an internal error?\n\n''',\n        );\n\n        // Warn about possible problem with missing CORS headers\n        if (isCrossOrigin) {\n          // List of header name that the server may need to whitelist\n          final sortedHeaderNames = <String>[];\n          headers.forEach((name, values) {\n            sortedHeaderNames.add(name);\n          });\n          sortedHeaderNames.sort();\n          if (browserCredentialsMode) {\n            if (method != 'HEAD' && method != 'GET') {\n              sb.write(\n                'Did the server respond to a cross-origin \"preflight\" (OPTIONS) request?\\n'\n                '\\n',\n              );\n            }\n            sb.write(\n              'Did the server respond with the following headers?\\n'\n              '  * Access-Control-Allow-Credentials: true\\n'\n              '    * Alternatively, disable \"credentials mode\".\\n'\n              '  * Access-Control-Allow-Origin: $origin\\n'\n              '    * In credentials mode, wildcard (\"*\") would not work!\\n'\n              '  * Access-Control-Allow-Methods: $method\\n'\n              '    * In credentials mode, wildcard (\"*\") would not work!\\n',\n            );\n            if (sortedHeaderNames.isNotEmpty) {\n              final joinedHeaderNames = sortedHeaderNames.join(', ');\n              sb.write(\n                '  * Access-Control-Allow-Headers: $joinedHeaderNames\\n'\n                '    * In credentials mode, wildcard (\"*\") would not work!\\n',\n              );\n            }\n          } else {\n            sb.write(\"\"\"\nEnabling credentials mode would enable use of some HTTP headers in both the\nrequest and the response. For example, credentials mode is required for\nsending/receiving cookies. If you think you need to enable 'credentials mode',\ndo the following:\n\n    final httpClientRequest = ...;\n    if (httpClientRequest is BrowserHttpClientRequest) {\n      httpClientRequest.browserCredentialsMode = true;\n    }\n\n\"\"\");\n            if (method != 'HEAD' && method != 'GET') {\n              sb.write(\n                'Did the server respond to a cross-origin \"preflight\" (OPTIONS) request?\\n'\n                '\\n',\n              );\n            }\n            sb.write(\n              'Did the server respond with the following headers?\\n'\n              '  * Access-Control-Allow-Origin: $origin\\n'\n              '    * You can also use wildcard (\"*\").\\n'\n              '    * Always required for cross-origin requests!\\n',\n            );\n            if (!_corsSimpleMethods.contains(method)) {\n              sb.write(\n                '  * Access-Control-Allow-Methods: $method\\n'\n                '    * You can also use wildcard (\"*\").\\n',\n              );\n            }\n\n            if (sortedHeaderNames.isNotEmpty) {\n              final joinedHeaderNames = sortedHeaderNames.join(', ');\n              sb.write(\n                '  * Access-Control-Allow-Headers: $joinedHeaderNames\\n'\n                '    * You can also use wildcard (\"*\").\\n',\n              );\n            }\n          }\n        }\n        sb.write(\n          '\\n'\n          'Want shorter error messages? Set the following static field:\\n'\n          '    BrowserHttpException.verbose = false;\\n',\n        );\n        // Write a line\n        for (var i = 0; i < 80; i++) {\n          sb.write('-');\n        }\n        sb.write('\\n');\n        return true;\n      }()");
      }
      return sb.toString();
    }
  };
  (http_client_exception.BrowserHttpClientException.new = function(opts) {
    let method = opts && 'method' in opts ? opts.method : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let origin = opts && 'origin' in opts ? opts.origin : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let browserCredentialsMode = opts && 'browserCredentialsMode' in opts ? opts.browserCredentialsMode : null;
    let browserResponseType = opts && 'browserResponseType' in opts ? opts.browserResponseType : null;
    this[osError] = null;
    this[address] = null;
    this[port] = null;
    this[method$] = method;
    this[url$] = url;
    this[origin$] = origin;
    this[headers$] = headers;
    this[browserCredentialsMode$] = browserCredentialsMode;
    this[browserResponseType$] = browserResponseType;
    ;
  }).prototype = http_client_exception.BrowserHttpClientException.prototype;
  dart.addTypeTests(http_client_exception.BrowserHttpClientException);
  dart.addTypeCaches(http_client_exception.BrowserHttpClientException);
  http_client_exception.BrowserHttpClientException[dart.implements] = () => [socket$.SocketException];
  dart.setGetterSignature(http_client_exception.BrowserHttpClientException, () => ({
    __proto__: dart.getGetters(http_client_exception.BrowserHttpClientException.__proto__),
    message: core.String
  }));
  dart.setLibraryUri(http_client_exception.BrowserHttpClientException, I[17]);
  dart.setFieldSignature(http_client_exception.BrowserHttpClientException, () => ({
    __proto__: dart.getFields(http_client_exception.BrowserHttpClientException.__proto__),
    method: dart.finalFieldType(core.String),
    url: dart.finalFieldType(core.String),
    origin: dart.finalFieldType(dart.nullable(core.String)),
    headers: dart.finalFieldType(http.HttpHeaders),
    browserCredentialsMode: dart.finalFieldType(core.bool),
    browserResponseType: dart.finalFieldType(core.String),
    osError: dart.finalFieldType(dart.nullable(exceptions.OSError)),
    address: dart.finalFieldType(dart.nullable(internet_address.InternetAddress)),
    port: dart.finalFieldType(dart.nullable(core.int))
  }));
  dart.defineExtensionMethods(http_client_exception.BrowserHttpClientException, ['toString']);
  dart.defineLazy(http_client_exception.BrowserHttpClientException, {
    /*http_client_exception.BrowserHttpClientException.verbose*/get verbose() {
      return true;
    },
    set verbose(_) {},
    /*http_client_exception.BrowserHttpClientException._corsSimpleMethods*/get _corsSimpleMethods() {
      return C[81] || CT.C81;
    }
  }, false);
  var client$ = dart.privateName(http_client_request, "BrowserHttpClientRequest.client");
  var browserCredentialsMode = dart.privateName(http_client_request, "BrowserHttpClientRequest.browserCredentialsMode");
  var method$0 = dart.privateName(http_client_request, "BrowserHttpClientRequest.method");
  var uri$ = dart.privateName(http_client_request, "BrowserHttpClientRequest.uri");
  var headers$0 = dart.privateName(http_client_request, "BrowserHttpClientRequest.headers");
  var cookies = dart.privateName(http_client_request, "BrowserHttpClientRequest.cookies");
  var encoding$ = dart.privateName(http_client_request, "BrowserHttpClientRequest.encoding");
  var _browserResponseType = dart.privateName(http_client_request, "_browserResponseType");
  var _completer = dart.privateName(http_client_request, "_completer");
  var _addStreamFuture = dart.privateName(http_client_request, "_addStreamFuture");
  var _result = dart.privateName(http_client_request, "_result");
  var _buffer = dart.privateName(http_client_request, "_buffer");
  var _supportsBody = dart.privateName(http_client_request, "_supportsBody");
  var _close = dart.privateName(http_client_request, "_close");
  var __IOSink_encoding = dart.privateName(http_client_request, "_#IOSink#encoding");
  var __IOSink_encoding$ = dart.privateName(io_sink, "_#IOSink#encoding");
  var __IOSink_encoding_ = dart.privateName(http_client_request, "_#IOSink#encoding=");
  var persistentConnection = dart.privateName(http, "HttpClientRequest.persistentConnection");
  var followRedirects = dart.privateName(http, "HttpClientRequest.followRedirects");
  var maxRedirects = dart.privateName(http, "HttpClientRequest.maxRedirects");
  var contentLength = dart.privateName(http, "HttpClientRequest.contentLength");
  var bufferOutput = dart.privateName(http, "HttpClientRequest.bufferOutput");
  http.HttpClientRequest = class HttpClientRequest extends core.Object {
    get persistentConnection() {
      return this[persistentConnection];
    }
    set persistentConnection(value) {
      this[persistentConnection] = value;
    }
    get followRedirects() {
      return this[followRedirects];
    }
    set followRedirects(value) {
      this[followRedirects] = value;
    }
    get maxRedirects() {
      return this[maxRedirects];
    }
    set maxRedirects(value) {
      this[maxRedirects] = value;
    }
    get contentLength() {
      return this[contentLength];
    }
    set contentLength(value) {
      this[contentLength] = value;
    }
    get bufferOutput() {
      return this[bufferOutput];
    }
    set bufferOutput(value) {
      this[bufferOutput] = value;
    }
  };
  (http.HttpClientRequest.new = function() {
    this[persistentConnection] = true;
    this[followRedirects] = true;
    this[maxRedirects] = 5;
    this[contentLength] = -1;
    this[bufferOutput] = true;
    ;
  }).prototype = http.HttpClientRequest.prototype;
  dart.addTypeTests(http.HttpClientRequest);
  dart.addTypeCaches(http.HttpClientRequest);
  http.HttpClientRequest[dart.implements] = () => [io_sink.IOSink];
  dart.setLibraryUri(http.HttpClientRequest, I[18]);
  dart.setFieldSignature(http.HttpClientRequest, () => ({
    __proto__: dart.getFields(http.HttpClientRequest.__proto__),
    persistentConnection: dart.fieldType(core.bool),
    followRedirects: dart.fieldType(core.bool),
    maxRedirects: dart.fieldType(core.int),
    contentLength: dart.fieldType(core.int),
    bufferOutput: dart.fieldType(core.bool)
  }));
  const HttpClientRequest_IOSinkBase$36 = class HttpClientRequest_IOSinkBase extends http.HttpClientRequest {};
  (HttpClientRequest_IOSinkBase$36.new = function() {
    io_sink_base.IOSinkBase.new.call(this);
    HttpClientRequest_IOSinkBase$36.__proto__.new.call(this);
  }).prototype = HttpClientRequest_IOSinkBase$36.prototype;
  dart.applyMixin(HttpClientRequest_IOSinkBase$36, io_sink_base.IOSinkBase);
  http_client_request.BrowserHttpClientRequest = class BrowserHttpClientRequest extends HttpClientRequest_IOSinkBase$36 {
    get client() {
      return this[client$];
    }
    set client(value) {
      super.client = value;
    }
    get browserCredentialsMode() {
      return this[browserCredentialsMode];
    }
    set browserCredentialsMode(value) {
      this[browserCredentialsMode] = value;
    }
    get method() {
      return this[method$0];
    }
    set method(value) {
      super.method = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    get headers() {
      return this[headers$0];
    }
    set headers(value) {
      super.headers = value;
    }
    get cookies() {
      return this[cookies];
    }
    set cookies(value) {
      super.cookies = value;
    }
    get encoding() {
      return this[encoding$];
    }
    set encoding(value) {
      this[encoding$] = value;
    }
    get browserResponseType() {
      return this[_browserResponseType];
    }
    set browserResponseType(value) {
      if (value != null) {
        let validValues = C[82] || CT.C82;
        if (!validValues.contains(value)) {
          dart.throw(new core.ArgumentError.value(value));
        }
      }
      this[_browserResponseType] = value;
    }
    get connectionInfo() {
      return null;
    }
    get done() {
      return this[_completer].future;
    }
    abort(exception = null, stackTrace = null) {
    }
    add(event) {
      T.ListOfint().as(event);
      if (!this[_supportsBody]) {
        dart.throw(new core.StateError.new("HTTP method " + this.method + " does not support body"));
      }
      if (this[_completer].isCompleted) {
        dart.throw(new core.StateError.new("StreamSink is closed"));
      }
      if (this[_addStreamFuture] != null) {
        dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
      }
      this[_buffer].addAll(event);
    }
    addError(error, stackTrace = null) {
      if (this[_completer].isCompleted) {
        dart.throw(new core.StateError.new("HTTP request is closed already"));
      }
      this[_completer].completeError(error, stackTrace);
    }
    addStream(stream) {
      T.StreamOfListOfint().as(stream);
      return async.async(dart.void, (function* addStream() {
        if (this[_completer].isCompleted) {
          dart.throw(new core.StateError.new("StreamSink is closed"));
        }
        if (this[_addStreamFuture] != null) {
          dart.throw(new core.StateError.new("StreamSink is bound to a stream"));
        }
        let future = stream.listen(dart.fn(item => {
          this.add(item);
        }, T.ListOfintTovoid()), {onError: dart.fn(error => {
            this.addError(core.Object.as(error));
          }, T.dynamicToNull()), cancelOnError: true}).asFuture(core.Null, null);
        this[_addStreamFuture] = future;
        yield future;
        this[_addStreamFuture] = null;
        return null;
      }).bind(this));
    }
    close() {
      return async.async(http.HttpClientResponse, (function* close() {
        let t0;
        t0 = this[_result];
        return t0 == null ? this[_result] = this[_close]() : t0;
      }).bind(this));
    }
    flush() {
      return async.async(dart.dynamic, (function* flush() {
        if (this[_addStreamFuture] != null) {
          yield this[_addStreamFuture];
          this[_addStreamFuture] = null;
        }
      }).bind(this));
    }
    [_close]() {
      return async.async(http.HttpClientResponse, (function* _close() {
        let t0;
        yield this.flush();
        if (this.cookies[$isNotEmpty]) {
          this[_completer].completeError(new core.StateError.new("Attempted to send cookies, but XMLHttpRequest does not support them."));
          return this[_completer].future;
        }
        if (this.browserResponseType == null) {
          this.browserResponseType = "arraybuffer";
          let accept = this.headers.value("Accept");
          if (accept != null) {
            let isText = http_client_request.BrowserHttpClientRequest.isTextContentType(accept);
            if (isText) {
              this.browserResponseType = "text";
            }
          }
        }
        let callback = this.client.onBrowserHttpClientRequestClose;
        if (callback != null) {
          yield T.FutureOfvoid().new(dart.fn(() => callback(this), T.VoidToFutureOrOfvoid()));
        }
        try {
          let xhr = html.HttpRequest.new();
          let method = this.method;
          let uriString = this.uri.toString();
          xhr.open(method, uriString);
          let browserResponseType = (t0 = this.browserResponseType, t0 == null ? "arraybuffer" : t0);
          xhr[$responseType] = browserResponseType;
          let timeout = this.client.connectionTimeout;
          if (timeout != null) {
            xhr.timeout = timeout.inMilliseconds;
          }
          let browserCredentialsMode = this.browserCredentialsMode;
          xhr.withCredentials = browserCredentialsMode;
          let headers = this.headers;
          headers.forEach(dart.fn((name, values) => {
            for (let value of values) {
              xhr.setRequestHeader(name, value);
            }
          }, T.StringAndListOfStringTovoid()));
          let headersCompleter = this[_completer];
          let controller = T.StreamControllerOfUint8List().new();
          let bodySeenLength = 0;
          let currentHttpClientResponse = null;
          const completeHeaders = () => {
            let t0, t0$;
            if (headersCompleter.isCompleted) {
              return;
            }
            let httpClientResponse = new http_client_response.BrowserHttpClientResponse.new(this, (t0 = xhr.status, t0 == null ? 200 : t0), (t0$ = xhr.statusText, t0$ == null ? "OK" : t0$), controller.stream);
            currentHttpClientResponse = httpClientResponse;
            let headers = httpClientResponse.headers;
            xhr[$responseHeaders][$forEach](dart.fn((name, value) => {
              headers.add(name, value);
            }, T.StringAndStringTovoid()));
            headersCompleter.complete(httpClientResponse);
          };
          dart.fn(completeHeaders, T.VoidTovoid());
          function addChunk() {
            let t0;
            t0 = currentHttpClientResponse;
            t0 == null ? null : t0.browserResponse = xhr[$response];
            if (!headersCompleter.isCompleted || controller.isClosed) {
              return;
            }
            let body = xhr[$response];
            if (body == null) {
              return;
            } else if (typeof body == 'string') {
              let chunk = body[$substring](bodySeenLength);
              bodySeenLength = body.length;
              controller.add(new convert.Utf8Encoder.new().convert(chunk));
            } else if (typed_data.ByteBuffer.is(body)) {
              let chunk = typed_data.Uint8List.view(body, bodySeenLength);
              bodySeenLength = body[$lengthInBytes];
              controller.add(chunk);
            } else {
              return;
            }
          }
          dart.fn(addChunk, T.VoidTovoid());
          xhr[$onReadyStateChange].listen(dart.fn(event => {
            switch (xhr[$readyState]) {
              case 2:
              {
                completeHeaders();
                break;
              }
            }
          }, T.EventTovoid()));
          xhr[$onProgress].listen(dart.fn(event => {
            addChunk();
          }, T.ProgressEventTovoid()));
          xhr[$onLoad].first.then(core.Null, dart.fn(event => {
            addChunk();
            controller.close();
          }, T.ProgressEventToNull()));
          xhr[$onTimeout].first.then(core.Null, dart.fn(event => {
            if (!headersCompleter.isCompleted) {
              headersCompleter.completeError(new async.TimeoutException.new("Timeout"));
            } else {
              controller.addError(new async.TimeoutException.new("Timeout"));
              controller.close();
            }
          }, T.ProgressEventToNull()));
          let origin = html.window.origin;
          xhr[$onError].first.then(core.Null, dart.fn(event => {
            let error = new http_client_exception.BrowserHttpClientException.new({method: method, url: uriString, origin: origin, headers: headers, browserResponseType: browserResponseType, browserCredentialsMode: browserCredentialsMode});
            if (!headersCompleter.isCompleted) {
              headersCompleter.completeError(error, core.StackTrace.current);
            } else if (!controller.isClosed) {
              controller.addError(error);
              controller.close();
            }
          }, T.ProgressEventToNull()));
          let buffer = this[_buffer];
          if (buffer[$isNotEmpty]) {
            xhr.send(_native_typed_data.NativeUint8List.fromList(buffer));
          } else {
            xhr.send();
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            this[_completer].completeError(e);
          } else
            throw e$;
        }
        return this[_completer].future;
      }).bind(this));
    }
    static isTextContentType(value) {
      let contentType = http.ContentType.parse(value);
      switch (contentType.primaryType) {
        case "application":
        {
          switch (contentType.subType) {
            case "grpc-web":
            {
              return true;
            }
            default:
            {
              return false;
            }
          }
        }
        case "text":
        {
          return true;
        }
        default:
        {
          return false;
        }
      }
    }
    static _httpMethodSupportsBody(method) {
      switch (method) {
        case "GET":
        {
          return false;
        }
        case "HEAD":
        {
          return false;
        }
        case "OPTIONS":
        {
          return false;
        }
        default:
        {
          return true;
        }
      }
    }
    get [__IOSink_encoding$]() {
      return T.EncodingN().as(this[$noSuchMethod](new core._Invocation.getter(C[83] || CT.C83)));
    }
    set [__IOSink_encoding$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[84] || CT.C84, value));
    }
  };
  (http_client_request.BrowserHttpClientRequest.new = function(client, method, uri) {
    this[_browserResponseType] = null;
    this[browserCredentialsMode] = false;
    this[headers$0] = new http.HttpHeadersImpl.new("1.1");
    this[_completer] = T.CompleterOfHttpClientResponse().new();
    this[_addStreamFuture] = null;
    this[cookies] = T.JSArrayOfCookie().of([]);
    this[encoding$] = convert.utf8;
    this[_result] = null;
    this[_buffer] = new typed_buffer.Uint8Buffer.new();
    this[client$] = client;
    this[method$0] = method;
    this[uri$] = uri;
    this[_supportsBody] = http_client_request.BrowserHttpClientRequest._httpMethodSupportsBody(method);
    http_client_request.BrowserHttpClientRequest.__proto__.new.call(this);
    let userAgent = this.client.userAgent;
    if (userAgent != null) {
      this.headers.set("user-agent", userAgent);
    }
    this.browserCredentialsMode = this.client.browserCredentialsMode;
    this.followRedirects = true;
    this.maxRedirects = 5;
    this.bufferOutput = true;
  }).prototype = http_client_request.BrowserHttpClientRequest.prototype;
  dart.addTypeTests(http_client_request.BrowserHttpClientRequest);
  dart.addTypeCaches(http_client_request.BrowserHttpClientRequest);
  dart.setMethodSignature(http_client_request.BrowserHttpClientRequest, () => ({
    __proto__: dart.getMethods(http_client_request.BrowserHttpClientRequest.__proto__),
    abort: dart.fnType(dart.void, [], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    addStream: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
    close: dart.fnType(async.Future$(http.HttpClientResponse), []),
    [_close]: dart.fnType(async.Future$(http.HttpClientResponse), [])
  }));
  dart.setGetterSignature(http_client_request.BrowserHttpClientRequest, () => ({
    __proto__: dart.getGetters(http_client_request.BrowserHttpClientRequest.__proto__),
    browserResponseType: dart.nullable(core.String),
    connectionInfo: dart.nullable(http.HttpConnectionInfo),
    done: async.Future$(http.HttpClientResponse),
    [__IOSink_encoding$]: dart.nullable(convert.Encoding)
  }));
  dart.setSetterSignature(http_client_request.BrowserHttpClientRequest, () => ({
    __proto__: dart.getSetters(http_client_request.BrowserHttpClientRequest.__proto__),
    browserResponseType: dart.nullable(core.String),
    [__IOSink_encoding$]: dart.nullable(convert.Encoding)
  }));
  dart.setLibraryUri(http_client_request.BrowserHttpClientRequest, I[19]);
  dart.setFieldSignature(http_client_request.BrowserHttpClientRequest, () => ({
    __proto__: dart.getFields(http_client_request.BrowserHttpClientRequest.__proto__),
    client: dart.finalFieldType(http_client.BrowserHttpClient),
    [_browserResponseType]: dart.fieldType(dart.nullable(core.String)),
    browserCredentialsMode: dart.fieldType(core.bool),
    method: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(core.Uri),
    headers: dart.finalFieldType(http.HttpHeaders),
    [_completer]: dart.finalFieldType(async.Completer$(http.HttpClientResponse)),
    [_addStreamFuture]: dart.fieldType(dart.nullable(async.Future)),
    cookies: dart.finalFieldType(core.List$(http.Cookie)),
    [_supportsBody]: dart.finalFieldType(core.bool),
    encoding: dart.fieldType(convert.Encoding),
    [_result]: dart.fieldType(dart.nullable(async.Future$(http.HttpClientResponse))),
    [_buffer]: dart.finalFieldType(typed_buffer.Uint8Buffer)
  }));
  var browserCredentialsMode$0 = dart.privateName(http_client, "BrowserHttpClient.browserCredentialsMode");
  var idleTimeout = dart.privateName(http_client, "BrowserHttpClient.idleTimeout");
  var connectionTimeout = dart.privateName(http_client, "BrowserHttpClient.connectionTimeout");
  var maxConnectionsPerHost = dart.privateName(http_client, "BrowserHttpClient.maxConnectionsPerHost");
  var autoUncompress = dart.privateName(http_client, "BrowserHttpClient.autoUncompress");
  var userAgent = dart.privateName(http_client, "BrowserHttpClient.userAgent");
  var authenticate = dart.privateName(http_client, "BrowserHttpClient.authenticate");
  var authenticateProxy = dart.privateName(http_client, "BrowserHttpClient.authenticateProxy");
  var badCertificateCallback = dart.privateName(http_client, "BrowserHttpClient.badCertificateCallback");
  var findProxy = dart.privateName(http_client, "BrowserHttpClient.findProxy");
  var onBrowserHttpClientRequestClose = dart.privateName(http_client, "BrowserHttpClient.onBrowserHttpClientRequestClose");
  var _isClosed = dart.privateName(http_client, "_isClosed");
  http_client.BrowserHttpClient = class BrowserHttpClient extends core.Object {
    get browserCredentialsMode() {
      return this[browserCredentialsMode$0];
    }
    set browserCredentialsMode(value) {
      this[browserCredentialsMode$0] = value;
    }
    get idleTimeout() {
      return this[idleTimeout];
    }
    set idleTimeout(value) {
      this[idleTimeout] = value;
    }
    get connectionTimeout() {
      return this[connectionTimeout];
    }
    set connectionTimeout(value) {
      this[connectionTimeout] = value;
    }
    get maxConnectionsPerHost() {
      return this[maxConnectionsPerHost];
    }
    set maxConnectionsPerHost(value) {
      this[maxConnectionsPerHost] = value;
    }
    get autoUncompress() {
      return this[autoUncompress];
    }
    set autoUncompress(value) {
      this[autoUncompress] = value;
    }
    get userAgent() {
      return this[userAgent];
    }
    set userAgent(value) {
      this[userAgent] = value;
    }
    get authenticate() {
      return this[authenticate];
    }
    set authenticate(value) {
      this[authenticate] = value;
    }
    get authenticateProxy() {
      return this[authenticateProxy];
    }
    set authenticateProxy(value) {
      this[authenticateProxy] = value;
    }
    get badCertificateCallback() {
      return this[badCertificateCallback];
    }
    set badCertificateCallback(value) {
      this[badCertificateCallback] = value;
    }
    get findProxy() {
      return this[findProxy];
    }
    set findProxy(value) {
      this[findProxy] = value;
    }
    get onBrowserHttpClientRequestClose() {
      return this[onBrowserHttpClientRequestClose];
    }
    set onBrowserHttpClientRequestClose(value) {
      this[onBrowserHttpClientRequestClose] = value;
    }
    addCredentials(url, realm, credentials) {
      dart.throw(new core.UnimplementedError.new());
    }
    addProxyCredentials(host, port, realm, credentials) {
    }
    close(opts) {
      let force = opts && 'force' in opts ? opts.force : false;
      this[_isClosed] = true;
    }
    delete(host, port, path) {
      return this.open("DELETE", host, port, path);
    }
    deleteUrl(url) {
      return this.openUrl("DELETE", url);
    }
    get(host, port, path) {
      return this.open("GET", host, port, path);
    }
    getUrl(url) {
      return this.openUrl("GET", url);
    }
    head(host, port, path) {
      return this.open("HEAD", host, port, path);
    }
    headUrl(url) {
      return this.openUrl("HEAD", url);
    }
    open(method, host, port, path) {
      let query = null;
      let i = path[$indexOf]("?");
      if (i >= 0) {
        query = path[$substring](i + 1);
        path = path[$substring](0, i);
      }
      let uri = core._Uri.new({scheme: "http", host: host, port: port, path: path, query: query, fragment: null});
      return this.openUrl(method, uri);
    }
    openUrl(method, url) {
      return async.async(http.HttpClientRequest, (function* openUrl() {
        if (this[_isClosed]) {
          dart.throw(new core.StateError.new("HTTP client is closed"));
        }
        let scheme = url.scheme;
        let needsNewUrl = false;
        if (scheme[$isEmpty]) {
          scheme = "https";
          needsNewUrl = true;
        } else {
          switch (scheme) {
            case "":
            {
              scheme = "https";
              needsNewUrl = true;
              break;
            }
            case "http":
            {
              break;
            }
            case "https":
            {
              break;
            }
            default:
            {
              dart.throw(new core.ArgumentError.value(url, "url", "Unsupported scheme"));
            }
          }
        }
        if (needsNewUrl) {
          url = core._Uri.new({scheme: scheme, userInfo: url.userInfo, host: url.host, port: url.port, query: url.query, fragment: url.fragment});
        }
        return new http_client_request.BrowserHttpClientRequest.new(this, method, url);
      }).bind(this));
    }
    patch(host, port, path) {
      return this.open("PATCH", host, port, path);
    }
    patchUrl(url) {
      return this.openUrl("PATCH", url);
    }
    post(host, port, path) {
      return this.open("POST", host, port, path);
    }
    postUrl(url) {
      return this.openUrl("POST", url);
    }
    put(host, port, path) {
      return this.open("PUT", host, port, path);
    }
    putUrl(url) {
      return this.openUrl("PUT", url);
    }
  };
  (http_client.BrowserHttpClient.new = function() {
    this[browserCredentialsMode$0] = false;
    this[idleTimeout] = new core.Duration.new({seconds: 15});
    this[connectionTimeout] = null;
    this[maxConnectionsPerHost] = null;
    this[autoUncompress] = true;
    this[userAgent] = null;
    this[authenticate] = null;
    this[authenticateProxy] = null;
    this[badCertificateCallback] = null;
    this[findProxy] = null;
    this[_isClosed] = false;
    this[onBrowserHttpClientRequestClose] = null;
    ;
  }).prototype = http_client.BrowserHttpClient.prototype;
  dart.addTypeTests(http_client.BrowserHttpClient);
  dart.addTypeCaches(http_client.BrowserHttpClient);
  http_client.BrowserHttpClient[dart.implements] = () => [http.HttpClient];
  dart.setMethodSignature(http_client.BrowserHttpClient, () => ({
    __proto__: dart.getMethods(http_client.BrowserHttpClient.__proto__),
    addCredentials: dart.fnType(dart.void, [core.Uri, core.String, http.HttpClientCredentials]),
    addProxyCredentials: dart.fnType(dart.void, [core.String, core.int, core.String, http.HttpClientCredentials]),
    close: dart.fnType(dart.void, [], {force: core.bool}, {}),
    delete: dart.fnType(async.Future$(http.HttpClientRequest), [core.String, dart.nullable(core.int), core.String]),
    deleteUrl: dart.fnType(async.Future$(http.HttpClientRequest), [core.Uri]),
    get: dart.fnType(async.Future$(http.HttpClientRequest), [core.String, dart.nullable(core.int), core.String]),
    getUrl: dart.fnType(async.Future$(http.HttpClientRequest), [core.Uri]),
    head: dart.fnType(async.Future$(http.HttpClientRequest), [core.String, dart.nullable(core.int), core.String]),
    headUrl: dart.fnType(async.Future$(http.HttpClientRequest), [core.Uri]),
    open: dart.fnType(async.Future$(http.HttpClientRequest), [core.String, core.String, dart.nullable(core.int), core.String]),
    openUrl: dart.fnType(async.Future$(http.HttpClientRequest), [core.String, core.Uri]),
    patch: dart.fnType(async.Future$(http.HttpClientRequest), [core.String, dart.nullable(core.int), core.String]),
    patchUrl: dart.fnType(async.Future$(http.HttpClientRequest), [core.Uri]),
    post: dart.fnType(async.Future$(http.HttpClientRequest), [core.String, dart.nullable(core.int), core.String]),
    postUrl: dart.fnType(async.Future$(http.HttpClientRequest), [core.Uri]),
    put: dart.fnType(async.Future$(http.HttpClientRequest), [core.String, dart.nullable(core.int), core.String]),
    putUrl: dart.fnType(async.Future$(http.HttpClientRequest), [core.Uri])
  }));
  dart.setLibraryUri(http_client.BrowserHttpClient, I[20]);
  dart.setFieldSignature(http_client.BrowserHttpClient, () => ({
    __proto__: dart.getFields(http_client.BrowserHttpClient.__proto__),
    browserCredentialsMode: dart.fieldType(core.bool),
    idleTimeout: dart.fieldType(core.Duration),
    connectionTimeout: dart.fieldType(dart.nullable(core.Duration)),
    maxConnectionsPerHost: dart.fieldType(dart.nullable(core.int)),
    autoUncompress: dart.fieldType(core.bool),
    userAgent: dart.fieldType(dart.nullable(core.String)),
    authenticate: dart.fieldType(dart.nullable(dart.fnType(async.Future$(core.bool), [core.Uri, core.String, core.String]))),
    authenticateProxy: dart.fieldType(dart.nullable(dart.fnType(async.Future$(core.bool), [core.String, core.int, core.String, core.String]))),
    badCertificateCallback: dart.fieldType(dart.nullable(dart.fnType(core.bool, [secure_socket.X509Certificate, core.String, core.int]))),
    findProxy: dart.fieldType(dart.nullable(dart.fnType(core.String, [core.Uri]))),
    [_isClosed]: dart.fieldType(core.bool),
    onBrowserHttpClientRequestClose: dart.fieldType(dart.nullable(dart.fnType(dart.void, [http_client_request.BrowserHttpClientRequest])))
  }));
  internals_for_browser_or_node_impl_browser.newHttpClient = function newHttpClient() {
    return new http_client.BrowserHttpClient.new();
  };
  dart.copyProperties(internals_for_browser_or_node_impl_browser, {
    get locale() {
      let languages = html.window[$navigator].languages;
      if (languages != null && languages[$isNotEmpty]) {
        return languages[$first];
      }
      return "en-US";
    },
    get operatingSystem() {
      let s = html.window[$navigator][$userAgent][$toLowerCase]();
      if (s[$contains]("iphone") || s[$contains]("ipad") || s[$contains]("ipod") || s[$contains]("watch os")) {
        return "ios";
      }
      if (s[$contains]("mac os")) {
        return "macos";
      }
      if (s[$contains]("fuchsia")) {
        return "fuchsia";
      }
      if (s[$contains]("android")) {
        return "android";
      }
      if (s[$contains]("linux") || s[$contains]("cros") || s[$contains]("chromebook")) {
        return "linux";
      }
      if (s[$contains]("windows")) {
        return "windows";
      }
      return "";
    },
    get operatingSystemVersion() {
      let t1, t1$, t1$0, t1$1, t1$2;
      let userAgent = html.window[$navigator][$userAgent];
      {
        let regExp = core.RegExp.new("Android ([a-zA-Z0-9.-_]+)");
        let match = regExp.firstMatch(userAgent);
        if (match != null) {
          let version = (t1 = match.group(1), t1 == null ? "" : t1);
          return version;
        }
      }
      {
        let regExp = core.RegExp.new("iPhone OS ([a-zA-Z0-9.-_]+) ([a-zA-Z0-9.-_]+)");
        let match = regExp.firstMatch(userAgent);
        if (match != null) {
          let version = (t1$ = match.group(2), t1$ == null ? "" : t1$)[$replaceAll]("_", ".");
          return version;
        }
      }
      {
        let regExp = core.RegExp.new("Mac OS X ([a-zA-Z0-9.-_]+)");
        let match = regExp.firstMatch(userAgent);
        if (match != null) {
          let version = (t1$0 = match.group(1), t1$0 == null ? "" : t1$0)[$replaceAll]("_", ".");
          return version;
        }
      }
      {
        let regExp = core.RegExp.new("CrOS ([a-zA-Z0-9.-_]+) ([a-zA-Z0-9.-_]+)");
        let match = regExp.firstMatch(userAgent);
        if (match != null) {
          let version = (t1$1 = match.group(2), t1$1 == null ? "" : t1$1);
          return version;
        }
      }
      {
        let regExp = core.RegExp.new("Windows NT ([a-zA-Z0-9.-_]+)");
        let match = regExp.firstMatch(userAgent);
        if (match != null) {
          let version = (t1$2 = match.group(1), t1$2 == null ? "" : t1$2);
          return version;
        }
      }
      return "";
    }
  });
  http.ContentType = class ContentType extends core.Object {
    static new(primaryType, subType, opts) {
      let charset = opts && 'charset' in opts ? opts.charset : null;
      let parameters = opts && 'parameters' in opts ? opts.parameters : C[85] || CT.C85;
      return new http._ContentType.new(primaryType, subType, charset, parameters);
    }
    static parse(value) {
      return http._ContentType.parse(value);
    }
  };
  (http.ContentType[dart.mixinNew] = function() {
  }).prototype = http.ContentType.prototype;
  dart.addTypeTests(http.ContentType);
  dart.addTypeCaches(http.ContentType);
  http.ContentType[dart.implements] = () => [http.HeaderValue];
  dart.setLibraryUri(http.ContentType, I[18]);
  dart.defineLazy(http.ContentType, {
    /*http.ContentType.text*/get text() {
      return http.ContentType.new("text", "plain", {charset: "utf-8"});
    },
    /*http.ContentType.TEXT*/get TEXT() {
      return http.ContentType.text;
    },
    /*http.ContentType.html*/get html() {
      return http.ContentType.new("text", "html", {charset: "utf-8"});
    },
    /*http.ContentType.HTML*/get HTML() {
      return http.ContentType.html;
    },
    /*http.ContentType.json*/get json() {
      return http.ContentType.new("application", "json", {charset: "utf-8"});
    },
    /*http.ContentType.JSON*/get JSON() {
      return http.ContentType.json;
    },
    /*http.ContentType.binary*/get binary() {
      return http.ContentType.new("application", "octet-stream");
    },
    /*http.ContentType.BINARY*/get BINARY() {
      return http.ContentType.binary;
    }
  }, false);
  var expires = dart.privateName(http, "Cookie.expires");
  var maxAge = dart.privateName(http, "Cookie.maxAge");
  var domain = dart.privateName(http, "Cookie.domain");
  var path = dart.privateName(http, "Cookie.path");
  var secure = dart.privateName(http, "Cookie.secure");
  var httpOnly = dart.privateName(http, "Cookie.httpOnly");
  var __Cookie_name = dart.privateName(http, "_#Cookie#name");
  var __Cookie_value = dart.privateName(http, "_#Cookie#value");
  http.Cookie = class Cookie extends core.Object {
    get expires() {
      return this[expires];
    }
    set expires(value) {
      this[expires] = value;
    }
    get maxAge() {
      return this[maxAge];
    }
    set maxAge(value) {
      this[maxAge] = value;
    }
    get domain() {
      return this[domain];
    }
    set domain(value) {
      this[domain] = value;
    }
    get path() {
      return this[path];
    }
    set path(value) {
      this[path] = value;
    }
    get secure() {
      return this[secure];
    }
    set secure(value) {
      this[secure] = value;
    }
    get httpOnly() {
      return this[httpOnly];
    }
    set httpOnly(value) {
      this[httpOnly] = value;
    }
    get name() {
      let t1;
      t1 = this[__Cookie_name];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("name")) : t1;
    }
    set name(t1) {
      this[__Cookie_name] = t1;
    }
    get value() {
      let t2;
      t2 = this[__Cookie_value];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("value")) : t2;
    }
    set value(t2) {
      this[__Cookie_value] = t2;
    }
    static new(name, value) {
      return new http._Cookie.new(name, value);
    }
    static fromSetCookieValue(value) {
      return new http._Cookie.fromSetCookieValue(value);
    }
  };
  (http.Cookie[dart.mixinNew] = function() {
    this[__Cookie_name] = null;
    this[__Cookie_value] = null;
    this[expires] = null;
    this[maxAge] = null;
    this[domain] = null;
    this[path] = null;
    this[secure] = false;
    this[httpOnly] = false;
  }).prototype = http.Cookie.prototype;
  dart.addTypeTests(http.Cookie);
  dart.addTypeCaches(http.Cookie);
  dart.setGetterSignature(http.Cookie, () => ({
    __proto__: dart.getGetters(http.Cookie.__proto__),
    name: core.String,
    value: core.String
  }));
  dart.setSetterSignature(http.Cookie, () => ({
    __proto__: dart.getSetters(http.Cookie.__proto__),
    name: core.String,
    value: core.String
  }));
  dart.setLibraryUri(http.Cookie, I[18]);
  dart.setFieldSignature(http.Cookie, () => ({
    __proto__: dart.getFields(http.Cookie.__proto__),
    [__Cookie_name]: dart.fieldType(dart.nullable(core.String)),
    [__Cookie_value]: dart.fieldType(dart.nullable(core.String)),
    expires: dart.fieldType(dart.nullable(core.DateTime)),
    maxAge: dart.fieldType(dart.nullable(core.int)),
    domain: dart.fieldType(dart.nullable(core.String)),
    path: dart.fieldType(dart.nullable(core.String)),
    secure: dart.fieldType(core.bool),
    httpOnly: dart.fieldType(core.bool)
  }));
  http.DetachedSocket = class DetachedSocket extends core.Object {};
  (http.DetachedSocket.new = function() {
    ;
  }).prototype = http.DetachedSocket.prototype;
  dart.addTypeTests(http.DetachedSocket);
  dart.addTypeCaches(http.DetachedSocket);
  dart.setLibraryUri(http.DetachedSocket, I[18]);
  http.HeaderValue = class HeaderValue extends core.Object {
    static new(value = "", parameters = C[85] || CT.C85) {
      return new http._HeaderValue.new(value, parameters);
    }
    static parse(value, opts) {
      let parameterSeparator = opts && 'parameterSeparator' in opts ? opts.parameterSeparator : ";";
      let valueSeparator = opts && 'valueSeparator' in opts ? opts.valueSeparator : null;
      let preserveBackslash = opts && 'preserveBackslash' in opts ? opts.preserveBackslash : false;
      return http._HeaderValue.parse(value, {parameterSeparator: parameterSeparator, valueSeparator: valueSeparator, preserveBackslash: preserveBackslash});
    }
  };
  (http.HeaderValue[dart.mixinNew] = function() {
  }).prototype = http.HeaderValue.prototype;
  dart.addTypeTests(http.HeaderValue);
  dart.addTypeCaches(http.HeaderValue);
  dart.setLibraryUri(http.HeaderValue, I[18]);
  var idleTimeout$ = dart.privateName(http, "HttpClient.idleTimeout");
  var connectionTimeout$ = dart.privateName(http, "HttpClient.connectionTimeout");
  var maxConnectionsPerHost$ = dart.privateName(http, "HttpClient.maxConnectionsPerHost");
  var autoUncompress$ = dart.privateName(http, "HttpClient.autoUncompress");
  var userAgent$ = dart.privateName(http, "HttpClient.userAgent");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  http.HttpClient = class HttpClient extends core.Object {
    get idleTimeout() {
      return this[idleTimeout$];
    }
    set idleTimeout(value) {
      this[idleTimeout$] = value;
    }
    get connectionTimeout() {
      return this[connectionTimeout$];
    }
    set connectionTimeout(value) {
      this[connectionTimeout$] = value;
    }
    get maxConnectionsPerHost() {
      return this[maxConnectionsPerHost$];
    }
    set maxConnectionsPerHost(value) {
      this[maxConnectionsPerHost$] = value;
    }
    get autoUncompress() {
      return this[autoUncompress$];
    }
    set autoUncompress(value) {
      this[autoUncompress$] = value;
    }
    get userAgent() {
      return this[userAgent$];
    }
    set userAgent(value) {
      this[userAgent$] = value;
    }
    static new(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let overrides = http.HttpOverrides.current;
      if (overrides == null) {
        return internals_for_browser_or_node_impl_browser.newHttpClient();
      }
      return overrides.createHttpClient(context);
    }
    static findProxyFromEnvironment(url, opts) {
      let environment = opts && 'environment' in opts ? opts.environment : null;
      let overrides = http.HttpOverrides.current;
      if (overrides == null) {
        return "DIRECT";
      }
      return overrides.findProxyFromEnvironment(url, environment);
    }
  };
  (http.HttpClient[dart.mixinNew] = function() {
    this[idleTimeout$] = C[86] || CT.C86;
    this[connectionTimeout$] = null;
    this[maxConnectionsPerHost$] = null;
    this[autoUncompress$] = true;
    this[userAgent$] = null;
  }).prototype = http.HttpClient.prototype;
  dart.addTypeTests(http.HttpClient);
  dart.addTypeCaches(http.HttpClient);
  dart.setLibraryUri(http.HttpClient, I[18]);
  dart.setFieldSignature(http.HttpClient, () => ({
    __proto__: dart.getFields(http.HttpClient.__proto__),
    idleTimeout: dart.fieldType(core.Duration),
    connectionTimeout: dart.fieldType(dart.nullable(core.Duration)),
    maxConnectionsPerHost: dart.fieldType(dart.nullable(core.int)),
    autoUncompress: dart.fieldType(core.bool),
    userAgent: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(http.HttpClient, {
    /*http.HttpClient.defaultHttpPort*/get defaultHttpPort() {
      return 80;
    },
    /*http.HttpClient.DEFAULT_HTTP_PORT*/get DEFAULT_HTTP_PORT() {
      return 80;
    },
    /*http.HttpClient.defaultHttpsPort*/get defaultHttpsPort() {
      return 443;
    },
    /*http.HttpClient.DEFAULT_HTTPS_PORT*/get DEFAULT_HTTPS_PORT() {
      return 443;
    },
    /*http.HttpClient.enableTimelineLogging*/get enableTimelineLogging() {
      return false;
    },
    set enableTimelineLogging(_) {}
  }, false);
  http.HttpClientCredentials = class HttpClientCredentials extends core.Object {};
  (http.HttpClientCredentials.new = function() {
    ;
  }).prototype = http.HttpClientCredentials.prototype;
  dart.addTypeTests(http.HttpClientCredentials);
  dart.addTypeCaches(http.HttpClientCredentials);
  dart.setLibraryUri(http.HttpClientCredentials, I[18]);
  http.HttpClientBasicCredentials = class HttpClientBasicCredentials extends http.HttpClientCredentials {
    static new(username, password) {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  dart.addTypeTests(http.HttpClientBasicCredentials);
  dart.addTypeCaches(http.HttpClientBasicCredentials);
  dart.setLibraryUri(http.HttpClientBasicCredentials, I[18]);
  http.HttpClientDigestCredentials = class HttpClientDigestCredentials extends http.HttpClientCredentials {
    static new(username, password) {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  dart.addTypeTests(http.HttpClientDigestCredentials);
  dart.addTypeCaches(http.HttpClientDigestCredentials);
  dart.setLibraryUri(http.HttpClientDigestCredentials, I[18]);
  http.HttpClientResponse = class HttpClientResponse extends core.Object {};
  (http.HttpClientResponse.new = function() {
    ;
  }).prototype = http.HttpClientResponse.prototype;
  http.HttpClientResponse.prototype[dart.isStream] = true;
  dart.addTypeTests(http.HttpClientResponse);
  dart.addTypeCaches(http.HttpClientResponse);
  http.HttpClientResponse[dart.implements] = () => [async.Stream$(core.List$(core.int))];
  dart.setLibraryUri(http.HttpClientResponse, I[18]);
  var _name$1 = dart.privateName(http, "_name");
  http.HttpClientResponseCompressionState = class HttpClientResponseCompressionState extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (http.HttpClientResponseCompressionState.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = http.HttpClientResponseCompressionState.prototype;
  dart.addTypeTests(http.HttpClientResponseCompressionState);
  dart.addTypeCaches(http.HttpClientResponseCompressionState);
  dart.setLibraryUri(http.HttpClientResponseCompressionState, I[18]);
  dart.setFieldSignature(http.HttpClientResponseCompressionState, () => ({
    __proto__: dart.getFields(http.HttpClientResponseCompressionState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(http.HttpClientResponseCompressionState, ['toString']);
  http.HttpClientResponseCompressionState.notCompressed = C[87] || CT.C87;
  http.HttpClientResponseCompressionState.decompressed = C[88] || CT.C88;
  http.HttpClientResponseCompressionState.compressed = C[89] || CT.C89;
  http.HttpClientResponseCompressionState.values = C[90] || CT.C90;
  http.HttpConnectionInfo = class HttpConnectionInfo extends core.Object {};
  (http.HttpConnectionInfo.new = function() {
    ;
  }).prototype = http.HttpConnectionInfo.prototype;
  dart.addTypeTests(http.HttpConnectionInfo);
  dart.addTypeCaches(http.HttpConnectionInfo);
  dart.setLibraryUri(http.HttpConnectionInfo, I[18]);
  var total = dart.privateName(http, "HttpConnectionsInfo.total");
  var active = dart.privateName(http, "HttpConnectionsInfo.active");
  var idle = dart.privateName(http, "HttpConnectionsInfo.idle");
  var closing = dart.privateName(http, "HttpConnectionsInfo.closing");
  http.HttpConnectionsInfo = class HttpConnectionsInfo extends core.Object {
    get total() {
      return this[total];
    }
    set total(value) {
      this[total] = value;
    }
    get active() {
      return this[active];
    }
    set active(value) {
      this[active] = value;
    }
    get idle() {
      return this[idle];
    }
    set idle(value) {
      this[idle] = value;
    }
    get closing() {
      return this[closing];
    }
    set closing(value) {
      this[closing] = value;
    }
  };
  (http.HttpConnectionsInfo.new = function() {
    this[total] = 0;
    this[active] = 0;
    this[idle] = 0;
    this[closing] = 0;
    ;
  }).prototype = http.HttpConnectionsInfo.prototype;
  dart.addTypeTests(http.HttpConnectionsInfo);
  dart.addTypeCaches(http.HttpConnectionsInfo);
  dart.setLibraryUri(http.HttpConnectionsInfo, I[18]);
  dart.setFieldSignature(http.HttpConnectionsInfo, () => ({
    __proto__: dart.getFields(http.HttpConnectionsInfo.__proto__),
    total: dart.fieldType(core.int),
    active: dart.fieldType(core.int),
    idle: dart.fieldType(core.int),
    closing: dart.fieldType(core.int)
  }));
  var message$6 = dart.privateName(http, "HttpException.message");
  var uri$0 = dart.privateName(http, "HttpException.uri");
  http.HttpException = class HttpException extends core.Object {
    get message() {
      return this[message$6];
    }
    set message(value) {
      super.message = value;
    }
    get uri() {
      return this[uri$0];
    }
    set uri(value) {
      super.uri = value;
    }
    toString() {
      let t3;
      let b = (t3 = new core.StringBuffer.new(), (() => {
        t3.write("HttpException: ");
        t3.write(this.message);
        return t3;
      })());
      let uri = this.uri;
      if (uri != null) {
        b.write(", uri = " + dart.str(uri));
      }
      return b.toString();
    }
  };
  (http.HttpException.new = function(message, opts) {
    let uri = opts && 'uri' in opts ? opts.uri : null;
    this[message$6] = message;
    this[uri$0] = uri;
    ;
  }).prototype = http.HttpException.prototype;
  dart.addTypeTests(http.HttpException);
  dart.addTypeCaches(http.HttpException);
  http.HttpException[dart.implements] = () => [exceptions.IOException];
  dart.setLibraryUri(http.HttpException, I[18]);
  dart.setFieldSignature(http.HttpException, () => ({
    __proto__: dart.getFields(http.HttpException.__proto__),
    message: dart.finalFieldType(core.String),
    uri: dart.finalFieldType(dart.nullable(core.Uri))
  }));
  dart.defineExtensionMethods(http.HttpException, ['toString']);
  var date = dart.privateName(http, "HttpHeaders.date");
  var expires$ = dart.privateName(http, "HttpHeaders.expires");
  var ifModifiedSince = dart.privateName(http, "HttpHeaders.ifModifiedSince");
  var host = dart.privateName(http, "HttpHeaders.host");
  var port$1 = dart.privateName(http, "HttpHeaders.port");
  var contentType = dart.privateName(http, "HttpHeaders.contentType");
  var contentLength$ = dart.privateName(http, "HttpHeaders.contentLength");
  var __HttpHeaders_persistentConnection = dart.privateName(http, "_#HttpHeaders#persistentConnection");
  var __HttpHeaders_chunkedTransferEncoding = dart.privateName(http, "_#HttpHeaders#chunkedTransferEncoding");
  http.HttpHeaders = class HttpHeaders extends core.Object {
    get date() {
      return this[date];
    }
    set date(value) {
      this[date] = value;
    }
    get expires() {
      return this[expires$];
    }
    set expires(value) {
      this[expires$] = value;
    }
    get ifModifiedSince() {
      return this[ifModifiedSince];
    }
    set ifModifiedSince(value) {
      this[ifModifiedSince] = value;
    }
    get host() {
      return this[host];
    }
    set host(value) {
      this[host] = value;
    }
    get port() {
      return this[port$1];
    }
    set port(value) {
      this[port$1] = value;
    }
    get contentType() {
      return this[contentType];
    }
    set contentType(value) {
      this[contentType] = value;
    }
    get contentLength() {
      return this[contentLength$];
    }
    set contentLength(value) {
      this[contentLength$] = value;
    }
    get persistentConnection() {
      let t3;
      t3 = this[__HttpHeaders_persistentConnection];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("persistentConnection")) : t3;
    }
    set persistentConnection(t3) {
      this[__HttpHeaders_persistentConnection] = t3;
    }
    get chunkedTransferEncoding() {
      let t4;
      t4 = this[__HttpHeaders_chunkedTransferEncoding];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("chunkedTransferEncoding")) : t4;
    }
    set chunkedTransferEncoding(t4) {
      this[__HttpHeaders_chunkedTransferEncoding] = t4;
    }
  };
  (http.HttpHeaders.new = function() {
    this[date] = null;
    this[expires$] = null;
    this[ifModifiedSince] = null;
    this[host] = null;
    this[port$1] = null;
    this[contentType] = null;
    this[contentLength$] = -1;
    this[__HttpHeaders_persistentConnection] = null;
    this[__HttpHeaders_chunkedTransferEncoding] = null;
    ;
  }).prototype = http.HttpHeaders.prototype;
  dart.addTypeTests(http.HttpHeaders);
  dart.addTypeCaches(http.HttpHeaders);
  dart.setGetterSignature(http.HttpHeaders, () => ({
    __proto__: dart.getGetters(http.HttpHeaders.__proto__),
    persistentConnection: core.bool,
    chunkedTransferEncoding: core.bool
  }));
  dart.setSetterSignature(http.HttpHeaders, () => ({
    __proto__: dart.getSetters(http.HttpHeaders.__proto__),
    persistentConnection: core.bool,
    chunkedTransferEncoding: core.bool
  }));
  dart.setLibraryUri(http.HttpHeaders, I[18]);
  dart.setFieldSignature(http.HttpHeaders, () => ({
    __proto__: dart.getFields(http.HttpHeaders.__proto__),
    date: dart.fieldType(dart.nullable(core.DateTime)),
    expires: dart.fieldType(dart.nullable(core.DateTime)),
    ifModifiedSince: dart.fieldType(dart.nullable(core.DateTime)),
    host: dart.fieldType(dart.nullable(core.String)),
    port: dart.fieldType(dart.nullable(core.int)),
    contentType: dart.fieldType(dart.nullable(http.ContentType)),
    contentLength: dart.fieldType(core.int),
    [__HttpHeaders_persistentConnection]: dart.fieldType(dart.nullable(core.bool)),
    [__HttpHeaders_chunkedTransferEncoding]: dart.fieldType(dart.nullable(core.bool))
  }));
  dart.defineLazy(http.HttpHeaders, {
    /*http.HttpHeaders.acceptHeader*/get acceptHeader() {
      return "accept";
    },
    /*http.HttpHeaders.acceptCharsetHeader*/get acceptCharsetHeader() {
      return "accept-charset";
    },
    /*http.HttpHeaders.acceptEncodingHeader*/get acceptEncodingHeader() {
      return "accept-encoding";
    },
    /*http.HttpHeaders.acceptLanguageHeader*/get acceptLanguageHeader() {
      return "accept-language";
    },
    /*http.HttpHeaders.acceptRangesHeader*/get acceptRangesHeader() {
      return "accept-ranges";
    },
    /*http.HttpHeaders.ageHeader*/get ageHeader() {
      return "age";
    },
    /*http.HttpHeaders.allowHeader*/get allowHeader() {
      return "allow";
    },
    /*http.HttpHeaders.authorizationHeader*/get authorizationHeader() {
      return "authorization";
    },
    /*http.HttpHeaders.cacheControlHeader*/get cacheControlHeader() {
      return "cache-control";
    },
    /*http.HttpHeaders.connectionHeader*/get connectionHeader() {
      return "connection";
    },
    /*http.HttpHeaders.contentEncodingHeader*/get contentEncodingHeader() {
      return "content-encoding";
    },
    /*http.HttpHeaders.contentLanguageHeader*/get contentLanguageHeader() {
      return "content-language";
    },
    /*http.HttpHeaders.contentLengthHeader*/get contentLengthHeader() {
      return "content-length";
    },
    /*http.HttpHeaders.contentLocationHeader*/get contentLocationHeader() {
      return "content-location";
    },
    /*http.HttpHeaders.contentMD5Header*/get contentMD5Header() {
      return "content-md5";
    },
    /*http.HttpHeaders.contentRangeHeader*/get contentRangeHeader() {
      return "content-range";
    },
    /*http.HttpHeaders.contentTypeHeader*/get contentTypeHeader() {
      return "content-type";
    },
    /*http.HttpHeaders.dateHeader*/get dateHeader() {
      return "date";
    },
    /*http.HttpHeaders.etagHeader*/get etagHeader() {
      return "etag";
    },
    /*http.HttpHeaders.expectHeader*/get expectHeader() {
      return "expect";
    },
    /*http.HttpHeaders.expiresHeader*/get expiresHeader() {
      return "expires";
    },
    /*http.HttpHeaders.fromHeader*/get fromHeader() {
      return "from";
    },
    /*http.HttpHeaders.hostHeader*/get hostHeader() {
      return "host";
    },
    /*http.HttpHeaders.ifMatchHeader*/get ifMatchHeader() {
      return "if-match";
    },
    /*http.HttpHeaders.ifModifiedSinceHeader*/get ifModifiedSinceHeader() {
      return "if-modified-since";
    },
    /*http.HttpHeaders.ifNoneMatchHeader*/get ifNoneMatchHeader() {
      return "if-none-match";
    },
    /*http.HttpHeaders.ifRangeHeader*/get ifRangeHeader() {
      return "if-range";
    },
    /*http.HttpHeaders.ifUnmodifiedSinceHeader*/get ifUnmodifiedSinceHeader() {
      return "if-unmodified-since";
    },
    /*http.HttpHeaders.lastModifiedHeader*/get lastModifiedHeader() {
      return "last-modified";
    },
    /*http.HttpHeaders.locationHeader*/get locationHeader() {
      return "location";
    },
    /*http.HttpHeaders.maxForwardsHeader*/get maxForwardsHeader() {
      return "max-forwards";
    },
    /*http.HttpHeaders.pragmaHeader*/get pragmaHeader() {
      return "pragma";
    },
    /*http.HttpHeaders.proxyAuthenticateHeader*/get proxyAuthenticateHeader() {
      return "proxy-authenticate";
    },
    /*http.HttpHeaders.proxyAuthorizationHeader*/get proxyAuthorizationHeader() {
      return "proxy-authorization";
    },
    /*http.HttpHeaders.rangeHeader*/get rangeHeader() {
      return "range";
    },
    /*http.HttpHeaders.refererHeader*/get refererHeader() {
      return "referer";
    },
    /*http.HttpHeaders.retryAfterHeader*/get retryAfterHeader() {
      return "retry-after";
    },
    /*http.HttpHeaders.serverHeader*/get serverHeader() {
      return "server";
    },
    /*http.HttpHeaders.teHeader*/get teHeader() {
      return "te";
    },
    /*http.HttpHeaders.trailerHeader*/get trailerHeader() {
      return "trailer";
    },
    /*http.HttpHeaders.transferEncodingHeader*/get transferEncodingHeader() {
      return "transfer-encoding";
    },
    /*http.HttpHeaders.upgradeHeader*/get upgradeHeader() {
      return "upgrade";
    },
    /*http.HttpHeaders.userAgentHeader*/get userAgentHeader() {
      return "user-agent";
    },
    /*http.HttpHeaders.varyHeader*/get varyHeader() {
      return "vary";
    },
    /*http.HttpHeaders.viaHeader*/get viaHeader() {
      return "via";
    },
    /*http.HttpHeaders.warningHeader*/get warningHeader() {
      return "warning";
    },
    /*http.HttpHeaders.wwwAuthenticateHeader*/get wwwAuthenticateHeader() {
      return "www-authenticate";
    },
    /*http.HttpHeaders.ACCEPT*/get ACCEPT() {
      return "accept";
    },
    /*http.HttpHeaders.ACCEPT_CHARSET*/get ACCEPT_CHARSET() {
      return "accept-charset";
    },
    /*http.HttpHeaders.ACCEPT_ENCODING*/get ACCEPT_ENCODING() {
      return "accept-encoding";
    },
    /*http.HttpHeaders.ACCEPT_LANGUAGE*/get ACCEPT_LANGUAGE() {
      return "accept-language";
    },
    /*http.HttpHeaders.ACCEPT_RANGES*/get ACCEPT_RANGES() {
      return "accept-ranges";
    },
    /*http.HttpHeaders.AGE*/get AGE() {
      return "age";
    },
    /*http.HttpHeaders.ALLOW*/get ALLOW() {
      return "allow";
    },
    /*http.HttpHeaders.AUTHORIZATION*/get AUTHORIZATION() {
      return "authorization";
    },
    /*http.HttpHeaders.CACHE_CONTROL*/get CACHE_CONTROL() {
      return "cache-control";
    },
    /*http.HttpHeaders.CONNECTION*/get CONNECTION() {
      return "connection";
    },
    /*http.HttpHeaders.CONTENT_ENCODING*/get CONTENT_ENCODING() {
      return "content-encoding";
    },
    /*http.HttpHeaders.CONTENT_LANGUAGE*/get CONTENT_LANGUAGE() {
      return "content-language";
    },
    /*http.HttpHeaders.CONTENT_LENGTH*/get CONTENT_LENGTH() {
      return "content-length";
    },
    /*http.HttpHeaders.CONTENT_LOCATION*/get CONTENT_LOCATION() {
      return "content-location";
    },
    /*http.HttpHeaders.CONTENT_MD5*/get CONTENT_MD5() {
      return "content-md5";
    },
    /*http.HttpHeaders.CONTENT_RANGE*/get CONTENT_RANGE() {
      return "content-range";
    },
    /*http.HttpHeaders.CONTENT_TYPE*/get CONTENT_TYPE() {
      return "content-type";
    },
    /*http.HttpHeaders.DATE*/get DATE() {
      return "date";
    },
    /*http.HttpHeaders.ETAG*/get ETAG() {
      return "etag";
    },
    /*http.HttpHeaders.EXPECT*/get EXPECT() {
      return "expect";
    },
    /*http.HttpHeaders.EXPIRES*/get EXPIRES() {
      return "expires";
    },
    /*http.HttpHeaders.FROM*/get FROM() {
      return "from";
    },
    /*http.HttpHeaders.HOST*/get HOST() {
      return "host";
    },
    /*http.HttpHeaders.IF_MATCH*/get IF_MATCH() {
      return "if-match";
    },
    /*http.HttpHeaders.IF_MODIFIED_SINCE*/get IF_MODIFIED_SINCE() {
      return "if-modified-since";
    },
    /*http.HttpHeaders.IF_NONE_MATCH*/get IF_NONE_MATCH() {
      return "if-none-match";
    },
    /*http.HttpHeaders.IF_RANGE*/get IF_RANGE() {
      return "if-range";
    },
    /*http.HttpHeaders.IF_UNMODIFIED_SINCE*/get IF_UNMODIFIED_SINCE() {
      return "if-unmodified-since";
    },
    /*http.HttpHeaders.LAST_MODIFIED*/get LAST_MODIFIED() {
      return "last-modified";
    },
    /*http.HttpHeaders.LOCATION*/get LOCATION() {
      return "location";
    },
    /*http.HttpHeaders.MAX_FORWARDS*/get MAX_FORWARDS() {
      return "max-forwards";
    },
    /*http.HttpHeaders.PRAGMA*/get PRAGMA() {
      return "pragma";
    },
    /*http.HttpHeaders.PROXY_AUTHENTICATE*/get PROXY_AUTHENTICATE() {
      return "proxy-authenticate";
    },
    /*http.HttpHeaders.PROXY_AUTHORIZATION*/get PROXY_AUTHORIZATION() {
      return "proxy-authorization";
    },
    /*http.HttpHeaders.RANGE*/get RANGE() {
      return "range";
    },
    /*http.HttpHeaders.REFERER*/get REFERER() {
      return "referer";
    },
    /*http.HttpHeaders.RETRY_AFTER*/get RETRY_AFTER() {
      return "retry-after";
    },
    /*http.HttpHeaders.SERVER*/get SERVER() {
      return "server";
    },
    /*http.HttpHeaders.TE*/get TE() {
      return "te";
    },
    /*http.HttpHeaders.TRAILER*/get TRAILER() {
      return "trailer";
    },
    /*http.HttpHeaders.TRANSFER_ENCODING*/get TRANSFER_ENCODING() {
      return "transfer-encoding";
    },
    /*http.HttpHeaders.UPGRADE*/get UPGRADE() {
      return "upgrade";
    },
    /*http.HttpHeaders.USER_AGENT*/get USER_AGENT() {
      return "user-agent";
    },
    /*http.HttpHeaders.VARY*/get VARY() {
      return "vary";
    },
    /*http.HttpHeaders.VIA*/get VIA() {
      return "via";
    },
    /*http.HttpHeaders.WARNING*/get WARNING() {
      return "warning";
    },
    /*http.HttpHeaders.WWW_AUTHENTICATE*/get WWW_AUTHENTICATE() {
      return "www-authenticate";
    },
    /*http.HttpHeaders.cookieHeader*/get cookieHeader() {
      return "cookie";
    },
    /*http.HttpHeaders.setCookieHeader*/get setCookieHeader() {
      return "set-cookie";
    },
    /*http.HttpHeaders.COOKIE*/get COOKIE() {
      return "cookie";
    },
    /*http.HttpHeaders.SET_COOKIE*/get SET_COOKIE() {
      return "set-cookie";
    },
    /*http.HttpHeaders.generalHeaders*/get generalHeaders() {
      return C[91] || CT.C91;
    },
    /*http.HttpHeaders.GENERAL_HEADERS*/get GENERAL_HEADERS() {
      return C[91] || CT.C91;
    },
    /*http.HttpHeaders.entityHeaders*/get entityHeaders() {
      return C[92] || CT.C92;
    },
    /*http.HttpHeaders.ENTITY_HEADERS*/get ENTITY_HEADERS() {
      return C[92] || CT.C92;
    },
    /*http.HttpHeaders.responseHeaders*/get responseHeaders() {
      return C[93] || CT.C93;
    },
    /*http.HttpHeaders.RESPONSE_HEADERS*/get RESPONSE_HEADERS() {
      return C[93] || CT.C93;
    },
    /*http.HttpHeaders.requestHeaders*/get requestHeaders() {
      return C[94] || CT.C94;
    },
    /*http.HttpHeaders.REQUEST_HEADERS*/get REQUEST_HEADERS() {
      return C[94] || CT.C94;
    }
  }, false);
  http.HttpRequest = class HttpRequest extends core.Object {};
  (http.HttpRequest.new = function() {
    ;
  }).prototype = http.HttpRequest.prototype;
  http.HttpRequest.prototype[dart.isStream] = true;
  dart.addTypeTests(http.HttpRequest);
  dart.addTypeCaches(http.HttpRequest);
  http.HttpRequest[dart.implements] = () => [async.Stream$(typed_data.Uint8List)];
  dart.setLibraryUri(http.HttpRequest, I[18]);
  var contentLength$0 = dart.privateName(http, "HttpResponse.contentLength");
  var statusCode = dart.privateName(http, "HttpResponse.statusCode");
  var deadline = dart.privateName(http, "HttpResponse.deadline");
  var bufferOutput$ = dart.privateName(http, "HttpResponse.bufferOutput");
  var __HttpResponse_reasonPhrase = dart.privateName(http, "_#HttpResponse#reasonPhrase");
  var __HttpResponse_persistentConnection = dart.privateName(http, "_#HttpResponse#persistentConnection");
  http.HttpResponse = class HttpResponse extends core.Object {
    get contentLength() {
      return this[contentLength$0];
    }
    set contentLength(value) {
      this[contentLength$0] = value;
    }
    get statusCode() {
      return this[statusCode];
    }
    set statusCode(value) {
      this[statusCode] = value;
    }
    get deadline() {
      return this[deadline];
    }
    set deadline(value) {
      this[deadline] = value;
    }
    get bufferOutput() {
      return this[bufferOutput$];
    }
    set bufferOutput(value) {
      this[bufferOutput$] = value;
    }
    get reasonPhrase() {
      let t5;
      t5 = this[__HttpResponse_reasonPhrase];
      return t5 == null ? dart.throw(new _internal.LateError.fieldNI("reasonPhrase")) : t5;
    }
    set reasonPhrase(t5) {
      this[__HttpResponse_reasonPhrase] = t5;
    }
    get persistentConnection() {
      let t6;
      t6 = this[__HttpResponse_persistentConnection];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("persistentConnection")) : t6;
    }
    set persistentConnection(t6) {
      this[__HttpResponse_persistentConnection] = t6;
    }
  };
  (http.HttpResponse.new = function() {
    this[contentLength$0] = -1;
    this[statusCode] = 200;
    this[__HttpResponse_reasonPhrase] = null;
    this[__HttpResponse_persistentConnection] = null;
    this[deadline] = null;
    this[bufferOutput$] = true;
    ;
  }).prototype = http.HttpResponse.prototype;
  dart.addTypeTests(http.HttpResponse);
  dart.addTypeCaches(http.HttpResponse);
  http.HttpResponse[dart.implements] = () => [io_sink.IOSink];
  dart.setGetterSignature(http.HttpResponse, () => ({
    __proto__: dart.getGetters(http.HttpResponse.__proto__),
    reasonPhrase: core.String,
    persistentConnection: core.bool
  }));
  dart.setSetterSignature(http.HttpResponse, () => ({
    __proto__: dart.getSetters(http.HttpResponse.__proto__),
    reasonPhrase: core.String,
    persistentConnection: core.bool
  }));
  dart.setLibraryUri(http.HttpResponse, I[18]);
  dart.setFieldSignature(http.HttpResponse, () => ({
    __proto__: dart.getFields(http.HttpResponse.__proto__),
    contentLength: dart.fieldType(core.int),
    statusCode: dart.fieldType(core.int),
    [__HttpResponse_reasonPhrase]: dart.fieldType(dart.nullable(core.String)),
    [__HttpResponse_persistentConnection]: dart.fieldType(dart.nullable(core.bool)),
    deadline: dart.fieldType(dart.nullable(core.Duration)),
    bufferOutput: dart.fieldType(core.bool)
  }));
  var serverHeader = dart.privateName(http, "HttpServer.serverHeader");
  var autoCompress = dart.privateName(http, "HttpServer.autoCompress");
  var idleTimeout$0 = dart.privateName(http, "HttpServer.idleTimeout");
  http.HttpServer = class HttpServer extends core.Object {
    get serverHeader() {
      return this[serverHeader];
    }
    set serverHeader(value) {
      this[serverHeader] = value;
    }
    get autoCompress() {
      return this[autoCompress];
    }
    set autoCompress(value) {
      this[autoCompress] = value;
    }
    get idleTimeout() {
      return this[idleTimeout$0];
    }
    set idleTimeout(value) {
      this[idleTimeout$0] = value;
    }
    static listenOn(serverSocket) {
      return dart.throw(new core.UnimplementedError.new());
    }
    static bind(address, port, opts) {
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      return dart.throw(new core.UnimplementedError.new());
    }
    static bindSecure(address, port, context, opts) {
      let backlog = opts && 'backlog' in opts ? opts.backlog : 0;
      let v6Only = opts && 'v6Only' in opts ? opts.v6Only : false;
      let requestClientCertificate = opts && 'requestClientCertificate' in opts ? opts.requestClientCertificate : false;
      let shared = opts && 'shared' in opts ? opts.shared : false;
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (http.HttpServer[dart.mixinNew] = function() {
    this[serverHeader] = null;
    this[autoCompress] = false;
    this[idleTimeout$0] = C[95] || CT.C95;
  }).prototype = http.HttpServer.prototype;
  http.HttpServer.prototype[dart.isStream] = true;
  dart.addTypeTests(http.HttpServer);
  dart.addTypeCaches(http.HttpServer);
  http.HttpServer[dart.implements] = () => [async.Stream$(http.HttpRequest)];
  dart.setLibraryUri(http.HttpServer, I[18]);
  dart.setFieldSignature(http.HttpServer, () => ({
    __proto__: dart.getFields(http.HttpServer.__proto__),
    serverHeader: dart.fieldType(dart.nullable(core.String)),
    autoCompress: dart.fieldType(core.bool),
    idleTimeout: dart.fieldType(dart.nullable(core.Duration))
  }));
  http.HttpSession = class HttpSession extends core.Object {};
  (http.HttpSession.new = function() {
    ;
  }).prototype = http.HttpSession.prototype;
  http.HttpSession.prototype[dart.isMap] = true;
  dart.addTypeTests(http.HttpSession);
  dart.addTypeCaches(http.HttpSession);
  http.HttpSession[dart.implements] = () => [core.Map];
  dart.setLibraryUri(http.HttpSession, I[18]);
  var message$7 = dart.privateName(http, "RedirectException.message");
  var redirects$ = dart.privateName(http, "RedirectException.redirects");
  http.RedirectException = class RedirectException extends core.Object {
    get message() {
      return this[message$7];
    }
    set message(value) {
      super.message = value;
    }
    get redirects() {
      return this[redirects$];
    }
    set redirects(value) {
      super.redirects = value;
    }
    get uri() {
      return this.redirects[$last].location;
    }
    toString() {
      return "RedirectException: " + this.message;
    }
  };
  (http.RedirectException.new = function(message, redirects) {
    this[message$7] = message;
    this[redirects$] = redirects;
    ;
  }).prototype = http.RedirectException.prototype;
  dart.addTypeTests(http.RedirectException);
  dart.addTypeCaches(http.RedirectException);
  http.RedirectException[dart.implements] = () => [http.HttpException];
  dart.setGetterSignature(http.RedirectException, () => ({
    __proto__: dart.getGetters(http.RedirectException.__proto__),
    uri: core.Uri
  }));
  dart.setLibraryUri(http.RedirectException, I[18]);
  dart.setFieldSignature(http.RedirectException, () => ({
    __proto__: dart.getFields(http.RedirectException.__proto__),
    message: dart.finalFieldType(core.String),
    redirects: dart.finalFieldType(core.List$(http.RedirectInfo))
  }));
  dart.defineExtensionMethods(http.RedirectException, ['toString']);
  http.RedirectInfo = class RedirectInfo extends core.Object {};
  (http.RedirectInfo.new = function() {
    ;
  }).prototype = http.RedirectInfo.prototype;
  dart.addTypeTests(http.RedirectInfo);
  dart.addTypeCaches(http.RedirectInfo);
  dart.setLibraryUri(http.RedirectInfo, I[18]);
  http._CryptoUtils = class _CryptoUtils extends core.Object {
    static bytesToHex(bytes) {
      let result = new core.StringBuffer.new();
      for (let part of bytes) {
        result.write((part < 16 ? "0" : "") + part[$toRadixString](16));
      }
      return result.toString();
    }
    static getRandomBytes(count) {
      let result = _native_typed_data.NativeUint8List.new(count);
      for (let i = 0; i < count; i = i + 1) {
        result[$_set](i, http._CryptoUtils._rng.nextInt(255));
      }
      return result;
    }
  };
  (http._CryptoUtils.new = function() {
    ;
  }).prototype = http._CryptoUtils.prototype;
  dart.addTypeTests(http._CryptoUtils);
  dart.addTypeCaches(http._CryptoUtils);
  dart.setLibraryUri(http._CryptoUtils, I[18]);
  dart.defineLazy(http._CryptoUtils, {
    /*http._CryptoUtils._rng*/get _rng() {
      return math.Random.secure();
    }
  }, false);
  http.HttpDate = class HttpDate extends core.Object {
    static format(date) {
      let t7;
      let wkday = C[96] || CT.C96;
      let month = C[97] || CT.C97;
      let d = date.toUtc();
      let sb = (t7 = new core.StringBuffer.new(), (() => {
        t7.write(wkday[$_get](d.weekday - 1));
        t7.write(", ");
        t7.write(d.day <= 9 ? "0" : "");
        t7.write(d.day[$toString]());
        t7.write(" ");
        t7.write(month[$_get](d.month - 1));
        t7.write(" ");
        t7.write(d.year[$toString]());
        t7.write(d.hour <= 9 ? " 0" : " ");
        t7.write(d.hour[$toString]());
        t7.write(d.minute <= 9 ? ":0" : ":");
        t7.write(d.minute[$toString]());
        t7.write(d.second <= 9 ? ":0" : ":");
        t7.write(d.second[$toString]());
        t7.write(" GMT");
        return t7;
      })());
      return sb.toString();
    }
    static parse(date) {
      let wkdays = C[96] || CT.C96;
      let weekdays = C[98] || CT.C98;
      let months = C[97] || CT.C97;
      let formatRfc1123 = 0;
      let formatRfc850 = 1;
      let formatAsctime = 2;
      let index = 0;
      let tmp = null;
      let format = null;
      function expect(s) {
        if (dart.nullCheck(date).length - index < s.length) {
          dart.throw(new http.HttpException.new("Invalid HTTP date " + dart.str(date)));
        }
        let tmp = date[$substring](index, index + s.length);
        if (tmp !== s) {
          dart.throw(new http.HttpException.new("Invalid HTTP date " + dart.str(date)));
        }
        index = index + s.length;
      }
      dart.fn(expect, T.StringTovoid());
      function expectWeekday() {
        let weekday = null;
        let pos = dart.nullCheck(date)[$indexOf](",", index);
        if (pos === -1) {
          let pos = date[$indexOf](" ", index);
          if (pos === -1) dart.throw(new http.HttpException.new("Invalid HTTP date " + dart.str(date)));
          tmp = date[$substring](index, pos);
          index = pos + 1;
          weekday = wkdays[$indexOf](tmp);
          if (weekday !== -1) {
            format = formatAsctime;
            return weekday;
          }
        } else {
          tmp = date[$substring](index, pos);
          index = pos + 1;
          weekday = wkdays[$indexOf](tmp);
          if (weekday !== -1) {
            format = formatRfc1123;
            return weekday;
          }
          weekday = weekdays[$indexOf](tmp);
          if (weekday !== -1) {
            format = formatRfc850;
            return weekday;
          }
        }
        dart.throw(new http.HttpException.new("Invalid HTTP date " + dart.str(date)));
      }
      dart.fn(expectWeekday, T.VoidToint());
      function expectMonth(separator) {
        let pos = dart.nullCheck(date)[$indexOf](separator, index);
        if (pos - index !== 3) dart.throw(new http.HttpException.new("Invalid HTTP date " + dart.str(date)));
        tmp = date[$substring](index, pos);
        index = pos + 1;
        let month = months[$indexOf](tmp);
        if (month !== -1) return month;
        dart.throw(new http.HttpException.new("Invalid HTTP date " + dart.str(date)));
      }
      dart.fn(expectMonth, T.StringToint());
      function expectNum(separator) {
        let pos = null;
        if (separator[$isNotEmpty]) {
          pos = dart.nullCheck(date)[$indexOf](separator, index);
        } else {
          pos = dart.nullCheck(date).length;
        }
        let tmp = date[$substring](index, pos);
        index = pos + separator.length;
        try {
          let value = core.int.parse(tmp);
          return value;
        } catch (e) {
          let ex = dart.getThrown(e);
          if (core.FormatException.is(ex)) {
            dart.throw(new http.HttpException.new("Invalid HTTP date " + dart.str(date)));
          } else
            throw e;
        }
      }
      dart.fn(expectNum, T.StringToint());
      function expectEnd() {
        if (index !== dart.nullCheck(date).length) {
          dart.throw(new http.HttpException.new("Invalid HTTP date " + dart.str(date)));
        }
      }
      dart.fn(expectEnd, T.VoidTovoid());
      expectWeekday();
      let day = null;
      let month = null;
      let year = null;
      let hours = null;
      let minutes = null;
      let seconds = null;
      if (format === formatAsctime) {
        month = expectMonth(" ");
        if (dart.nullCheck(date)[$codeUnitAt](index) === 32) index = index + 1;
        day = expectNum(" ");
        hours = expectNum(":");
        minutes = expectNum(":");
        seconds = expectNum(" ");
        year = expectNum("");
      } else {
        expect(" ");
        day = expectNum(format === formatRfc1123 ? " " : "-");
        month = expectMonth(format === formatRfc1123 ? " " : "-");
        year = expectNum(" ");
        hours = expectNum(":");
        minutes = expectNum(":");
        seconds = expectNum(" ");
        expect("GMT");
      }
      expectEnd();
      return new core.DateTime.utc(year, month + 1, day, hours, minutes, seconds, 0);
    }
    static _parseCookieDate(date) {
      let monthsLowerCase = C[99] || CT.C99;
      let position = 0;
      function error() {
        dart.throw(new http.HttpException.new("Invalid cookie date " + date));
      }
      dart.fn(error, T.VoidTovoid());
      function isEnd() {
        return position === date.length;
      }
      dart.fn(isEnd, T.VoidTobool());
      function isDelimiter(s) {
        let char = s[$codeUnitAt](0);
        if (char === 9) return true;
        if (char >= 32 && char <= 47) return true;
        if (char >= 59 && char <= 64) return true;
        if (char >= 91 && char <= 96) return true;
        if (char >= 123 && char <= 126) return true;
        return false;
      }
      dart.fn(isDelimiter, T.StringTobool());
      function isNonDelimiter(s) {
        let char = s[$codeUnitAt](0);
        if (char >= 0 && char <= 8) return true;
        if (char >= 10 && char <= 31) return true;
        if (char >= 48 && char <= 57) return true;
        if (char === 58) return true;
        if (char >= 65 && char <= 90) return true;
        if (char >= 97 && char <= 122) return true;
        if (char >= 127 && char <= 255) return true;
        return false;
      }
      dart.fn(isNonDelimiter, T.StringTobool());
      function isDigit(s) {
        let char = s[$codeUnitAt](0);
        if (char > 47 && char < 58) return true;
        return false;
      }
      dart.fn(isDigit, T.StringTobool());
      function getMonth(month) {
        if (month.length < 3) return -1;
        return monthsLowerCase[$indexOf](month[$substring](0, 3));
      }
      dart.fn(getMonth, T.StringToint());
      function toInt(s) {
        let index = 0;
        for (; index < s.length && isDigit(s[$_get](index)); index = index + 1) {
        }
        return core.int.parse(s[$substring](0, index));
      }
      dart.fn(toInt, T.StringToint());
      let tokens = [];
      while (!isEnd()) {
        while (!isEnd() && isDelimiter(date[$_get](position))) {
          position = position + 1;
        }
        let start = position;
        while (!isEnd() && isNonDelimiter(date[$_get](position))) {
          position = position + 1;
        }
        tokens[$add](date[$substring](start, position)[$toLowerCase]());
        while (!isEnd() && isDelimiter(date[$_get](position))) {
          position = position + 1;
        }
      }
      let timeStr = null;
      let dayOfMonthStr = null;
      let monthStr = null;
      let yearStr = null;
      for (let token of tokens) {
        if (dart.dtest(dart.dsend(dart.dload(token, 'length'), '<', [1]))) continue;
        if (timeStr == null && dart.dtest(dart.dsend(dart.dload(token, 'length'), '>=', [5])) && isDigit(core.String.as(dart.dsend(token, '_get', [0]))) && (dart.equals(dart.dsend(token, '_get', [1]), ":") || isDigit(core.String.as(dart.dsend(token, '_get', [1]))) && dart.equals(dart.dsend(token, '_get', [2]), ":"))) {
          timeStr = T.StringN().as(token);
        } else if (dayOfMonthStr == null && isDigit(core.String.as(dart.dsend(token, '_get', [0])))) {
          dayOfMonthStr = T.StringN().as(token);
        } else if (monthStr == null && getMonth(core.String.as(token)) >= 0) {
          monthStr = T.StringN().as(token);
        } else if (yearStr == null && dart.dtest(dart.dsend(dart.dload(token, 'length'), '>=', [2])) && isDigit(core.String.as(dart.dsend(token, '_get', [0]))) && isDigit(core.String.as(dart.dsend(token, '_get', [1])))) {
          yearStr = T.StringN().as(token);
        }
      }
      if (timeStr == null || dayOfMonthStr == null || monthStr == null || yearStr == null) {
        error();
      }
      let year = toInt(dart.nullCheck(yearStr));
      if (year >= 70 && year <= 99) {
        year = year + 1900;
      } else if (year >= 0 && year <= 69) year = year + 2000;
      if (year < 1601) error();
      let dayOfMonth = toInt(dart.nullCheck(dayOfMonthStr));
      if (dayOfMonth < 1 || dayOfMonth > 31) error();
      let month = getMonth(dart.nullCheck(monthStr)) + 1;
      let timeList = dart.nullCheck(timeStr)[$split](":");
      if (timeList[$length] !== 3) error();
      let hour = toInt(timeList[$_get](0));
      let minute = toInt(timeList[$_get](1));
      let second = toInt(timeList[$_get](2));
      if (hour > 23) error();
      if (minute > 59) error();
      if (second > 59) error();
      return new core.DateTime.utc(year, month, dayOfMonth, hour, minute, second, 0);
    }
  };
  (http.HttpDate.new = function() {
    ;
  }).prototype = http.HttpDate.prototype;
  dart.addTypeTests(http.HttpDate);
  dart.addTypeCaches(http.HttpDate);
  dart.setLibraryUri(http.HttpDate, I[18]);
  var protocolVersion$ = dart.privateName(http, "HttpHeadersImpl.protocolVersion");
  var _originalHeaderNames = dart.privateName(http, "_originalHeaderNames");
  var _mutable = dart.privateName(http, "_mutable");
  var _noFoldingHeaders = dart.privateName(http, "_noFoldingHeaders");
  var _contentLength = dart.privateName(http, "_contentLength");
  var _persistentConnection = dart.privateName(http, "_persistentConnection");
  var _chunkedTransferEncoding = dart.privateName(http, "_chunkedTransferEncoding");
  var _host = dart.privateName(http, "_host");
  var _port = dart.privateName(http, "_port");
  var _headers = dart.privateName(http, "_headers");
  var _defaultPortForScheme = dart.privateName(http, "_defaultPortForScheme");
  var _checkMutable = dart.privateName(http, "_checkMutable");
  var _addValue = dart.privateName(http, "_addValue");
  var _set = dart.privateName(http, "_set");
  var _updateHostHeader = dart.privateName(http, "_updateHostHeader");
  var _originalHeaderName = dart.privateName(http, "_originalHeaderName");
  var _addAll = dart.privateName(http, "_addAll");
  var _valueToString = dart.privateName(http, "_valueToString");
  var _foldHeader = dart.privateName(http, "_foldHeader");
  var _addDate = dart.privateName(http, "_addDate");
  var _addHost = dart.privateName(http, "_addHost");
  var _addExpires = dart.privateName(http, "_addExpires");
  var _addConnection = dart.privateName(http, "_addConnection");
  var _addContentType = dart.privateName(http, "_addContentType");
  var _addContentLength = dart.privateName(http, "_addContentLength");
  var _addTransferEncoding = dart.privateName(http, "_addTransferEncoding");
  var _addIfModifiedSince = dart.privateName(http, "_addIfModifiedSince");
  var _add = dart.privateName(http, "_add");
  http.HttpHeadersImpl = class HttpHeadersImpl extends core.Object {
    get protocolVersion() {
      return this[protocolVersion$];
    }
    set protocolVersion(value) {
      super.protocolVersion = value;
    }
    get chunkedTransferEncoding() {
      return this[_chunkedTransferEncoding];
    }
    set chunkedTransferEncoding(chunkedTransferEncoding) {
      this[_checkMutable]();
      if (chunkedTransferEncoding && this.protocolVersion === "1.0") {
        dart.throw(new http.HttpException.new("Trying to set 'Transfer-Encoding: Chunked' on HTTP 1.0 headers"));
      }
      if (chunkedTransferEncoding === this[_chunkedTransferEncoding]) return;
      if (chunkedTransferEncoding) {
        let values = this[_headers][$_get]("transfer-encoding");
        if (values == null || !values[$contains]("chunked")) {
          this[_addValue]("transfer-encoding", "chunked");
        }
        this.contentLength = -1;
      } else {
        this.remove("transfer-encoding", "chunked");
      }
      this[_chunkedTransferEncoding] = chunkedTransferEncoding;
    }
    get contentLength() {
      return this[_contentLength];
    }
    set contentLength(contentLength) {
      this[_checkMutable]();
      if (this.protocolVersion === "1.0" && this.persistentConnection && contentLength === -1) {
        dart.throw(new http.HttpException.new("Trying to clear ContentLength on HTTP 1.0 headers with " + "'Connection: Keep-Alive' set"));
      }
      if (this[_contentLength] === contentLength) return;
      this[_contentLength] = contentLength;
      if (this[_contentLength] >= 0) {
        if (this.chunkedTransferEncoding) this.chunkedTransferEncoding = false;
        this[_set]("content-length", contentLength[$toString]());
      } else {
        this[_headers][$remove]("content-length");
        if (this.protocolVersion === "1.1") {
          this.chunkedTransferEncoding = true;
        }
      }
    }
    get contentType() {
      let values = this[_headers][$_get]("content-type");
      if (values != null) {
        return http.ContentType.parse(values[$_get](0));
      } else {
        return null;
      }
    }
    set contentType(contentType) {
      this[_checkMutable]();
      if (contentType == null) {
        this[_headers][$remove]("content-type");
      } else {
        this[_set]("content-type", dart.toString(contentType));
      }
    }
    get date() {
      let values = this[_headers][$_get]("date");
      if (values != null) {
        if (!values[$isNotEmpty]) dart.assertFailed(null, I[21], 168, 14, "values.isNotEmpty");
        try {
          return http.HttpDate.parse(values[$_get](0));
        } catch (e) {
          let ex = dart.getThrown(e);
          if (core.Exception.is(ex)) {
            return null;
          } else
            throw e;
        }
      }
      return null;
    }
    set date(date) {
      this[_checkMutable]();
      if (date == null) {
        this[_headers][$remove]("date");
      } else {
        let formatted = http.HttpDate.format(date.toUtc());
        this[_set]("date", formatted);
      }
    }
    get expires() {
      let values = this[_headers][$_get]("expires");
      if (values != null) {
        if (!values[$isNotEmpty]) dart.assertFailed(null, I[21], 194, 14, "values.isNotEmpty");
        try {
          return http.HttpDate.parse(values[$_get](0));
        } catch (e) {
          let ex = dart.getThrown(e);
          if (core.Exception.is(ex)) {
            return null;
          } else
            throw e;
        }
      }
      return null;
    }
    set expires(expires) {
      this[_checkMutable]();
      if (expires == null) {
        this[_headers][$remove]("expires");
      } else {
        let formatted = http.HttpDate.format(expires.toUtc());
        this[_set]("expires", formatted);
      }
    }
    get host() {
      return this[_host];
    }
    set host(host) {
      this[_checkMutable]();
      this[_host] = host;
      this[_updateHostHeader]();
    }
    get ifModifiedSince() {
      let values = this[_headers][$_get]("if-modified-since");
      if (values != null) {
        if (!values[$isNotEmpty]) dart.assertFailed(null, I[21], 230, 14, "values.isNotEmpty");
        try {
          return http.HttpDate.parse(values[$_get](0));
        } catch (e) {
          let ex = dart.getThrown(e);
          if (core.Exception.is(ex)) {
            return null;
          } else
            throw e;
        }
      }
      return null;
    }
    set ifModifiedSince(ifModifiedSince) {
      this[_checkMutable]();
      if (ifModifiedSince == null) {
        this[_headers][$remove]("if-modified-since");
      } else {
        let formatted = http.HttpDate.format(ifModifiedSince.toUtc());
        this[_set]("if-modified-since", formatted);
      }
    }
    get persistentConnection() {
      return this[_persistentConnection];
    }
    set persistentConnection(persistentConnection) {
      this[_checkMutable]();
      if (persistentConnection === this[_persistentConnection]) return;
      let originalName = this[_originalHeaderName]("connection");
      if (persistentConnection) {
        if (this.protocolVersion === "1.1") {
          this.remove("connection", "close");
        } else {
          if (this[_contentLength] < 0) {
            dart.throw(new http.HttpException.new("Trying to set 'Connection: Keep-Alive' on HTTP 1.0 headers with " + "no ContentLength"));
          }
          this.add(originalName, "keep-alive", {preserveHeaderCase: true});
        }
      } else {
        if (this.protocolVersion === "1.1") {
          this.add(originalName, "close", {preserveHeaderCase: true});
        } else {
          this.remove("connection", "keep-alive");
        }
      }
      this[_persistentConnection] = persistentConnection;
    }
    get port() {
      return this[_port];
    }
    set port(port) {
      this[_checkMutable]();
      this[_port] = port;
      this[_updateHostHeader]();
    }
    _get(name) {
      return this[_headers][$_get](http.HttpHeadersImpl._validateField(name));
    }
    add(name, value, opts) {
      let t15, t15$;
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : false;
      this[_checkMutable]();
      let lowercaseName = http.HttpHeadersImpl._validateField(name);
      if (preserveHeaderCase && name !== lowercaseName) {
        (t15 = this[_originalHeaderNames], t15 == null ? this[_originalHeaderNames] = new (T.IdentityMapOfString$String()).new() : t15)[$_set](lowercaseName, name);
      } else {
        t15$ = this[_originalHeaderNames];
        t15$ == null ? null : t15$[$remove](lowercaseName);
      }
      this[_addAll](lowercaseName, value);
    }
    clear() {
      this[_checkMutable]();
      this[_headers][$clear]();
      this[_contentLength] = -1;
      this[_persistentConnection] = true;
      this[_chunkedTransferEncoding] = false;
      this[_host] = null;
      this[_port] = null;
    }
    forEach(action) {
      this[_headers][$forEach](dart.fn((name, values) => {
        let originalName = this[_originalHeaderName](name);
        action(originalName, values);
      }, T.StringAndListOfStringTovoid()));
    }
    noFolding(name) {
      let t15;
      name = http.HttpHeadersImpl._validateField(name);
      (t15 = this[_noFoldingHeaders], t15 == null ? this[_noFoldingHeaders] = T.JSArrayOfString().of([]) : t15)[$add](name);
    }
    remove(name, value) {
      let t15;
      this[_checkMutable]();
      name = http.HttpHeadersImpl._validateField(name);
      value = http.HttpHeadersImpl._validateValue(value);
      let values = this[_headers][$_get](name);
      if (values != null) {
        values[$remove](this[_valueToString](value));
        if (values[$isEmpty]) {
          this[_headers][$remove](name);
          t15 = this[_originalHeaderNames];
          t15 == null ? null : t15[$remove](name);
        }
      }
      if (name === "transfer-encoding" && value[$_equals]("chunked")) {
        this[_chunkedTransferEncoding] = false;
      }
    }
    removeAll(name) {
      let t15;
      this[_checkMutable]();
      name = http.HttpHeadersImpl._validateField(name);
      this[_headers][$remove](name);
      t15 = this[_originalHeaderNames];
      t15 == null ? null : t15[$remove](name);
    }
    set(name, value, opts) {
      let t15, t15$;
      let preserveHeaderCase = opts && 'preserveHeaderCase' in opts ? opts.preserveHeaderCase : false;
      this[_checkMutable]();
      let lowercaseName = http.HttpHeadersImpl._validateField(name);
      this[_headers][$remove](lowercaseName);
      t15 = this[_originalHeaderNames];
      t15 == null ? null : t15[$remove](lowercaseName);
      if (lowercaseName === "content-length") {
        this[_contentLength] = -1;
      }
      if (lowercaseName === "transfer-encoding") {
        this[_chunkedTransferEncoding] = false;
      }
      if (preserveHeaderCase && name !== lowercaseName) {
        (t15$ = this[_originalHeaderNames], t15$ == null ? this[_originalHeaderNames] = new (T.IdentityMapOfString$String()).new() : t15$)[$_set](lowercaseName, name);
      }
      this[_addAll](lowercaseName, value);
    }
    toString() {
      let sb = new core.StringBuffer.new();
      this[_headers][$forEach](dart.fn((name, values) => {
        let t15;
        let originalName = this[_originalHeaderName](name);
        sb.write(originalName);
        sb.write(": ");
        let fold = this[_foldHeader](name);
        for (let i = 0; i < values[$length]; i = i + 1) {
          if (i > 0) {
            if (fold) {
              sb.write(", ");
            } else {
              t15 = sb;
              (() => {
                t15.write("\n");
                t15.write(originalName);
                t15.write(": ");
                return t15;
              })();
            }
          }
          sb.write(values[$_get](i));
        }
        sb.write("\n");
      }, T.StringAndListOfStringTovoid()));
      return sb.toString();
    }
    value(name) {
      name = http.HttpHeadersImpl._validateField(name);
      let values = this[_headers][$_get](name);
      if (values == null) return null;
      if (!values[$isNotEmpty]) dart.assertFailed(null, I[21], 404, 12, "values.isNotEmpty");
      if (values[$length] > 1) {
        dart.throw(new http.HttpException.new("More than one value for header " + name));
      }
      return values[$_get](0);
    }
    [_add](name, value) {
      if (!(name === http.HttpHeadersImpl._validateField(name))) dart.assertFailed(null, I[21], 413, 12, "name == _validateField(name)");
      switch (name.length) {
        case 4:
        {
          if ("date" === name) {
            this[_addDate](name, value);
            return;
          }
          if ("host" === name) {
            this[_addHost](name, value);
            return;
          }
          break;
        }
        case 7:
        {
          if ("expires" === name) {
            this[_addExpires](name, value);
            return;
          }
          break;
        }
        case 10:
        {
          if ("connection" === name) {
            this[_addConnection](name, value);
            return;
          }
          break;
        }
        case 12:
        {
          if ("content-type" === name) {
            this[_addContentType](name, value);
            return;
          }
          break;
        }
        case 14:
        {
          if ("content-length" === name) {
            this[_addContentLength](name, value);
            return;
          }
          break;
        }
        case 17:
        {
          if ("transfer-encoding" === name) {
            this[_addTransferEncoding](name, value);
            return;
          }
          if ("if-modified-since" === name) {
            this[_addIfModifiedSince](name, value);
            return;
          }
        }
      }
      this[_addValue](name, core.Object.as(value));
    }
    [_addAll](name, value) {
      if (core.Iterable.is(value)) {
        for (let v of value) {
          this[_add](name, http.HttpHeadersImpl._validateValue(core.Object.as(v)));
        }
      } else {
        this[_add](name, http.HttpHeadersImpl._validateValue(core.Object.as(value)));
      }
    }
    [_addConnection](name, value) {
      let lowerCaseValue = dart.dsend(value, 'toLowerCase', []);
      if (dart.equals(lowerCaseValue, "close")) {
        this[_persistentConnection] = false;
      } else if (dart.equals(lowerCaseValue, "keep-alive")) {
        this[_persistentConnection] = true;
      }
      this[_addValue](name, core.Object.as(value));
    }
    [_addContentLength](name, value) {
      if (core.int.is(value)) {
        this.contentLength = value;
      } else if (typeof value == 'string') {
        this.contentLength = core.int.parse(value);
      } else {
        dart.throw(new http.HttpException.new("Unexpected type for header named " + name));
      }
    }
    [_addContentType](name, value) {
      this[_set]("content-type", core.String.as(value));
    }
    [_addDate](name, value) {
      if (core.DateTime.is(value)) {
        this.date = value;
      } else if (typeof value == 'string') {
        this[_set]("date", value);
      } else {
        dart.throw(new http.HttpException.new("Unexpected type for header named " + name));
      }
    }
    [_addExpires](name, value) {
      if (core.DateTime.is(value)) {
        this.expires = value;
      } else if (typeof value == 'string') {
        this[_set]("expires", value);
      } else {
        dart.throw(new http.HttpException.new("Unexpected type for header named " + name));
      }
    }
    [_addHost](name, value) {
      if (typeof value == 'string') {
        let pos = value[$indexOf](":");
        if (pos === -1) {
          this[_host] = value;
          this[_port] = 80;
        } else {
          if (pos > 0) {
            this[_host] = value[$substring](0, pos);
          } else {
            this[_host] = null;
          }
          if (pos + 1 === value.length) {
            this[_port] = 80;
          } else {
            try {
              this[_port] = core.int.parse(value[$substring](pos + 1));
            } catch (e) {
              let ex = dart.getThrown(e);
              if (core.FormatException.is(ex)) {
                this[_port] = null;
              } else
                throw e;
            }
          }
        }
        this[_set]("host", value);
      } else {
        dart.throw(new http.HttpException.new("Unexpected type for header named " + name));
      }
    }
    [_addIfModifiedSince](name, value) {
      if (core.DateTime.is(value)) {
        this.ifModifiedSince = value;
      } else if (typeof value == 'string') {
        this[_set]("if-modified-since", value);
      } else {
        dart.throw(new http.HttpException.new("Unexpected type for header named " + name));
      }
    }
    [_addTransferEncoding](name, value) {
      if (dart.equals(value, "chunked")) {
        this.chunkedTransferEncoding = true;
      } else {
        this[_addValue]("transfer-encoding", core.Object.as(value));
      }
    }
    [_addValue](name, value) {
      let t20, t19, t18, t17;
      let values = (t17 = this[_headers], t18 = name, t19 = t17[$_get](t18), t19 == null ? (t20 = T.JSArrayOfString().of([]), t17[$_set](t18, t20), t20) : t19);
      values[$add](this[_valueToString](value));
    }
    [_checkMutable]() {
      if (!this[_mutable]) dart.throw(new http.HttpException.new("HTTP headers are not mutable"));
    }
    [_foldHeader](name) {
      if (name === "set-cookie") return false;
      let noFoldingHeaders = this[_noFoldingHeaders];
      return noFoldingHeaders == null || !noFoldingHeaders[$contains](name);
    }
    [_originalHeaderName](name) {
      let t17, t17$;
      t17$ = (t17 = this[_originalHeaderNames], t17 == null ? null : t17[$_get](name));
      return t17$ == null ? name : t17$;
    }
    [_set](name, value) {
      if (!(name === http.HttpHeadersImpl._validateField(name))) dart.assertFailed(null, I[21], 584, 12, "name == _validateField(name)");
      this[_headers][$_set](name, T.JSArrayOfString().of([value]));
    }
    [_updateHostHeader]() {
      let host = this[_host];
      if (host != null) {
        let defaultPort = this[_port] == null || this[_port] === this[_defaultPortForScheme];
        this[_set]("host", defaultPort ? host : dart.str(host) + ":" + dart.str(this[_port]));
      }
    }
    [_valueToString](value) {
      if (core.DateTime.is(value)) {
        return http.HttpDate.format(value);
      } else if (typeof value == 'string') {
        return value;
      } else {
        return core.String.as(http.HttpHeadersImpl._validateValue(value[$toString]()));
      }
    }
    static _validateField(field) {
      for (let i = 0; i < field.length; i = i + 1) {
        if (!http._isTokenChar(field[$codeUnitAt](i))) {
          dart.throw(new core.FormatException.new("Invalid HTTP header field name: " + convert.json.encode(field), field, i));
        }
      }
      return field[$toLowerCase]();
    }
    static _validateValue(value) {
      if (!(typeof value == 'string')) return value;
      for (let i = 0; i < value.length; i = i + 1) {
        if (!http._isValueChar(value[$codeUnitAt](i))) {
          dart.throw(new core.FormatException.new("Invalid HTTP header field value: " + convert.json.encode(value), value, i));
        }
      }
      return value;
    }
  };
  (http.HttpHeadersImpl.new = function(protocolVersion, opts) {
    let defaultPortForScheme = opts && 'defaultPortForScheme' in opts ? opts.defaultPortForScheme : 80;
    let initialHeaders = opts && 'initialHeaders' in opts ? opts.initialHeaders : null;
    this[_originalHeaderNames] = null;
    this[_mutable] = true;
    this[_noFoldingHeaders] = null;
    this[_contentLength] = -1;
    this[_persistentConnection] = true;
    this[_chunkedTransferEncoding] = false;
    this[_host] = null;
    this[_port] = null;
    this[protocolVersion$] = protocolVersion;
    this[_headers] = new (T.IdentityMapOfString$ListOfString()).new();
    this[_defaultPortForScheme] = defaultPortForScheme;
    if (initialHeaders != null) {
      initialHeaders[_headers][$forEach](dart.fn((name, value) => {
        let t11, t10, t9;
        t9 = this[_headers];
        t10 = name;
        t11 = value;
        t9[$_set](t10, t11);
        return t11;
      }, T.StringAndListOfStringTovoid()));
      this[_contentLength] = initialHeaders[_contentLength];
      this[_persistentConnection] = initialHeaders[_persistentConnection];
      this[_chunkedTransferEncoding] = initialHeaders[_chunkedTransferEncoding];
      this[_host] = initialHeaders[_host];
      this[_port] = initialHeaders[_port];
    }
    if (this.protocolVersion === "1.0") {
      this[_persistentConnection] = false;
      this[_chunkedTransferEncoding] = false;
    }
  }).prototype = http.HttpHeadersImpl.prototype;
  dart.addTypeTests(http.HttpHeadersImpl);
  dart.addTypeCaches(http.HttpHeadersImpl);
  http.HttpHeadersImpl[dart.implements] = () => [http.HttpHeaders];
  dart.setMethodSignature(http.HttpHeadersImpl, () => ({
    __proto__: dart.getMethods(http.HttpHeadersImpl.__proto__),
    _get: dart.fnType(dart.nullable(core.List$(core.String)), [core.String]),
    add: dart.fnType(dart.void, [core.String, core.Object], {preserveHeaderCase: core.bool}, {}),
    clear: dart.fnType(dart.void, []),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [core.String, core.List$(core.String)])]),
    noFolding: dart.fnType(dart.void, [core.String]),
    remove: dart.fnType(dart.void, [core.String, core.Object]),
    removeAll: dart.fnType(dart.void, [core.String]),
    set: dart.fnType(dart.void, [core.String, core.Object], {preserveHeaderCase: core.bool}, {}),
    value: dart.fnType(dart.nullable(core.String), [core.String]),
    [_add]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addAll]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addConnection]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addContentLength]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addContentType]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addDate]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addExpires]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addHost]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addIfModifiedSince]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addTransferEncoding]: dart.fnType(dart.void, [core.String, dart.dynamic]),
    [_addValue]: dart.fnType(dart.void, [core.String, core.Object]),
    [_checkMutable]: dart.fnType(dart.void, []),
    [_foldHeader]: dart.fnType(core.bool, [core.String]),
    [_originalHeaderName]: dart.fnType(core.String, [core.String]),
    [_set]: dart.fnType(dart.void, [core.String, core.String]),
    [_updateHostHeader]: dart.fnType(dart.void, []),
    [_valueToString]: dart.fnType(core.String, [core.Object])
  }));
  dart.setGetterSignature(http.HttpHeadersImpl, () => ({
    __proto__: dart.getGetters(http.HttpHeadersImpl.__proto__),
    chunkedTransferEncoding: core.bool,
    contentLength: core.int,
    contentType: dart.nullable(http.ContentType),
    date: dart.nullable(core.DateTime),
    expires: dart.nullable(core.DateTime),
    host: dart.nullable(core.String),
    ifModifiedSince: dart.nullable(core.DateTime),
    persistentConnection: core.bool,
    port: dart.nullable(core.int)
  }));
  dart.setSetterSignature(http.HttpHeadersImpl, () => ({
    __proto__: dart.getSetters(http.HttpHeadersImpl.__proto__),
    chunkedTransferEncoding: core.bool,
    contentLength: core.int,
    contentType: dart.nullable(http.ContentType),
    date: dart.nullable(core.DateTime),
    expires: dart.nullable(core.DateTime),
    host: dart.nullable(core.String),
    ifModifiedSince: dart.nullable(core.DateTime),
    persistentConnection: core.bool,
    port: dart.nullable(core.int)
  }));
  dart.setLibraryUri(http.HttpHeadersImpl, I[18]);
  dart.setFieldSignature(http.HttpHeadersImpl, () => ({
    __proto__: dart.getFields(http.HttpHeadersImpl.__proto__),
    [_headers]: dart.finalFieldType(core.Map$(core.String, core.List$(core.String))),
    [_originalHeaderNames]: dart.fieldType(dart.nullable(core.Map$(core.String, core.String))),
    protocolVersion: dart.finalFieldType(core.String),
    [_mutable]: dart.finalFieldType(core.bool),
    [_noFoldingHeaders]: dart.fieldType(dart.nullable(core.List$(core.String))),
    [_contentLength]: dart.fieldType(core.int),
    [_persistentConnection]: dart.fieldType(core.bool),
    [_chunkedTransferEncoding]: dart.fieldType(core.bool),
    [_host]: dart.fieldType(dart.nullable(core.String)),
    [_port]: dart.fieldType(dart.nullable(core.int)),
    [_defaultPortForScheme]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(http.HttpHeadersImpl, ['toString']);
  http._CharCode = class _CharCode extends core.Object {};
  (http._CharCode.new = function() {
    ;
  }).prototype = http._CharCode.prototype;
  dart.addTypeTests(http._CharCode);
  dart.addTypeCaches(http._CharCode);
  dart.setLibraryUri(http._CharCode, I[18]);
  dart.defineLazy(http._CharCode, {
    /*http._CharCode.HT*/get HT() {
      return 9;
    },
    /*http._CharCode.SP*/get SP() {
      return 32;
    }
  }, false);
  http._Const = class _Const extends core.Object {};
  (http._Const.new = function() {
    ;
  }).prototype = http._Const.prototype;
  dart.addTypeTests(http._Const);
  dart.addTypeCaches(http._Const);
  dart.setLibraryUri(http._Const, I[18]);
  dart.defineLazy(http._Const, {
    /*http._Const.T*/get T() {
      return true;
    },
    /*http._Const.F*/get F() {
      return false;
    },
    /*http._Const.SEPARATOR_MAP*/get SEPARATOR_MAP() {
      return C[100] || CT.C100;
    }
  }, false);
  var _primaryType = dart.privateName(http, "_primaryType");
  var _subType = dart.privateName(http, "_subType");
  var _value$3 = dart.privateName(http, "_value");
  var _ensureParameters = dart.privateName(http, "_ensureParameters");
  var _parse = dart.privateName(http, "_parse");
  var _parameters = dart.privateName(http, "_parameters");
  var _unmodifiableParameters = dart.privateName(http, "_unmodifiableParameters");
  http._HeaderValue = class _HeaderValue extends core.Object {
    get parameters() {
      let t17;
      t17 = this[_unmodifiableParameters];
      return t17 == null ? this[_unmodifiableParameters] = new (T.UnmodifiableMapViewOfString$StringN()).new(this[_ensureParameters]()) : t17;
    }
    get value() {
      return this[_value$3];
    }
    toString() {
      let sb = new core.StringBuffer.new();
      sb.write(this[_value$3]);
      let parameters = this[_parameters];
      if (parameters != null && parameters[$isNotEmpty]) {
        parameters[$forEach](dart.fn((name, value) => {
          let t17, t17$;
          t17 = sb;
          (() => {
            t17.write("; ");
            t17.write(name);
            return t17;
          })();
          if (value != null) {
            sb.write("=");
            if (http._HeaderValue._isToken(value)) {
              sb.write(value);
            } else {
              sb.write("\"");
              let start = 0;
              for (let i = 0; i < value.length; i = i + 1) {
                let codeUnit = value[$codeUnitAt](i);
                if (codeUnit === 92 || codeUnit === 34) {
                  sb.write(value[$substring](start, i));
                  sb.write("\\");
                  start = i;
                }
              }
              t17$ = sb;
              (() => {
                t17$.write(value[$substring](start));
                t17$.write("\"");
                return t17$;
              })();
            }
          }
        }, T.StringAndStringNTovoid()));
      }
      return sb.toString();
    }
    [_ensureParameters]() {
      let t17;
      t17 = this[_parameters];
      return t17 == null ? this[_parameters] = new (T.IdentityMapOfString$StringN()).new() : t17;
    }
    [_parse](s, parameterSeparator, valueSeparator, preserveBackslash) {
      let index = 0;
      function done() {
        return index === s.length;
      }
      dart.fn(done, T.VoidTobool());
      function skipWS() {
        while (!done()) {
          if (s[$_get](index) !== " " && s[$_get](index) !== "\t") return;
          index = index + 1;
        }
      }
      dart.fn(skipWS, T.VoidTovoid());
      function parseValue() {
        let start = index;
        while (!done()) {
          let char = s[$_get](index);
          if (char === " " || char === "\t" || char === valueSeparator || char === parameterSeparator) break;
          index = index + 1;
        }
        return s[$substring](start, index);
      }
      dart.fn(parseValue, T.VoidToString());
      function expect(expected) {
        if (done() || s[$_get](index) !== expected) {
          dart.throw(new http.HttpException.new("Failed to parse header value"));
        }
        index = index + 1;
      }
      dart.fn(expect, T.StringTovoid());
      function maybeExpect(expected) {
        if (done() || !s[$startsWith](expected, index)) {
          return false;
        }
        index = index + 1;
        return true;
      }
      dart.fn(maybeExpect, T.StringTobool());
      const parseParameters = () => {
        let parameters = this[_ensureParameters]();
        function parseParameterName() {
          let start = index;
          while (!done()) {
            let char = s[$_get](index);
            if (char === " " || char === "\t" || char === "=" || char === parameterSeparator || char === valueSeparator) break;
            index = index + 1;
          }
          return s[$substring](start, index)[$toLowerCase]();
        }
        dart.fn(parseParameterName, T.VoidToString());
        function parseParameterValue() {
          if (!done() && s[$_get](index) === "\"") {
            let sb = new core.StringBuffer.new();
            index = index + 1;
            while (!done()) {
              let char = s[$_get](index);
              if (char === "\\") {
                if (index + 1 === s.length) {
                  dart.throw(new http.HttpException.new("Failed to parse header value"));
                }
                if (preserveBackslash && s[$_get](index + 1) !== "\"") {
                  sb.write(char);
                }
                index = index + 1;
              } else if (char === "\"") {
                index = index + 1;
                return sb.toString();
              }
              char = s[$_get](index);
              sb.write(char);
              index = index + 1;
            }
            dart.throw(new http.HttpException.new("Failed to parse header value"));
          } else {
            return parseValue();
          }
        }
        dart.fn(parseParameterValue, T.VoidToString());
        while (!done()) {
          skipWS();
          if (done()) return;
          let name = parseParameterName();
          skipWS();
          if (maybeExpect("=")) {
            skipWS();
            let value = parseParameterValue();
            if (name === "charset" && http._ContentType.is(this)) {
              value = value[$toLowerCase]();
            }
            parameters[$_set](name, value);
            skipWS();
          } else if (name[$isNotEmpty]) {
            parameters[$_set](name, null);
          }
          if (done()) return;
          if (s[$_get](index) === valueSeparator) return;
          expect(parameterSeparator);
        }
      };
      dart.fn(parseParameters, T.VoidTovoid());
      skipWS();
      this[_value$3] = parseValue();
      skipWS();
      if (done()) return;
      if (s[$_get](index) === valueSeparator) return;
      maybeExpect(parameterSeparator);
      parseParameters();
    }
    static parse(value, opts) {
      let parameterSeparator = opts && 'parameterSeparator' in opts ? opts.parameterSeparator : ";";
      let valueSeparator = opts && 'valueSeparator' in opts ? opts.valueSeparator : null;
      let preserveBackslash = opts && 'preserveBackslash' in opts ? opts.preserveBackslash : false;
      let result = new http._HeaderValue.new();
      result[_parse](value, parameterSeparator, valueSeparator, preserveBackslash);
      return result;
    }
    static _isToken(token) {
      if (token[$isEmpty]) {
        return false;
      }
      let delimiters = "\"(),/:;<=>?@[]{}";
      for (let i = 0; i < token.length; i = i + 1) {
        let codeUnit = token[$codeUnitAt](i);
        if (codeUnit <= 32 || codeUnit >= 127 || delimiters[$contains](token[$_get](i))) {
          return false;
        }
      }
      return true;
    }
  };
  (http._HeaderValue.new = function(_value = "", parameters = C[85] || CT.C85) {
    this[_parameters] = null;
    this[_unmodifiableParameters] = null;
    this[_value$3] = _value;
    if (parameters[$isNotEmpty]) {
      this[_parameters] = T.HashMapOfString$StringN().from(parameters);
    }
  }).prototype = http._HeaderValue.prototype;
  dart.addTypeTests(http._HeaderValue);
  dart.addTypeCaches(http._HeaderValue);
  http._HeaderValue[dart.implements] = () => [http.HeaderValue];
  dart.setMethodSignature(http._HeaderValue, () => ({
    __proto__: dart.getMethods(http._HeaderValue.__proto__),
    [_ensureParameters]: dart.fnType(core.Map$(core.String, dart.nullable(core.String)), []),
    [_parse]: dart.fnType(dart.void, [core.String, core.String, dart.nullable(core.String), core.bool])
  }));
  dart.setGetterSignature(http._HeaderValue, () => ({
    __proto__: dart.getGetters(http._HeaderValue.__proto__),
    parameters: core.Map$(core.String, dart.nullable(core.String)),
    value: core.String
  }));
  dart.setLibraryUri(http._HeaderValue, I[18]);
  dart.setFieldSignature(http._HeaderValue, () => ({
    __proto__: dart.getFields(http._HeaderValue.__proto__),
    [_value$3]: dart.fieldType(core.String),
    [_parameters]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.nullable(core.String)))),
    [_unmodifiableParameters]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.nullable(core.String))))
  }));
  dart.defineExtensionMethods(http._HeaderValue, ['toString']);
  http._ContentType = class _ContentType extends http._HeaderValue {
    get charset() {
      return this.parameters[$_get]("charset");
    }
    get mimeType() {
      return this.primaryType + "/" + this.subType;
    }
    get primaryType() {
      return this[_primaryType];
    }
    get subType() {
      return this[_subType];
    }
    static parse(value) {
      let result = new http._ContentType.__();
      result[_parse](value, ";", null, false);
      let index = result[_value$3][$indexOf]("/");
      if (index === -1 || index === result[_value$3].length - 1) {
        result[_primaryType] = result[_value$3][$trim]()[$toLowerCase]();
      } else {
        result[_primaryType] = result[_value$3][$substring](0, index)[$trim]()[$toLowerCase]();
        result[_subType] = result[_value$3][$substring](index + 1)[$trim]()[$toLowerCase]();
      }
      return result;
    }
  };
  (http._ContentType.new = function(primaryType, subType, charset, parameters) {
    this[_primaryType] = "";
    this[_subType] = "";
    this[_primaryType] = primaryType;
    this[_subType] = subType;
    http._ContentType.__proto__.new.call(this, "");
    function emptyIfNull(string) {
      let t17;
      t17 = string;
      return t17 == null ? "" : t17;
    }
    dart.fn(emptyIfNull, T.StringNToString());
    this[_primaryType] = emptyIfNull(this[_primaryType]);
    this[_subType] = emptyIfNull(this[_subType]);
    this[_value$3] = this[_primaryType] + "/" + this[_subType];
    if (charset != null) {
      this[_ensureParameters]()[$_set]("charset", charset[$toLowerCase]());
    }
  }).prototype = http._ContentType.prototype;
  (http._ContentType.__ = function() {
    this[_primaryType] = "";
    this[_subType] = "";
    http._ContentType.__proto__.new.call(this);
    ;
  }).prototype = http._ContentType.prototype;
  dart.addTypeTests(http._ContentType);
  dart.addTypeCaches(http._ContentType);
  http._ContentType[dart.implements] = () => [http.ContentType];
  dart.setGetterSignature(http._ContentType, () => ({
    __proto__: dart.getGetters(http._ContentType.__proto__),
    charset: dart.nullable(core.String),
    mimeType: core.String,
    primaryType: core.String,
    subType: core.String
  }));
  dart.setLibraryUri(http._ContentType, I[18]);
  dart.setFieldSignature(http._ContentType, () => ({
    __proto__: dart.getFields(http._ContentType.__proto__),
    [_primaryType]: dart.fieldType(core.String),
    [_subType]: dart.fieldType(core.String)
  }));
  var _path = dart.privateName(http, "_path");
  var _parseSetCookieValue = dart.privateName(http, "_parseSetCookieValue");
  http._Cookie = class _Cookie extends core.Object {
    get name() {
      return this[_name$1];
    }
    set name(newName) {
      http._Cookie._validateName(newName);
      this[_name$1] = newName;
    }
    get path() {
      return this[_path];
    }
    set path(newPath) {
      http._Cookie._validatePath(newPath);
      this[_path] = newPath;
    }
    get value() {
      return this[_value$3];
    }
    set value(newValue) {
      http._Cookie._validateValue(newValue);
      this[_value$3] = newValue;
    }
    toString() {
      let t17, t17$, t17$0, t17$1, t17$2;
      let sb = new core.StringBuffer.new();
      t17 = sb;
      (() => {
        t17.write(this[_name$1]);
        t17.write("=");
        t17.write(this[_value$3]);
        return t17;
      })();
      let expires = this.expires;
      if (expires != null) {
        t17$ = sb;
        (() => {
          t17$.write("; Expires=");
          t17$.write(http.HttpDate.format(expires));
          return t17$;
        })();
      }
      if (this.maxAge != null) {
        t17$0 = sb;
        (() => {
          t17$0.write("; Max-Age=");
          t17$0.write(this.maxAge);
          return t17$0;
        })();
      }
      if (this.domain != null) {
        t17$1 = sb;
        (() => {
          t17$1.write("; Domain=");
          t17$1.write(this.domain);
          return t17$1;
        })();
      }
      if (this.path != null) {
        t17$2 = sb;
        (() => {
          t17$2.write("; Path=");
          t17$2.write(this.path);
          return t17$2;
        })();
      }
      if (this.secure) sb.write("; Secure");
      if (this.httpOnly) sb.write("; HttpOnly");
      return sb.toString();
    }
    [_parseSetCookieValue](s) {
      let index = 0;
      function done() {
        return index === s.length;
      }
      dart.fn(done, T.VoidTobool());
      function parseName() {
        let start = index;
        while (!done()) {
          if (s[$_get](index) === "=") break;
          index = index + 1;
        }
        return s[$substring](start, index)[$trim]();
      }
      dart.fn(parseName, T.VoidToString());
      function parseValue() {
        let start = index;
        while (!done()) {
          if (s[$_get](index) === ";") break;
          index = index + 1;
        }
        return s[$substring](start, index)[$trim]();
      }
      dart.fn(parseValue, T.VoidToString());
      const parseAttributes = () => {
        function parseAttributeName() {
          let start = index;
          while (!done()) {
            if (s[$_get](index) === "=" || s[$_get](index) === ";") break;
            index = index + 1;
          }
          return s[$substring](start, index)[$trim]()[$toLowerCase]();
        }
        dart.fn(parseAttributeName, T.VoidToString());
        function parseAttributeValue() {
          let start = index;
          while (!done()) {
            if (s[$_get](index) === ";") break;
            index = index + 1;
          }
          return s[$substring](start, index)[$trim]()[$toLowerCase]();
        }
        dart.fn(parseAttributeValue, T.VoidToString());
        while (!done()) {
          let name = parseAttributeName();
          let value = "";
          if (!done() && s[$_get](index) === "=") {
            index = index + 1;
            value = parseAttributeValue();
          }
          if (name === "expires") {
            this.expires = http.HttpDate._parseCookieDate(value);
          } else if (name === "max-age") {
            this.maxAge = core.int.parse(value);
          } else if (name === "domain") {
            this.domain = value;
          } else if (name === "path") {
            this.path = value;
          } else if (name === "httponly") {
            this.httpOnly = true;
          } else if (name === "secure") {
            this.secure = true;
          }
          if (!done()) index = index + 1;
        }
      };
      dart.fn(parseAttributes, T.VoidTovoid());
      this[_name$1] = http._Cookie._validateName(parseName());
      if (done() || this[_name$1][$isEmpty]) {
        dart.throw(new http.HttpException.new("Failed to parse header value [" + s + "]"));
      }
      index = index + 1;
      this[_value$3] = http._Cookie._validateValue(parseValue());
      if (done()) return;
      index = index + 1;
      parseAttributes();
    }
    static _validateName(newName) {
      let separators = C[101] || CT.C101;
      for (let i = 0; i < newName.length; i = i + 1) {
        let codeUnit = newName[$codeUnitAt](i);
        if (codeUnit <= 32 || codeUnit >= 127 || separators[$contains](newName[$_get](i))) {
          dart.throw(new core.FormatException.new("Invalid character in cookie name, code unit: '" + dart.str(codeUnit) + "'", newName, i));
        }
      }
      return newName;
    }
    static _validatePath(path) {
      if (path == null) return;
      for (let i = 0; i < path.length; i = i + 1) {
        let codeUnit = path[$codeUnitAt](i);
        if (codeUnit < 32 || codeUnit >= 127 || codeUnit === 59) {
          dart.throw(new core.FormatException.new("Invalid character in cookie path, code unit: '" + dart.str(codeUnit) + "'"));
        }
      }
    }
    static _validateValue(newValue) {
      let start = 0;
      let end = newValue.length;
      if (2 <= newValue.length && newValue[$codeUnits][$_get](start) === 34 && newValue[$codeUnits][$_get](end - 1) === 34) {
        start = start + 1;
        end = end - 1;
      }
      for (let i = start; i < end; i = i + 1) {
        let codeUnit = newValue[$codeUnits][$_get](i);
        if (!(codeUnit === 33 || codeUnit >= 35 && codeUnit <= 43 || codeUnit >= 45 && codeUnit <= 58 || codeUnit >= 60 && codeUnit <= 91 || codeUnit >= 93 && codeUnit <= 126)) {
          dart.throw(new core.FormatException.new("Invalid character in cookie value, code unit: '" + dart.str(codeUnit) + "'", newValue, i));
        }
      }
      return newValue;
    }
  };
  (http._Cookie.new = function(name, value) {
    this.expires = null;
    this.maxAge = null;
    this.domain = null;
    this[_path] = null;
    this.httpOnly = false;
    this.secure = false;
    this[_name$1] = http._Cookie._validateName(name);
    this[_value$3] = http._Cookie._validateValue(value);
    this.httpOnly = true;
    ;
  }).prototype = http._Cookie.prototype;
  (http._Cookie.fromSetCookieValue = function(value) {
    this.expires = null;
    this.maxAge = null;
    this.domain = null;
    this[_path] = null;
    this.httpOnly = false;
    this.secure = false;
    this[_name$1] = "";
    this[_value$3] = "";
    this[_parseSetCookieValue](value);
  }).prototype = http._Cookie.prototype;
  dart.addTypeTests(http._Cookie);
  dart.addTypeCaches(http._Cookie);
  http._Cookie[dart.implements] = () => [http.Cookie];
  dart.setMethodSignature(http._Cookie, () => ({
    __proto__: dart.getMethods(http._Cookie.__proto__),
    [_parseSetCookieValue]: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(http._Cookie, () => ({
    __proto__: dart.getGetters(http._Cookie.__proto__),
    name: core.String,
    path: dart.nullable(core.String),
    value: core.String
  }));
  dart.setSetterSignature(http._Cookie, () => ({
    __proto__: dart.getSetters(http._Cookie.__proto__),
    name: core.String,
    path: dart.nullable(core.String),
    value: core.String
  }));
  dart.setLibraryUri(http._Cookie, I[18]);
  dart.setFieldSignature(http._Cookie, () => ({
    __proto__: dart.getFields(http._Cookie.__proto__),
    [_name$1]: dart.fieldType(core.String),
    [_value$3]: dart.fieldType(core.String),
    expires: dart.fieldType(dart.nullable(core.DateTime)),
    maxAge: dart.fieldType(dart.nullable(core.int)),
    domain: dart.fieldType(dart.nullable(core.String)),
    [_path]: dart.fieldType(dart.nullable(core.String)),
    httpOnly: dart.fieldType(core.bool),
    secure: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(http._Cookie, ['toString']);
  var _isNew = dart.privateName(http, "_isNew");
  var _timeoutCallback = dart.privateName(http, "_timeoutCallback");
  var _prev = dart.privateName(http, "_prev");
  var _next = dart.privateName(http, "_next");
  var _data = dart.privateName(http, "_data");
  var _sessionManager$ = dart.privateName(http, "_sessionManager");
  var _lastSeen = dart.privateName(http, "_lastSeen");
  var _removeFromTimeoutQueue = dart.privateName(http, "_removeFromTimeoutQueue");
  var _sessions = dart.privateName(http, "_sessions");
  http._HttpSession = class _HttpSession extends core.Object {
    get entries() {
      return this[_data][$entries];
    }
    get isEmpty() {
      return this[_data][$isEmpty];
    }
    get isNew() {
      return this[_isNew];
    }
    get isNotEmpty() {
      return this[_data][$isNotEmpty];
    }
    get keys() {
      return this[_data][$keys];
    }
    get lastSeen() {
      return this[_lastSeen];
    }
    get length() {
      return this[_data][$length];
    }
    set onTimeout(callback) {
      this[_timeoutCallback] = callback;
    }
    get values() {
      return this[_data][$values];
    }
    _get(key) {
      return this[_data][$_get](key);
    }
    _set(key, value$) {
      let value = value$;
      this[_data][$_set](key, value);
      return value$;
    }
    addAll(other) {
      core.Map.as(other);
      return this[_data][$addAll](other);
    }
    addEntries(entries) {
      T.IterableOfMapEntry().as(entries);
      this[_data][$addEntries](entries);
    }
    cast(K, V) {
      return this[_data][$cast](K, V);
    }
    clear() {
      this[_data][$clear]();
    }
    containsKey(key) {
      return this[_data][$containsKey](key);
    }
    containsValue(value) {
      return this[_data][$containsValue](value);
    }
    destroy() {
      this[_sessionManager$][_removeFromTimeoutQueue](this);
      this[_sessionManager$][_sessions][$remove](this.id);
    }
    forEach(f) {
      this[_data][$forEach](T.dynamicAnddynamicTovoid().as(f));
    }
    map(K, V, transform) {
      return this[_data][$map](K, V, dart.fnType(core.MapEntry$(K, V), [dart.dynamic, dart.dynamic]).as(transform));
    }
    putIfAbsent(key, ifAbsent) {
      T.VoidTodynamic().as(ifAbsent);
      return core.Object.as(this[_data][$putIfAbsent](key, ifAbsent));
    }
    remove(key) {
      return this[_data][$remove](key);
    }
    removeWhere(test) {
      this[_data][$removeWhere](T.dynamicAnddynamicTobool().as(test));
    }
    toString() {
      return "HttpSession id:" + this.id + " " + dart.str(this[_data]);
    }
    update(key, update, opts) {
      T.StringTovoid().as(update);
      let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
      T.VoidToNdynamic().as(ifAbsent);
      return this[_data][$update](key, T.dynamicTodynamic().as(update), {ifAbsent: ifAbsent});
    }
    updateAll(update) {
      T.StringAndStringTovoid().as(update);
      this[_data][$updateAll](T.dynamicAnddynamicTodynamic().as(update));
    }
  };
  (http._HttpSession.new = function(_sessionManager, id) {
    this[_isNew] = true;
    this[_timeoutCallback] = null;
    this[_prev] = null;
    this[_next] = null;
    this[_data] = new _js_helper.LinkedMap.new();
    this[_sessionManager$] = _sessionManager;
    this.id = id;
    this[_lastSeen] = new core.DateTime.now();
    ;
  }).prototype = http._HttpSession.prototype;
  dart.addTypeTests(http._HttpSession);
  dart.addTypeCaches(http._HttpSession);
  http._HttpSession[dart.implements] = () => [http.HttpSession];
  dart.setMethodSignature(http._HttpSession, () => ({
    __proto__: dart.getMethods(http._HttpSession.__proto__),
    _get: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)]),
    [$_get]: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)]),
    _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addEntries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$addEntries]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    cast: dart.gFnType((K, V) => [core.Map$(K, V), []], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$cast]: dart.gFnType((K, V) => [core.Map$(K, V), []], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    clear: dart.fnType(dart.void, []),
    [$clear]: dart.fnType(dart.void, []),
    containsKey: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$containsKey]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    containsValue: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    [$containsValue]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
    destroy: dart.fnType(dart.void, []),
    forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [core.String, core.String])]),
    [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [core.String, core.String])]),
    map: dart.gFnType((K, V) => [core.Map$(K, V), [dart.fnType(core.MapEntry$(K, V), [core.String, core.String])]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$map]: dart.gFnType((K, V) => [core.Map$(K, V), [dart.fnType(core.MapEntry$(K, V), [core.String, core.String])]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    putIfAbsent: dart.fnType(core.Object, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    [$putIfAbsent]: dart.fnType(core.Object, [dart.nullable(core.Object), dart.nullable(core.Object)]),
    remove: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)]),
    [$remove]: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)]),
    removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [core.String, core.String])]),
    [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [core.String, core.String])]),
    update: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
    [$update]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
    updateAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [$updateAll]: dart.fnType(dart.void, [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(http._HttpSession, () => ({
    __proto__: dart.getGetters(http._HttpSession.__proto__),
    entries: core.Iterable$(core.MapEntry),
    [$entries]: core.Iterable$(core.MapEntry),
    isEmpty: core.bool,
    [$isEmpty]: core.bool,
    isNew: core.bool,
    isNotEmpty: core.bool,
    [$isNotEmpty]: core.bool,
    keys: core.Iterable,
    [$keys]: core.Iterable,
    lastSeen: core.DateTime,
    length: core.int,
    [$length]: core.int,
    values: core.Iterable,
    [$values]: core.Iterable
  }));
  dart.setSetterSignature(http._HttpSession, () => ({
    __proto__: dart.getSetters(http._HttpSession.__proto__),
    onTimeout: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(http._HttpSession, I[18]);
  dart.setFieldSignature(http._HttpSession, () => ({
    __proto__: dart.getFields(http._HttpSession.__proto__),
    [_isNew]: dart.fieldType(core.bool),
    [_lastSeen]: dart.finalFieldType(core.DateTime),
    [_timeoutCallback]: dart.fieldType(dart.nullable(core.Function)),
    [_sessionManager$]: dart.finalFieldType(http._HttpSessionManager),
    [_prev]: dart.fieldType(dart.nullable(http._HttpSession)),
    [_next]: dart.fieldType(dart.nullable(http._HttpSession)),
    id: dart.finalFieldType(core.String),
    [_data]: dart.finalFieldType(core.Map)
  }));
  dart.defineExtensionMethods(http._HttpSession, [
    '_get',
    '_set',
    'addAll',
    'addEntries',
    'cast',
    'clear',
    'containsKey',
    'containsValue',
    'forEach',
    'map',
    'putIfAbsent',
    'remove',
    'removeWhere',
    'toString',
    'update',
    'updateAll'
  ]);
  dart.defineExtensionAccessors(http._HttpSession, [
    'entries',
    'isEmpty',
    'isNotEmpty',
    'keys',
    'length',
    'values'
  ]);
  var _sessionTimeout = dart.privateName(http, "_sessionTimeout");
  var _head = dart.privateName(http, "_head");
  var _tail = dart.privateName(http, "_tail");
  var _timer = dart.privateName(http, "_timer");
  var _stopTimer = dart.privateName(http, "_stopTimer");
  var _startTimer = dart.privateName(http, "_startTimer");
  var _addToTimeoutQueue = dart.privateName(http, "_addToTimeoutQueue");
  var _timerTimeout = dart.privateName(http, "_timerTimeout");
  http._HttpSessionManager = class _HttpSessionManager extends core.Object {
    set sessionTimeout(timeout) {
      this[_sessionTimeout] = timeout;
      this[_stopTimer]();
      this[_startTimer]();
    }
    close() {
      this[_stopTimer]();
    }
    createSession() {
      let t19, t18, t17;
      let id = this.createSessionId();
      while (this[_sessions][$containsKey](id)) {
        id = this.createSessionId();
      }
      let session = (t17 = this[_sessions], t18 = id, t19 = new http._HttpSession.new(this, id), t17[$_set](t18, t19), t19);
      this[_addToTimeoutQueue](session);
      return session;
    }
    createSessionId() {
      let data = http._CryptoUtils.getRandomBytes(16);
      return http._CryptoUtils.bytesToHex(data);
    }
    getSession(id) {
      return this[_sessions][$_get](dart.nullCheck(id));
    }
    [_addToTimeoutQueue](session) {
      if (this[_head] == null) {
        if (!(this[_tail] == null)) dart.assertFailed(null, I[22], 217, 14, "_tail == null");
        this[_tail] = this[_head] = session;
        this[_startTimer]();
      } else {
        if (!(this[_timer] != null)) dart.assertFailed(null, I[22], 221, 14, "_timer != null");
        if (!(this[_tail] != null)) dart.assertFailed(null, I[22], 222, 14, "_tail != null");
        dart.nullCheck(this[_tail])[_next] = session;
        session[_prev] = this[_tail];
        this[_tail] = session;
      }
    }
    [_removeFromTimeoutQueue](session) {
      if (session[_next] != null) {
        dart.nullCheck(session[_next])[_prev] = session[_prev];
      }
      if (session[_prev] != null) {
        dart.nullCheck(session[_prev])[_next] = session[_next];
      }
      if (dart.equals(this[_head], session)) {
        this[_head] = session[_next];
        this[_stopTimer]();
        this[_startTimer]();
      }
      if (dart.equals(this[_tail], session)) {
        this[_tail] = session[_prev];
      }
      session[_next] = session[_prev] = null;
    }
    [_startTimer]() {
      if (!(this[_timer] == null)) dart.assertFailed(null, I[22], 250, 12, "_timer == null");
      if (this[_head] != null) {
        let seconds = new core.DateTime.now().difference(dart.nullCheck(this[_head]).lastSeen).inSeconds;
        this[_timer] = async.Timer.new(new core.Duration.new({seconds: this[_sessionTimeout] - seconds}), dart.bind(this, _timerTimeout));
      }
    }
    [_stopTimer]() {
      if (this[_timer] != null) {
        dart.nullCheck(this[_timer]).cancel();
        this[_timer] = null;
      }
    }
    [_timerTimeout]() {
      this[_stopTimer]();
      if (!(this[_head] != null)) dart.assertFailed(null, I[22], 267, 12, "_head != null");
      let session = dart.nullCheck(this[_head]);
      session.destroy();
      if (session[_timeoutCallback] != null) {
        dart.dcall(dart.nullCheck(session[_timeoutCallback]), []);
      }
    }
  };
  (http._HttpSessionManager.new = function() {
    this[_sessionTimeout] = 20 * 60;
    this[_head] = null;
    this[_tail] = null;
    this[_timer] = null;
    this[_sessions] = new (T.IdentityMapOfString$_HttpSession()).new();
    ;
  }).prototype = http._HttpSessionManager.prototype;
  dart.addTypeTests(http._HttpSessionManager);
  dart.addTypeCaches(http._HttpSessionManager);
  dart.setMethodSignature(http._HttpSessionManager, () => ({
    __proto__: dart.getMethods(http._HttpSessionManager.__proto__),
    close: dart.fnType(dart.void, []),
    createSession: dart.fnType(http._HttpSession, []),
    createSessionId: dart.fnType(core.String, []),
    getSession: dart.fnType(dart.nullable(http._HttpSession), [dart.nullable(core.String)]),
    [_addToTimeoutQueue]: dart.fnType(dart.void, [http._HttpSession]),
    [_removeFromTimeoutQueue]: dart.fnType(dart.void, [http._HttpSession]),
    [_startTimer]: dart.fnType(dart.void, []),
    [_stopTimer]: dart.fnType(dart.void, []),
    [_timerTimeout]: dart.fnType(dart.void, [])
  }));
  dart.setSetterSignature(http._HttpSessionManager, () => ({
    __proto__: dart.getSetters(http._HttpSessionManager.__proto__),
    sessionTimeout: core.int
  }));
  dart.setLibraryUri(http._HttpSessionManager, I[18]);
  dart.setFieldSignature(http._HttpSessionManager, () => ({
    __proto__: dart.getFields(http._HttpSessionManager.__proto__),
    [_sessions]: dart.finalFieldType(core.Map$(core.String, http._HttpSession)),
    [_sessionTimeout]: dart.fieldType(core.int),
    [_head]: dart.fieldType(dart.nullable(http._HttpSession)),
    [_tail]: dart.fieldType(dart.nullable(http._HttpSession)),
    [_timer]: dart.fieldType(dart.nullable(async.Timer))
  }));
  http.HttpOverrides = class HttpOverrides extends core.Object {
    static get current() {
      let t17;
      return T.HttpOverridesN().as((t17 = async.Zone.current._get(http._httpOverridesToken), t17 == null ? http.HttpOverrides._global : t17));
    }
    static set global(overrides) {
      http.HttpOverrides._global = overrides;
    }
    createHttpClient(context) {
      return internals_for_browser_or_node_impl_browser.newHttpClient();
    }
    findProxyFromEnvironment(url, environment) {
      return "DIRECT";
    }
    static runWithHttpOverrides(R, body, overrides) {
      return http._asyncRunZoned(R, body, {zoneValues: new (T.LinkedMapOfObjectN$ObjectN()).from([http._httpOverridesToken, overrides])});
    }
    static runZoned(R, body, opts) {
      let createHttpClient = opts && 'createHttpClient' in opts ? opts.createHttpClient : null;
      let findProxyFromEnvironment = opts && 'findProxyFromEnvironment' in opts ? opts.findProxyFromEnvironment : null;
      let overrides = new http._HttpOverridesScope.new(createHttpClient, findProxyFromEnvironment);
      return http._asyncRunZoned(R, body, {zoneValues: new (T.LinkedMapOfObjectN$ObjectN()).from([http._httpOverridesToken, overrides])});
    }
  };
  (http.HttpOverrides.new = function() {
    ;
  }).prototype = http.HttpOverrides.prototype;
  dart.addTypeTests(http.HttpOverrides);
  dart.addTypeCaches(http.HttpOverrides);
  dart.setMethodSignature(http.HttpOverrides, () => ({
    __proto__: dart.getMethods(http.HttpOverrides.__proto__),
    createHttpClient: dart.fnType(http.HttpClient, [dart.nullable(security_context.SecurityContext)]),
    findProxyFromEnvironment: dart.fnType(core.String, [core.Uri, dart.nullable(core.Map$(core.String, core.String))])
  }));
  dart.setLibraryUri(http.HttpOverrides, I[18]);
  dart.defineLazy(http.HttpOverrides, {
    /*http.HttpOverrides._global*/get _global() {
      return null;
    },
    set _global(_) {}
  }, false);
  var _previous$ = dart.privateName(http, "_previous");
  var _createHttpClient$ = dart.privateName(http, "_createHttpClient");
  var _findProxyFromEnvironment$ = dart.privateName(http, "_findProxyFromEnvironment");
  http._HttpOverridesScope = class _HttpOverridesScope extends http.HttpOverrides {
    createHttpClient(context) {
      let createHttpClient = this[_createHttpClient$];
      if (createHttpClient != null) return createHttpClient(context);
      let previous = this[_previous$];
      if (previous != null) return previous.createHttpClient(context);
      return super.createHttpClient(context);
    }
    findProxyFromEnvironment(url, environment) {
      let findProxyFromEnvironment = this[_findProxyFromEnvironment$];
      if (findProxyFromEnvironment != null) {
        return findProxyFromEnvironment(url, environment);
      }
      let previous = this[_previous$];
      if (previous != null) {
        return previous.findProxyFromEnvironment(url, environment);
      }
      return super.findProxyFromEnvironment(url, environment);
    }
  };
  (http._HttpOverridesScope.new = function(_createHttpClient, _findProxyFromEnvironment) {
    this[_previous$] = http.HttpOverrides.current;
    this[_createHttpClient$] = _createHttpClient;
    this[_findProxyFromEnvironment$] = _findProxyFromEnvironment;
    ;
  }).prototype = http._HttpOverridesScope.prototype;
  dart.addTypeTests(http._HttpOverridesScope);
  dart.addTypeCaches(http._HttpOverridesScope);
  dart.setLibraryUri(http._HttpOverridesScope, I[18]);
  dart.setFieldSignature(http._HttpOverridesScope, () => ({
    __proto__: dart.getFields(http._HttpOverridesScope.__proto__),
    [_previous$]: dart.finalFieldType(dart.nullable(http.HttpOverrides)),
    [_createHttpClient$]: dart.finalFieldType(dart.nullable(dart.fnType(http.HttpClient, [dart.nullable(security_context.SecurityContext)]))),
    [_findProxyFromEnvironment$]: dart.finalFieldType(dart.nullable(dart.fnType(core.String, [core.Uri, dart.nullable(core.Map$(core.String, core.String))])))
  }));
  var clientNoContextTakeover$ = dart.privateName(http, "CompressionOptions.clientNoContextTakeover");
  var serverNoContextTakeover$ = dart.privateName(http, "CompressionOptions.serverNoContextTakeover");
  var clientMaxWindowBits$ = dart.privateName(http, "CompressionOptions.clientMaxWindowBits");
  var serverMaxWindowBits$ = dart.privateName(http, "CompressionOptions.serverMaxWindowBits");
  var enabled$ = dart.privateName(http, "CompressionOptions.enabled");
  http.CompressionOptions = class CompressionOptions extends core.Object {
    get clientNoContextTakeover() {
      return this[clientNoContextTakeover$];
    }
    set clientNoContextTakeover(value) {
      super.clientNoContextTakeover = value;
    }
    get serverNoContextTakeover() {
      return this[serverNoContextTakeover$];
    }
    set serverNoContextTakeover(value) {
      super.serverNoContextTakeover = value;
    }
    get clientMaxWindowBits() {
      return this[clientMaxWindowBits$];
    }
    set clientMaxWindowBits(value) {
      super.clientMaxWindowBits = value;
    }
    get serverMaxWindowBits() {
      return this[serverMaxWindowBits$];
    }
    set serverMaxWindowBits(value) {
      super.serverMaxWindowBits = value;
    }
    get enabled() {
      return this[enabled$];
    }
    set enabled(value) {
      super.enabled = value;
    }
  };
  (http.CompressionOptions.new = function(opts) {
    let clientNoContextTakeover = opts && 'clientNoContextTakeover' in opts ? opts.clientNoContextTakeover : false;
    let serverNoContextTakeover = opts && 'serverNoContextTakeover' in opts ? opts.serverNoContextTakeover : false;
    let clientMaxWindowBits = opts && 'clientMaxWindowBits' in opts ? opts.clientMaxWindowBits : null;
    let serverMaxWindowBits = opts && 'serverMaxWindowBits' in opts ? opts.serverMaxWindowBits : null;
    let enabled = opts && 'enabled' in opts ? opts.enabled : true;
    this[clientNoContextTakeover$] = clientNoContextTakeover;
    this[serverNoContextTakeover$] = serverNoContextTakeover;
    this[clientMaxWindowBits$] = clientMaxWindowBits;
    this[serverMaxWindowBits$] = serverMaxWindowBits;
    this[enabled$] = enabled;
    ;
  }).prototype = http.CompressionOptions.prototype;
  dart.addTypeTests(http.CompressionOptions);
  dart.addTypeCaches(http.CompressionOptions);
  dart.setLibraryUri(http.CompressionOptions, I[18]);
  dart.setFieldSignature(http.CompressionOptions, () => ({
    __proto__: dart.getFields(http.CompressionOptions.__proto__),
    clientNoContextTakeover: dart.finalFieldType(core.bool),
    serverNoContextTakeover: dart.finalFieldType(core.bool),
    clientMaxWindowBits: dart.finalFieldType(dart.nullable(core.int)),
    serverMaxWindowBits: dart.finalFieldType(dart.nullable(core.int)),
    enabled: dart.finalFieldType(core.bool)
  }));
  dart.defineLazy(http.CompressionOptions, {
    /*http.CompressionOptions.compressionDefault*/get compressionDefault() {
      return C[102] || CT.C102;
    },
    /*http.CompressionOptions.DEFAULT*/get DEFAULT() {
      return C[102] || CT.C102;
    },
    /*http.CompressionOptions.compressionOff*/get compressionOff() {
      return C[103] || CT.C103;
    },
    /*http.CompressionOptions.OFF*/get OFF() {
      return C[103] || CT.C103;
    }
  }, false);
  var pingInterval = dart.privateName(http, "WebSocket.pingInterval");
  http.WebSocket = class WebSocket extends core.Object {
    get pingInterval() {
      return this[pingInterval];
    }
    set pingInterval(value) {
      this[pingInterval] = value;
    }
    static fromUpgradedSocket(socket, opts) {
      let protocol = opts && 'protocol' in opts ? opts.protocol : null;
      let serverSide = opts && 'serverSide' in opts ? opts.serverSide : null;
      let compression = opts && 'compression' in opts ? opts.compression : C[102] || CT.C102;
      dart.throw(new core.UnimplementedError.new());
    }
    close(code = null, reason = null) {
      return async.async(dart.dynamic, function* close() {
      });
    }
    static connect(url, opts) {
      let protocols = opts && 'protocols' in opts ? opts.protocols : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let compression = opts && 'compression' in opts ? opts.compression : C[102] || CT.C102;
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (http.WebSocket.new = function() {
    this[pingInterval] = null;
    ;
  }).prototype = http.WebSocket.prototype;
  http.WebSocket.prototype[dart.isStream] = true;
  dart.addTypeTests(http.WebSocket);
  dart.addTypeCaches(http.WebSocket);
  http.WebSocket[dart.implements] = () => [async.Stream, async.StreamSink];
  dart.setMethodSignature(http.WebSocket, () => ({
    __proto__: dart.getMethods(http.WebSocket.__proto__),
    close: dart.fnType(async.Future, [], [dart.nullable(core.int), dart.nullable(core.String)])
  }));
  dart.setLibraryUri(http.WebSocket, I[18]);
  dart.setFieldSignature(http.WebSocket, () => ({
    __proto__: dart.getFields(http.WebSocket.__proto__),
    pingInterval: dart.fieldType(dart.nullable(core.Duration))
  }));
  dart.defineLazy(http.WebSocket, {
    /*http.WebSocket.connecting*/get connecting() {
      return 0;
    },
    /*http.WebSocket.open*/get open() {
      return 1;
    },
    /*http.WebSocket.closing*/get closing() {
      return 2;
    },
    /*http.WebSocket.closed*/get closed() {
      return 3;
    },
    /*http.WebSocket.CONNECTING*/get CONNECTING() {
      return 0;
    },
    /*http.WebSocket.OPEN*/get OPEN() {
      return 1;
    },
    /*http.WebSocket.CLOSING*/get CLOSING() {
      return 2;
    },
    /*http.WebSocket.CLOSED*/get CLOSED() {
      return 3;
    },
    /*http.WebSocket.userAgent*/get userAgent() {
      return null;
    },
    set userAgent(_) {}
  }, false);
  var message$8 = dart.privateName(http, "WebSocketException.message");
  http.WebSocketException = class WebSocketException extends core.Object {
    get message() {
      return this[message$8];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "WebSocketException: " + this.message;
    }
  };
  (http.WebSocketException.new = function(message = "") {
    this[message$8] = message;
    ;
  }).prototype = http.WebSocketException.prototype;
  dart.addTypeTests(http.WebSocketException);
  dart.addTypeCaches(http.WebSocketException);
  http.WebSocketException[dart.implements] = () => [exceptions.IOException];
  dart.setLibraryUri(http.WebSocketException, I[18]);
  dart.setFieldSignature(http.WebSocketException, () => ({
    __proto__: dart.getFields(http.WebSocketException.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(http.WebSocketException, ['toString']);
  http.WebSocketStatus = class WebSocketStatus extends core.Object {};
  (http.WebSocketStatus.new = function() {
    ;
  }).prototype = http.WebSocketStatus.prototype;
  dart.addTypeTests(http.WebSocketStatus);
  dart.addTypeCaches(http.WebSocketStatus);
  dart.setLibraryUri(http.WebSocketStatus, I[18]);
  dart.defineLazy(http.WebSocketStatus, {
    /*http.WebSocketStatus.normalClosure*/get normalClosure() {
      return 1000;
    },
    /*http.WebSocketStatus.goingAway*/get goingAway() {
      return 1001;
    },
    /*http.WebSocketStatus.protocolError*/get protocolError() {
      return 1002;
    },
    /*http.WebSocketStatus.unsupportedData*/get unsupportedData() {
      return 1003;
    },
    /*http.WebSocketStatus.reserved1004*/get reserved1004() {
      return 1004;
    },
    /*http.WebSocketStatus.noStatusReceived*/get noStatusReceived() {
      return 1005;
    },
    /*http.WebSocketStatus.abnormalClosure*/get abnormalClosure() {
      return 1006;
    },
    /*http.WebSocketStatus.invalidFramePayloadData*/get invalidFramePayloadData() {
      return 1007;
    },
    /*http.WebSocketStatus.policyViolation*/get policyViolation() {
      return 1008;
    },
    /*http.WebSocketStatus.messageTooBig*/get messageTooBig() {
      return 1009;
    },
    /*http.WebSocketStatus.missingMandatoryExtension*/get missingMandatoryExtension() {
      return 1010;
    },
    /*http.WebSocketStatus.internalServerError*/get internalServerError() {
      return 1011;
    },
    /*http.WebSocketStatus.reserved1015*/get reserved1015() {
      return 1015;
    },
    /*http.WebSocketStatus.NORMAL_CLOSURE*/get NORMAL_CLOSURE() {
      return 1000;
    },
    /*http.WebSocketStatus.GOING_AWAY*/get GOING_AWAY() {
      return 1001;
    },
    /*http.WebSocketStatus.PROTOCOL_ERROR*/get PROTOCOL_ERROR() {
      return 1002;
    },
    /*http.WebSocketStatus.UNSUPPORTED_DATA*/get UNSUPPORTED_DATA() {
      return 1003;
    },
    /*http.WebSocketStatus.RESERVED_1004*/get RESERVED_1004() {
      return 1004;
    },
    /*http.WebSocketStatus.NO_STATUS_RECEIVED*/get NO_STATUS_RECEIVED() {
      return 1005;
    },
    /*http.WebSocketStatus.ABNORMAL_CLOSURE*/get ABNORMAL_CLOSURE() {
      return 1006;
    },
    /*http.WebSocketStatus.INVALID_FRAME_PAYLOAD_DATA*/get INVALID_FRAME_PAYLOAD_DATA() {
      return 1007;
    },
    /*http.WebSocketStatus.POLICY_VIOLATION*/get POLICY_VIOLATION() {
      return 1008;
    },
    /*http.WebSocketStatus.MESSAGE_TOO_BIG*/get MESSAGE_TOO_BIG() {
      return 1009;
    },
    /*http.WebSocketStatus.MISSING_MANDATORY_EXTENSION*/get MISSING_MANDATORY_EXTENSION() {
      return 1010;
    },
    /*http.WebSocketStatus.INTERNAL_SERVER_ERROR*/get INTERNAL_SERVER_ERROR() {
      return 1011;
    },
    /*http.WebSocketStatus.RESERVED_1015*/get RESERVED_1015() {
      return 1015;
    }
  }, false);
  http.WebSocketTransformer = class WebSocketTransformer extends core.Object {
    static new(opts) {
      let protocolSelector = opts && 'protocolSelector' in opts ? opts.protocolSelector : null;
      let compression = opts && 'compression' in opts ? opts.compression : C[102] || CT.C102;
      dart.throw(new core.UnimplementedError.new());
    }
    static isUpgradeRequest(request) {
      dart.throw(new core.UnimplementedError.new());
    }
    static upgrade(request, opts) {
      let protocolSelector = opts && 'protocolSelector' in opts ? opts.protocolSelector : null;
      let compression = opts && 'compression' in opts ? opts.compression : C[102] || CT.C102;
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (http.WebSocketTransformer[dart.mixinNew] = function() {
  }).prototype = http.WebSocketTransformer.prototype;
  dart.addTypeTests(http.WebSocketTransformer);
  dart.addTypeCaches(http.WebSocketTransformer);
  http.WebSocketTransformer[dart.implements] = () => [async.StreamTransformer$(http.HttpRequest, http.WebSocket)];
  dart.setLibraryUri(http.WebSocketTransformer, I[18]);
  http._isTokenChar = function _isTokenChar(byte) {
    return byte > 31 && byte < 128 && !http._Const.SEPARATOR_MAP[$_get](byte);
  };
  http._isValueChar = function _isValueChar(byte) {
    return byte > 31 && byte < 128 || byte === 32 || byte === 9;
  };
  dart.defineLazy(http, {
    /*http._asyncRunZoned*/get _asyncRunZoned() {
      return C[61] || CT.C61;
    },
    /*http._httpOverridesToken*/get _httpOverridesToken() {
      return new core.Object.new();
    }
  }, false);
  dart.trackLibraries("packages/universal_io/src/io/sync_socket.dart", {
    "package:universal_io/src/io/sync_socket.dart": sync_socket,
    "package:universal_io/src/io/stdio.dart": stdio,
    "package:universal_io/src/io/socket.dart": socket$,
    "package:universal_io/src/io/security_context.dart": security_context,
    "package:universal_io/src/io/secure_socket.dart": secure_socket,
    "package:universal_io/src/io/secure_server_socket.dart": secure_server_socket,
    "package:universal_io/src/io/process.dart": process,
    "package:universal_io/src/io/platform.dart": platform,
    "package:universal_io/src/io/overrides.dart": overrides$,
    "package:universal_io/src/io/network_policy.dart": network_policy,
    "package:universal_io/src/io/link.dart": link,
    "package:universal_io/src/io/internet_address.dart": internet_address,
    "package:universal_io/src/io/file_system_entity.dart": file_system_entity,
    "package:universal_io/src/io/file.dart": file,
    "package:universal_io/src/io/directory.dart": directory,
    "package:universal_io/src/browser/io_sink_base.dart": io_sink_base,
    "package:universal_io/src/browser/http_client_response.dart": http_client_response,
    "package:universal_io/src/browser/http_client_exception.dart": http_client_exception,
    "package:universal_io/src/browser/http_client_request.dart": http_client_request,
    "package:universal_io/src/browser/http_client.dart": http_client,
    "package:universal_io/src/internals_for_browser_or_node_impl_browser.dart": internals_for_browser_or_node_impl_browser,
    "package:universal_io/src/internals_for_browser_or_node.dart": internals_for_browser_or_node,
    "package:universal_io/src/http/http.dart": http,
    "package:universal_io/src/io_impl_js.dart": io_impl_js
  }, {
    "package:universal_io/src/http/http.dart": ["crypto.dart", "http_date.dart", "http_headers.dart", "http_session.dart", "overrides.dart", "websocket.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["sync_socket.dart","stdio.dart","socket.dart","security_context.dart","secure_socket.dart","secure_server_socket.dart","process.dart","platform.dart","overrides.dart","network_policy.dart","link.dart","internet_address.dart","file_system_entity.dart","file.dart","directory.dart","../browser/io_sink_base.dart","../browser/http_client_response.dart","../browser/http_client_exception.dart","../http/http.dart","../browser/http_client_request.dart","../browser/http_client.dart","../internals_for_browser_or_node_impl_browser.dart","../http/crypto.dart","../http/http_date.dart","../http/http_headers.dart","../http/http_session.dart","../http/overrides.dart","../http/websocket.dart"],"names":[],"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","file":"../../../../../../../../../../../../packages/universal_io/src/io/sync_socket.dart.lib.js"}');
  // Exports:
  return {
    src__io__sync_socket: sync_socket,
    src__io__stdio: stdio,
    src__io__socket: socket$,
    src__io__security_context: security_context,
    src__io__secure_socket: secure_socket,
    src__io__secure_server_socket: secure_server_socket,
    src__io__process: process,
    src__io__platform: platform,
    src__io__overrides: overrides$,
    src__io__network_policy: network_policy,
    src__io__link: link,
    src__io__internet_address: internet_address,
    src__io__file_system_entity: file_system_entity,
    src__io__file: file,
    src__io__directory: directory,
    src__browser__io_sink_base: io_sink_base,
    src__browser__http_client_response: http_client_response,
    src__browser__http_client_exception: http_client_exception,
    src__browser__http_client_request: http_client_request,
    src__browser__http_client: http_client,
    src__internals_for_browser_or_node_impl_browser: internals_for_browser_or_node_impl_browser,
    src__internals_for_browser_or_node: internals_for_browser_or_node,
    src__http__http: http,
    src__io_impl_js: io_impl_js
  };
}));

//# sourceMappingURL=sync_socket.dart.lib.js.map
